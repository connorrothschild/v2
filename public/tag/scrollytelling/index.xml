<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scrollytelling | Connor Rothschild</title>
    <link>/tag/scrollytelling/</link>
      <atom:link href="/tag/scrollytelling/index.xml" rel="self" type="application/rss+xml" />
    <description>scrollytelling</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Connor Rothschild, 2020</copyright><lastBuildDate>Sat, 26 Oct 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/social.png</url>
      <title>scrollytelling</title>
      <link>/tag/scrollytelling/</link>
    </image>
    
    <item>
      <title>How to Scrollytell in R: Automation and Its Impact on Jobs</title>
      <link>/post/automation-scrollytell/</link>
      <pubDate>Sat, 26 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/post/automation-scrollytell/</guid>
      <description>


&lt;p&gt;I’ve always been interested in data visualization, and my most recent sub-passion has been &lt;em&gt;scrollytelling&lt;/em&gt;. I’ve seen numerous examples of amazing scrolling articles, from sites such as &lt;a href=&#34;https://pudding.cool/&#34;&gt;The Pudding&lt;/a&gt;, the &lt;a href=&#34;https://www.nytimes.com/&#34;&gt;New York Times&lt;/a&gt;, and &lt;a href=&#34;https://fivethirtyeight.com/&#34;&gt;FiveThirtyEight&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Although most of these sites rely on the same high-powered visualization tools (such as &lt;a href=&#34;https://d3js.org/&#34;&gt;D3.js&lt;/a&gt;) to create their stories, the learning curve for those are a bit too steep for a full-time college student to pursue (although &lt;a href=&#34;https://github.com/connorrothschild/D3.js&#34;&gt;I am trying&lt;/a&gt;!).&lt;/p&gt;
&lt;p&gt;Thankfully, I came across some examples of scrollytelling in my language of choice, R.&lt;/p&gt;
&lt;p&gt;What follows is a scrollytelling recreation of the &lt;a href=&#34;https://connorrothschild.github.io/r/automation/&#34;&gt;very first visualization I ever made&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(shiny)
library(scrollytell)
library(shinyjs)
library(ggvis)
library(plotly)

theme_set(theme_minimal())&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;construct-an-updating-plot-object&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Construct an Updating Plot Object&lt;/h2&gt;
&lt;p&gt;Once the data (&lt;a href=&#34;https://github.com/connorrothschild/shiny-scrollytell/tree/master/data&#34;&gt;which can be found here&lt;/a&gt;) is already &lt;a href=&#34;https://connorrothschild.github.io/r/automation/#load-datasets&#34;&gt;loaded and cleaned&lt;/a&gt;, we construct a plot object that will update as the user scrolls. (&lt;a href=&#34;https://github.com/scottyd22/dream_team&#34;&gt;Other R users&lt;/a&gt; make multiple plots; either way is fine.)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot &amp;lt;- data %&amp;gt;% 
  filter(if (add != 8) add &amp;gt;= reveal else reveal %in% c(1:8)) %&amp;gt;%
  ggplot() +
  geom_point(mapping=aes(x=A_MEDIAN, y=probability, size=TOT_EMP,
                         alpha=ifelse(add == reveal, 1/5, 1/10), col=typicaled,
                         text = glue::glue(&amp;#39;&amp;lt;b&amp;gt;Occupation&amp;lt;/b&amp;gt;: {occupation}
                                            &amp;lt;b&amp;gt;Probability of Automation&amp;lt;/b&amp;gt;: {probability}%
                                            &amp;lt;b&amp;gt;Median Income&amp;lt;/b&amp;gt;: ${A_MEDIAN}
                                            &amp;lt;b&amp;gt;Number of Workers&amp;lt;/b&amp;gt;: {TOT_EMP}&amp;#39;))) +
  scale_size(range = c(1, 20)) +
  xlab(&amp;quot;\nMedian Income&amp;quot;) +
  ylab(&amp;quot;Probability of Automation&amp;quot;) +
  labs(size= &amp;quot;&amp;quot;, col= &amp;quot;&amp;quot;, alpha = &amp;quot;&amp;quot;) +
  scale_color_manual(values = cols, breaks = legend_ord) +
  scale_x_continuous(labels=scales::dollar_format(prefix=&amp;quot;$&amp;quot;), limits = c(25000,200000)) +
  scale_y_continuous(labels=scales::number_format(suffix=&amp;quot;%&amp;quot;), limits = c(0,100)) +
  # cr::drop_axis(axis = &amp;quot;y&amp;quot;) +
  theme(axis.line.x = ggplot2::element_line(colour = NULL, 
                                            size = NULL, linetype = NULL, lineend = NULL), 
        axis.line.y = ggplot2::element_blank(),
        panel.grid.major.x = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But wait, what’s that second line of code?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filter(if (add != 8) add &amp;gt;= reveal else reveal %in% c(1:8))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This may make &lt;em&gt;0 sense&lt;/em&gt; right now, but here’s why we have it.&lt;/p&gt;
&lt;p&gt;The important part (and somewhat difficult thing to understand) about this step is that your plot object has some &lt;strong&gt;data which corresponds to an updating variable&lt;/strong&gt;. For me, I added a variable called &lt;em&gt;reveal&lt;/em&gt; for each step of the visualization. For me, this meant having reveal correspond to a typical level of education for a given job.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- data %&amp;gt;% 
  mutate(reveal = case_when(
    typicaled == &amp;quot;No formal educational credential&amp;quot; ~ 1,
    typicaled == &amp;quot;High school diploma or equivalent&amp;quot; ~ 2,
    typicaled == &amp;quot;Postsecondary nondegree award&amp;quot; ~ 3,
    typicaled == &amp;quot;Some college, no degree&amp;quot; ~ 0,
    typicaled == &amp;quot;Associate&amp;#39;s degree&amp;quot; ~ 4,
    typicaled == &amp;quot;Bachelor&amp;#39;s degree&amp;quot; ~ 5,
    typicaled == &amp;quot;Master&amp;#39;s degree&amp;quot; ~ 6,
    typicaled == &amp;quot;Doctoral or professional degree&amp;quot; ~ 7,
  ))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What this means is that every time the post observes an event (a scroll), it will update according to the number in the &lt;em&gt;reveal&lt;/em&gt; column.&lt;/p&gt;
&lt;p&gt;So, when my plot object has a line of code which says:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filter(if (add != 8) add &amp;gt;= reveal else reveal %in% c(1:8))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That can be read as “Update the plot object to include all data points &lt;strong&gt;up until the current point&lt;/strong&gt; encoded in reveal.”&lt;/p&gt;
&lt;p&gt;But, it also depends on what level of &lt;em&gt;add&lt;/em&gt; we are at; if &lt;em&gt;add&lt;/em&gt; == 8 (the last data point, e.g. the concluding plot), then we want to show &lt;em&gt;all data points&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;“Okay, okay. But what is &lt;em&gt;add&lt;/em&gt;???”&lt;/p&gt;
&lt;p&gt;Good question. &lt;em&gt;add&lt;/em&gt; is the variable I constructed to correspond to the user’s input (in this case, the scroll!). When we put it all together, we’re going to wrap our plot object into a rendering function &lt;em&gt;inside&lt;/em&gt; the server function. Confusing? It looks like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;server &amp;lt;- function(input, output, session) {
  
  output$plot &amp;lt;- renderPlotly({
    
    add &amp;lt;- input$scr
    
    plot &amp;lt;- 
      # static ggplot goes here
      
      ggplotly(plot) %&amp;gt;%
      # other ggplotly parameters go here
      
  })
  
  # render the plot here
  output$scr &amp;lt;- renderScrollytell({scrollytell()})
  renderText(paste0(&amp;quot;Section: &amp;quot;, input$scr))
  observe({cat(&amp;quot;section:&amp;quot;, input$scr, &amp;quot;\n&amp;quot;)})
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What’s happening here? Within the server function, we’re doing two things:&lt;/p&gt;
&lt;p&gt;First, we’re creating the plot object. Because we have the command &lt;em&gt;add &amp;lt;- input&lt;span class=&#34;math inline&#34;&gt;\(scr* **inside** the function `renderPlotly`, our plot object will be dynamically updated along with *input\)&lt;/span&gt;scr&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This makes more sense when you connect it to the ui. In our ui function, we include a &lt;code&gt;scrolly_container&lt;/code&gt; from the scrollytell package. Within that, we make our &lt;code&gt;outputId&lt;/code&gt; correspond to the name of our updating input (in this case, &lt;em&gt;scr&lt;/em&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ui &amp;lt;- fluidPage(
  
  # a bunch of introductory stuff, css stuff
  
  # scrollytelling plot
  scrolly_container(outputId = &amp;quot;scr&amp;quot;, 
                       scrolly_graph(
                                     ## this is the plot object that we made earlier:
                                     plotlyOutput(&amp;quot;plot&amp;quot;, height = &amp;#39;600px&amp;#39;)
                                     
                    ), 
                    scrolly_sections(
                      ## each of these sections corresponds to an update
                      ## the number after id = corresponds to the `scr` update
                      ## the render_text() function will be discussed later
                      scrolly_section(id = 0, render_text(0)),
                      scrolly_section(id = 1, render_text(1)),
                      scrolly_section(id = 2, render_text(2)),
                      scrolly_section(id = 3, render_text(3)),
                      scrolly_section(id = 4, render_text(4)),
                      scrolly_section(id = 5, render_text(5)),
                      scrolly_section(id = 6, render_text(6)),
                      scrolly_section(id = 7, render_text(7)),
                      scrolly_section(id = 8, render_text(8)),
                      # add a scrolly_section with nothing in it; 
                      # this buffer prevents the plot from disappearing while reading last section
                      scrolly_section(id = &amp;quot;buffer&amp;quot;, br())
                    )
                    
  ),
 
  # a bunch of concluding stuff, other html 

)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, the simplest way to think about this so far is:&lt;/p&gt;
&lt;p&gt;Construct a plot object with some updating variable (in my case, &lt;em&gt;reveal&lt;/em&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filter(if (add != 8) add &amp;gt;= reveal else reveal %in% c(1:8))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make that variable correspond with some input variable (in my case &lt;em&gt;add&lt;/em&gt;, which is created from the &lt;em&gt;input$scr&lt;/em&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;server &amp;lt;- function(input, output, session) {
  
  output$plot &amp;lt;- renderPlotly({
    
    add &amp;lt;- input$scr
    #... &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Render your plot object in &lt;code&gt;scrolly_graph&lt;/code&gt;, and provide input updates via each &lt;code&gt;scrolly_section&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ui &amp;lt;- fluidPage(
  
  # a bunch of introductory stuff, css stuff
  
  # scrollytelling plot
  scrolly_container(outputId = &amp;quot;scr&amp;quot;, 
                       scrolly_graph(plotlyOutput(&amp;quot;plot&amp;quot;, height = &amp;#39;600px&amp;#39;)
                                     
                    ), 
                    scrolly_sections(
                      scrolly_section(id = 0, render_text(0)),
                      scrolly_section(id = 1, render_text(1)),
                      
                      # ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Render your plots in your server function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;server &amp;lt;- function(input, output, session) {
  
  output$plot &amp;lt;- 
    #...
  })
  
  output$scr &amp;lt;- renderScrollytell({scrollytell()})
  renderText(paste0(&amp;quot;Section: &amp;quot;, input$scr))
  observe({cat(&amp;quot;section:&amp;quot;, input$scr, &amp;quot;\n&amp;quot;)})
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s (most of) it for the plot section. You can play around with other customizations too (for example, the alphas for my circles correspond to an &lt;code&gt;ifelse&lt;/code&gt; around &lt;em&gt;reveal&lt;/em&gt;, so old circles are faded out compared to new ones).&lt;/p&gt;
&lt;div id=&#34;create-a-series-of-text-reveals&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Create a Series of Text Reveals&lt;/h3&gt;
&lt;p&gt;Next, we create text sections using &lt;code&gt;HTML&lt;/code&gt; and some helper functions which beautify them.&lt;/p&gt;
&lt;p&gt;First, we create the text boxes for each section following a similar naming convention:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;text1 &amp;lt;- HTML(&amp;quot;&amp;lt;H2&amp;gt; No education credentials &amp;lt;/H2&amp;gt;
              &amp;lt;br&amp;gt; &amp;lt;p&amp;gt; Workers with &amp;lt;font color=&amp;#39;#A00042&amp;#39;&amp;gt;no formal education credential&amp;lt;/font&amp;gt; have a median income of $25,636.
              &amp;lt;br&amp;gt; On average, those occupations have a &amp;lt;b&amp;gt;90% chance&amp;lt;/b&amp;gt; of job automation.
              &amp;lt;br&amp;gt;&amp;lt;br&amp;gt; There are 23,765,700 workers with &amp;lt;font color=&amp;#39;#A00042&amp;#39;&amp;gt;no formal education credential&amp;lt;/font&amp;gt;.&amp;lt;p&amp;gt;&amp;quot;)

text2 &amp;lt;- HTML(&amp;quot;&amp;lt;H2&amp;gt; High school diplomas &amp;lt;/H2&amp;gt;
              &amp;lt;br&amp;gt; &amp;lt;p&amp;gt;Workers with &amp;lt;font color=&amp;#39;#F56C42&amp;#39;&amp;gt;high school diplomas&amp;lt;/font&amp;gt; have a median income of $25,636.
              &amp;lt;br&amp;gt; On average, those occupations have a &amp;lt;b&amp;gt;60% chance&amp;lt;/b&amp;gt; of job automation.
              &amp;lt;br&amp;gt;&amp;lt;br&amp;gt; There are 33,129,910 workers with a &amp;lt;font color=&amp;#39;#F56C42&amp;#39;&amp;gt;high school diploma&amp;lt;/font&amp;gt;.&amp;lt;p&amp;gt;&amp;quot;)

# ... &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we create a function &lt;code&gt;render_text&lt;/code&gt; which beautifies that HTML with CSS:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;text &amp;lt;- function(num){
  p(
    switch(num,
           text1,
           text2,
           text3,
           text4,
           text5,
           text6,
           text7,
           text8
    )
  )
}

render_text &amp;lt;- function(num){
  
  div(
    text(num), class = &amp;quot;text&amp;quot;
  )
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For all 8 of the above &lt;em&gt;text_&lt;/em&gt;s, we’ve created a switch function which calls them depnding on the number passed to &lt;code&gt;render_text&lt;/code&gt;. Then, we apply paragraph format, put them in their own div, and apply the &lt;em&gt;text&lt;/em&gt; class in our CSS sheet.&lt;/p&gt;
&lt;p&gt;How does this work?&lt;/p&gt;
&lt;p&gt;Recall that above, in our ui section, we had the following:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scrolly_sections(
                      HTML(&amp;#39;&amp;lt;center&amp;gt;&amp;#39;),
                      scrolly_section(id = 0, render_text(0)),
                      scrolly_section(id = 1, render_text(1)),
                      # ...
                      
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, our &lt;code&gt;scrolly_section&lt;/code&gt;s take two inputs: our ID and our corresponding text. Rather than write out lengthy text boxes in each &lt;code&gt;scrolly_section&lt;/code&gt;, we can construct them in a single file and then knit them all into the same format using &lt;code&gt;render_text&lt;/code&gt;. This makes life a lot easier.&lt;/p&gt;
&lt;p&gt;So, on each scroll (or observation), the app will update 1) the plot object, by adding &lt;em&gt;add&lt;/em&gt; and updating according to &lt;em&gt;reveal&lt;/em&gt;, and 2) the text, by running &lt;code&gt;render_text&lt;/code&gt; which calls &lt;code&gt;text&lt;/code&gt; which beautifies our HTML text.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;final-touches&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Final Touches&lt;/h3&gt;
&lt;p&gt;Surprisingly, that’s about it. The rest of the app is built on &lt;code&gt;fluidPage&lt;/code&gt;, and organizing via rows and columns in your shiny app. Your app should have a CSS style sheet (in the &lt;a href=&#34;https://shiny.rstudio.com/articles/css.html&#34;&gt;www folder&lt;/a&gt;). You may also include other plots (for my post, I have an introductory plot with a bit more context), which you will have to separately create and render in your server function.&lt;/p&gt;
&lt;p&gt;All in all, my code looks like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ui &amp;lt;- fluidPage(
  
  # suppress warning messages while data is loading on-screen 
  tags$style(type=&amp;quot;text/css&amp;quot;,
             &amp;quot;.shiny-output-error { visibility: hidden; }&amp;quot;,
             &amp;quot;.shiny-output-error:before { visibility: hidden; }&amp;quot;),
  tags$head(
    includeCSS(&amp;quot;www/style.css&amp;quot;)
  ),
  
  # article title &amp;amp; name
  fluidRow(HTML(&amp;quot;&amp;lt;center&amp;gt;
                &amp;lt;h1&amp;gt;Automation and Its Impact on Jobs&amp;lt;/h1&amp;gt;
                &amp;lt;p style=&amp;#39;font-size:26px&amp;#39;&amp;gt; by &amp;lt;a href=&amp;#39;https://connorrothschild.github.io/&amp;#39; target=&amp;#39;_blank&amp;#39;&amp;gt;Connor Rothschild&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
                &amp;lt;/center&amp;gt;&amp;quot;)
  ),
  
  br(),
  
  fluidRow(
    column(1),
    
    column(10,
           # intro text
           fluidRow(id=&amp;#39;text&amp;#39;,
                    column(1),
                    column(10, 
                           br(),
                           text0,
                           hr(),
                           h1(
                             class = &amp;quot;instructions&amp;quot;,
                             &amp;quot;How to read this chart:&amp;quot;, 
                             br(),
                             br(),
                             &amp;quot;The size of each&amp;quot;, icon(&amp;quot;circle&amp;quot;), &amp;quot;corresponds to the number of workers in that job.&amp;quot;,
                             br(),
                             &amp;quot;Hover over each&amp;quot;, icon(&amp;quot;circle&amp;quot;), &amp;quot;to see details on the occupation&amp;#39;s income and probability of automation.&amp;quot;,
                             br(),
                             &amp;quot;Double click on a&amp;quot;, icon(&amp;quot;circle&amp;quot;), &amp;quot;in the legend to focus on a specific level of education.&amp;quot; 
                           )),
                    column(1)),
           # plot object for intro
           plotlyOutput(&amp;quot;introPlot&amp;quot;, height = &amp;#39;400px&amp;#39;)
           ),
    
    column(1),
    
           ),
  
  # scrollytelling plot
  scrolly_container(&amp;quot;scr&amp;quot;
                    , scrolly_graph( br(), 
                                     br(),
                                     textOutput(&amp;quot;section&amp;quot;),
                                     br(),
                                     HTML(&amp;#39;&amp;lt;center&amp;gt;&amp;#39;),
                                     plotlyOutput(&amp;quot;plot&amp;quot;, height = &amp;#39;600px&amp;#39;),
                                     HTML(&amp;#39;&amp;lt;/center&amp;gt;&amp;#39;)
                                     
                    )
                    , scrolly_sections(
                      HTML(&amp;#39;&amp;lt;center&amp;gt;&amp;#39;),
                      scrolly_section(id = 0, render_text(0)),
                      scrolly_section(id = 1, render_text(1)),
                      scrolly_section(id = 2, render_text(2)),
                      scrolly_section(id = 3, render_text(3)),
                      scrolly_section(id = 4, render_text(4)),
                      scrolly_section(id = 5, render_text(5)),
                      scrolly_section(id = 6, render_text(6)),
                      scrolly_section(id = 7, render_text(7)),
                      scrolly_section(id = 8, render_text(8)),
                      # add a scrolly_section with nothing in it; 
                      # this buffer prevents the plot from disappearing while reading last section
                      scrolly_section(id = &amp;quot;buffer&amp;quot;, br()),
                      HTML(&amp;#39;&amp;lt;/center&amp;gt;&amp;#39;)
                    )
                    
  ),
  
  # concluding text
  div(fluidRow(id = &amp;#39;text&amp;#39;,
               column(2),
               column(8, 
                      concludingtext,
                      br()
               ),
               column(2)
  ), style = &amp;#39;margin-top: -300px;&amp;#39;),
  
  br(),
  br(),
  br(),
  hr(),
  
  fluidRow(
    column(1),
    column(10,
           technicalnotes
    ),
    column(1)
  ),
  br(),
  br(),
column(1)

)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the server looks like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;server &amp;lt;- function(input, output, session) {
  
  output$plot &amp;lt;- renderPlotly({
    
    add &amp;lt;- input$scr
    
    plot &amp;lt;- data %&amp;gt;% 
      filter(typicaled != &amp;quot;Some college, no degree&amp;quot;) %&amp;gt;%
      filter(if (add != 8) add &amp;gt;= reveal else reveal %in% c(1:8)) %&amp;gt;%
      ggplot() +
      geom_point(mapping=aes(x=A_MEDIAN, y=probability, size=TOT_EMP,
                             alpha=ifelse(add == reveal, 1/5, 1/10), col=typicaled,
                             text = glue::glue(&amp;#39;&amp;lt;b&amp;gt;Occupation&amp;lt;/b&amp;gt;: {occupation}
                                                &amp;lt;b&amp;gt;Probability of Automation&amp;lt;/b&amp;gt;: {probability}%
                                                &amp;lt;b&amp;gt;Median Income&amp;lt;/b&amp;gt;: ${A_MEDIAN}
                                                &amp;lt;b&amp;gt;Number of Workers&amp;lt;/b&amp;gt;: {TOT_EMP}&amp;#39;))) +
      scale_size(range = c(1, 20)) +
      xlab(&amp;quot;\nMedian Income&amp;quot;) +
      ylab(&amp;quot;Probability of Automation&amp;quot;) +
      labs(size= &amp;quot;&amp;quot;, col= &amp;quot;&amp;quot;, alpha = &amp;quot;&amp;quot;) +
      scale_color_manual(values = cols, breaks = legend_ord) +
      scale_x_continuous(labels=scales::dollar_format(prefix=&amp;quot;$&amp;quot;), limits = c(25000,200000)) +
      scale_y_continuous(labels=scales::number_format(suffix=&amp;quot;%&amp;quot;), limits = c(0,100)) +
      # cr::drop_axis(axis = &amp;quot;y&amp;quot;) +
      theme(axis.line.x = ggplot2::element_line(colour = NULL, 
                                                size = NULL, linetype = NULL, lineend = NULL), 
            axis.line.y = ggplot2::element_blank(),
            panel.grid.major.x = element_blank())
    
    ggplotly(plot, tooltip = &amp;#39;text&amp;#39;) %&amp;gt;%
    layout(
      title = list(element_blank()),
      legend = list(x = 0.65, y = 0.925),
      font = list(family = &amp;#39;Lato&amp;#39;),
      margin=list(t=50),
      hoverlabel = list(bgcolor = &amp;#39;whitesmoke&amp;#39;, color = &amp;#39;DarkGray&amp;#39;)) %&amp;gt;%
    config(displaylogo = F, showSendToCloud = F, displayModeBar = F)
    
  })
    
  output$introPlot &amp;lt;- renderPlotly({introPlot})
  output$scr &amp;lt;- renderScrollytell({scrollytell()})
  renderText(paste0(&amp;quot;Section: &amp;quot;, input$scr))
  observe({cat(&amp;quot;section:&amp;quot;, input$scr, &amp;quot;\n&amp;quot;)})
  
}

# Run the application
shinyApp(ui = ui, server = server)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;the-output&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Output&lt;/h2&gt;
&lt;p&gt;You can see the final output of my post &lt;a href=&#34;https://connorrothschild.shinyapps.io/automation/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can look at the code and all of its context on GitHub &lt;a href=&#34;https://github.com/connorrothschild/shiny-scrollytell&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
