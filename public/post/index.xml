<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog Posts | Connor Rothschild</title>
    <link>/post/</link>
      <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Blog Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Connor Rothschild, 2020</copyright>
    <image>
      <url>/img/social.png</url>
      <title>Blog Posts</title>
      <link>/post/</link>
    </image>
    
    <item>
      <title>Three Simple Steps to Bring Impressive Animations to your Hugo Academic Site Using Blogdown</title>
      <link>/post/animate-hugo-academic/</link>
      <pubDate>Sat, 25 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/post/animate-hugo-academic/</guid>
      <description>














&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./figures/final.gif&#34; &gt;


  &lt;img src=&#34;./figures/final.gif&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;The R package &lt;code&gt;blogdown&lt;/code&gt; is an incredibly powerful tool—it allows R users with little to no familiarity in web development to build a fully functional, content-oriented, beautiful website using a language they’re already familiar with. It&amp;rsquo;s built on top of 
&lt;a href=&#34;https://gohugo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo&lt;/a&gt;, the world’s (self-proclaimed) ‘fastest framework for building websites,’ which comes with a 
&lt;a href=&#34;https://themes.gohugo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;variety of themes&lt;/a&gt; suitable for a variety of different uses.&lt;/p&gt;
&lt;p&gt;Within the R community, perhaps one of the most popular themes is 
&lt;a href=&#34;https://themes.gohugo.io/academic/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo Academic&lt;/a&gt;. As the name implies, the theme is geared toward those working academia—more generally, it provides a great starter kit for those interested in showcasing blog posts, projects, and other media on a minimalist site.&lt;/p&gt;
&lt;p&gt;Given its popularity, the Hugo Academic landing page is far-too-familiar. Although not unattractive, no one is particularly surprised or engaged by the standard Academic homepage.&lt;/p&gt;
&lt;p&gt;One way to spice up Hugo Academic is to use animations on our home pages. In this post, I outline three simple steps and a few lines of code to create a fully functional, beautifully-animated landing page. By leveraging the flexibility of Hugo&amp;rsquo;s framework, and introducing a little bit of HTML and CSS, we can take our Hugo Academic home pages from zero to hero (at least, in terms of animation!).&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;This tutorial assumes you are starting a Hugo Academic site from scratch. If you already have a Hugo Academic website up and running, you should be able to &lt;a href=&#34;#step-1-create-abouthtml&#34;&gt;skip step 0&lt;/a&gt; and modify the remaining steps slightly.&lt;/p&gt;
&lt;p&gt;It also assumes that you have little to no knowledge about HTML and CSS (which is fine!). If that’s &lt;em&gt;not&lt;/em&gt; the case, you can likely go ahead and skip to &lt;a href=&#34;#step-3-add-css&#34;&gt;step 3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you’d like to skip this tutorial and just start a Hugo Academic site that’s animated, feel free to &lt;a href=&#34;https://github.com/connorrothschild/animate-hugo-academic&#34;&gt;fork my repository&lt;/a&gt; which includes all the code you need for an animated homepage. The repo includes my &lt;a href=&#34;https://github.com/connorrothschild/animate-hugo-academic/blob/master/layouts/partials/widgets/about.html&#34;&gt;&lt;code&gt;about.html&lt;/code&gt; page&lt;/a&gt; and a &lt;a href=&#34;https://github.com/connorrothschild/animate-hugo-academic/blob/master/assets/scss/custom.scss&#34;&gt;custom SCSS file&lt;/a&gt;!&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;step-0-make-your-about-page-your-actual-homepage&#34;&gt;Step 0) Make your ‘about’ page your actual homepage&lt;/h2&gt;
&lt;p&gt;By default, the Hugo Academic theme’s first section is a grandiose self-introduction (I guess the creators of the theme do deserve such credit). Before we incorporate any of our animations, lets go ahead and make our ‘about’ page the landing page users first see when they visit our site. This requires us to find the files &lt;code&gt;hero.md&lt;/code&gt; and &lt;code&gt;demo.md&lt;/code&gt;, and in each of those files, set &lt;code&gt;active&lt;/code&gt; equal to &lt;code&gt;false&lt;/code&gt;. That takes our home page from this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./figures/before-demo-hero-remove.png&#34; alt=&#34;before-demo-hero-remove&#34;&gt;&lt;/p&gt;
&lt;p&gt;to this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./figures/after-demo-hero-remove.png&#34; alt=&#34;after-demo-hero-remove&#34;&gt;&lt;/p&gt;
&lt;p&gt;(As you progress, you might have to make additional small changes, such as removing ‘Demo’ from the navbar menu.)&lt;/p&gt;
&lt;h2 id=&#34;step-1-create-abouthtml&#34;&gt;Step 1) Create about.html&lt;/h2&gt;
&lt;p&gt;The first &lt;em&gt;real&lt;/em&gt; step in our process is modifying the default layout of our about page. More specifically, our animations will rely on CSS selectors which our about page currently doesn’t have. In order to animate certain elements, we will need unique identifiers, such as CSS classes and IDs, to target.&lt;/p&gt;
&lt;p&gt;To play around with our about page, we take advantage of Hugo’s flexibility toward structural changes. As they 
&lt;a href=&#34;https://bwaycer.github.io/hugo_tutorial.hugo/themes/customizing/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;say&lt;/a&gt; on their website:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hugo permits you to &lt;strong&gt;supplement or override&lt;/strong&gt; any theme template or static file, with files in your working directory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In order to override Hugo Academic’s about page, we need to copy their existing structure into our own folder and modify it there. To do so, navigate to &lt;code&gt;themes/hugo-academic/layouts/partials/widgets/&lt;/code&gt; and copy the file titled &lt;code&gt;about.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, create &lt;em&gt;a new file path&lt;/em&gt; in your root directory titled &lt;code&gt;layouts/partials/widgets/&lt;/code&gt;. Copy your &lt;code&gt;about.html&lt;/code&gt; file here. (Look familiar? All we’re doing is recreating &lt;code&gt;about.html&lt;/code&gt; in a &lt;em&gt;personal&lt;/em&gt; version of our project, thus overriding the &lt;code&gt;about.html&lt;/code&gt; that Hugo Academic provides.)&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Alternatively, you can copy the about.html file that I used for this project and paste it into &lt;code&gt;layouts/partials/widgets/&lt;/code&gt;. &lt;a href=&#34;https://github.com/connorrothschild/animate-hugo-academic/blob/master/layouts/partials/widgets/about.html&#34;&gt;You can find my file here&lt;/a&gt;. This will also allow you to skip step 2 and move on to &lt;a href=&#34;#step-3-add-css&#34;&gt;step 3&lt;/a&gt;!
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;step-2-customize-your-file&#34;&gt;Step 2) Customize your file&lt;/h2&gt;
&lt;p&gt;With that newly created &lt;code&gt;about.html&lt;/code&gt; living in &lt;code&gt;layouts/partials/widgets/&lt;/code&gt;, you may notice that your homepage looks the exact same. This is correct! In this step, we’ll customize that html file so that it can be animated.&lt;/p&gt;
&lt;p&gt;Within &lt;code&gt;about.html&lt;/code&gt;, you’ll notice all of your page’s elements in order of appearance, despite a lot of extra characters that don’t make much sense. It should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./figures/about.png&#34; alt=&#34;about&#34;&gt;&lt;/p&gt;
&lt;p&gt;Throughout step 3, we’ll use each element’s ‘class’ to target it for animations. In the above screenshot (and in your &lt;code&gt;about.html&lt;/code&gt; page!), you’ll see classes scattered throughout. Although learning everything about CSS and CSS selectors is beyond the scope of this tutorial, I would recommend reading a brief primer on classes and selectors in CSS, which can be found 
&lt;a href=&#34;https://www.w3schools.com/cssref/sel_class.asp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this step, we’ll add classes to the elements we want to animate. (Again, if this seems to be overwhelming, feel free to copy 
&lt;a href=&#34;https://github.com/connorrothschild/animate-hugo-academic/blob/master/layouts/partials/widgets/about.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;my HTML file.&lt;/a&gt;) Specifically, we’ll make three changes.&lt;/p&gt;
&lt;p&gt;First, we’ll add a class of &lt;code&gt;biography-title&lt;/code&gt; to our h1 (header 1) element. Here, we will change&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;h1&amp;gt;{{ $page.Title | markdownify | emojify }}&amp;lt;/h1&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;h1 class=&#39;biography-title&#39;&amp;gt;{{ $page.Title | markdownify | emojify }}&amp;lt;/h1&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we need to wrap the main content, aka the big text blocks in the middle of the page, in their own class too. Here, we take&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ $person_page.Content }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and wrap it in a &lt;code&gt;div&lt;/code&gt;, so it looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&#39;main-content&#39;&amp;gt;
  {{ $person_page.Content }}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we’ll add a class to our interests and and education blocks. We can take this row:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;

  {{ with $person.interests }}
  &amp;lt;div class=&amp;quot;col-md-5&amp;quot;&amp;gt;
    &amp;lt;h3&amp;gt;{{ i18n &amp;quot;interests&amp;quot; | markdownify }}&amp;lt;/h3&amp;gt;
    &amp;lt;ul class=&amp;quot;ul-interests&amp;quot;&amp;gt;
      {{ range . }}
      &amp;lt;li&amp;gt;{{ . | markdownify | emojify }}&amp;lt;/li&amp;gt;
      {{ end }}
    &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
  {{ end }}

  {{ with $person.education }}
  &amp;lt;div class=&amp;quot;col-md-7&amp;quot;&amp;gt;
    &amp;lt;h3&amp;gt;{{ i18n &amp;quot;education&amp;quot; | markdownify }}&amp;lt;/h3&amp;gt;
    &amp;lt;ul class=&amp;quot;ul-edu fa-ul&amp;quot;&amp;gt;
      {{ range .courses }}
      &amp;lt;li&amp;gt;
        &amp;lt;i class=&amp;quot;fa-li fas fa-graduation-cap&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
        &amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;
          &amp;lt;p class=&amp;quot;course&amp;quot;&amp;gt;{{ .course }}{{ with .year }}, {{ . }}{{ end }}&amp;lt;/p&amp;gt;
          &amp;lt;p class=&amp;quot;institution&amp;quot;&amp;gt;{{ .institution }}&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/li&amp;gt;
      {{ end }}
    &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
  {{ end }}

&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and replace it with this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;

  {{ with $person.interests }}
  &amp;lt;div class=&amp;quot;interests-div col-md-5&amp;quot;&amp;gt;
    &amp;lt;h3&amp;gt;{{ i18n &amp;quot;interests&amp;quot; | markdownify }}&amp;lt;/h3&amp;gt;
    &amp;lt;ul class=&amp;quot;ul-interests&amp;quot;&amp;gt;
      {{ range . }}
      &amp;lt;li&amp;gt;{{ . | markdownify | emojify }}&amp;lt;/li&amp;gt;
      {{ end }}
    &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
  {{ end }}

  {{ with $person.education }}
  &amp;lt;div class=&amp;quot;education-div col-md-7&amp;quot;&amp;gt;
    &amp;lt;h3&amp;gt;{{ i18n &amp;quot;education&amp;quot; | markdownify }}&amp;lt;/h3&amp;gt;
    &amp;lt;ul class=&amp;quot;ul-edu fa-ul&amp;quot;&amp;gt;
      {{ range .courses }}
      &amp;lt;li&amp;gt;
        &amp;lt;i class=&amp;quot;fa-li fas fa-graduation-cap&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
        &amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;
          &amp;lt;p class=&amp;quot;course&amp;quot;&amp;gt;{{ .course }}{{ with .year }}, {{ . }}{{ end }}&amp;lt;/p&amp;gt;
          &amp;lt;p class=&amp;quot;institution&amp;quot;&amp;gt;{{ .institution }}&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/li&amp;gt;
      {{ end }}
    &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
  {{ end }}

&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    A quick tip to identify the classes and IDs of individual elements is to use the browser’s &lt;strong&gt;inspect element&lt;/strong&gt; tool. To do so, right click on the element you’re interested in and click inspect element; what you’ll see is a highlighted box that tells you that object’s class and/or ID. For more on inspect element and your browser, &lt;a href=&#34;https://blog.devmountain.com/how-to-use-inspect-element-jump-into-what-makes-a-web-page-tick/&#34;&gt;see this page&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now, we can reference the existing CSS classes, and our new ones, in our pretty animation in Step 3!&lt;/p&gt;
&lt;h2 id=&#34;step-3-add-css&#34;&gt;Step 3) Add CSS&lt;/h2&gt;
&lt;p&gt;Now that we’ve created our classes, we can target them in a CSS file and tell them exactly &lt;em&gt;how&lt;/em&gt; to animate.&lt;/p&gt;
&lt;p&gt;But first, you’ll need to create a custom CSS file in your root directly. In your &lt;code&gt;assets/&lt;/code&gt; folder, create a &lt;em&gt;new&lt;/em&gt; folder called &lt;code&gt;scss/&lt;/code&gt; and within this folder, create a &lt;em&gt;new&lt;/em&gt; file called &lt;code&gt;custom.scss&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    An SCSS file is essentially a CSS file but extended with Sass, which describes &lt;a href=&#34;https://sass-lang.com/&#34;&gt;itself&lt;/a&gt; as ‘CSS with superpowers.’ For an overview of the intricacies of Sass, like nesting selectors, visit &lt;a href=&#34;https://sass-lang.com/guide&#34;&gt;their guide&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Within &lt;code&gt;custom.scss&lt;/code&gt;, we’re going to target everything &lt;em&gt;within our about section&lt;/em&gt;. In order to do so, we create a selector that targets everything within the ID of &lt;code&gt;about&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-scss&#34;&gt;#about {
  /* Some CSS will go here soon! :) */
  /* This is a comment, by the way. */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To ensure that we’ve targeted the right section, we can go ahead and add the property &lt;code&gt;background-color: red&lt;/code&gt; to that element. As the name implies, this will make the section ✨ red. ✨&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-scss&#34;&gt;#about {
  background-color: red
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we expected, our section background is now an (unbelievably ugly shade of) red.&lt;img src=&#34;./figures/bg-red.png&#34; alt=&#34;bg-red&#34;&gt;&lt;/p&gt;
&lt;p&gt;(Now remove that property immediately! This is not quite the welcome we want for our visitors.) We can also target elements &lt;em&gt;within&lt;/em&gt; the section by nesting new selectors inside of &lt;code&gt;#about&lt;/code&gt;. For example, if we wanted to change the color of our ‘biography’ title text, we could do so with the following code. (This is because we created a class named &lt;code&gt;biography-title&lt;/code&gt; in step 1):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-scss&#34;&gt;#about {
  
  .biography-title {
    color: red;
  }
  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./figures/font-red.png&#34; alt=&#34;font-red&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    You may notice that &lt;code&gt;about&lt;/code&gt; is targeted with a pound (#) and &lt;code&gt;biography-title&lt;/code&gt; is targeted with a period (.). This is the difference between CSS &lt;em&gt;IDs&lt;/em&gt; and &lt;em&gt;classes&lt;/em&gt;. If you’re curious about the distinction, here’s a &lt;a href=&#34;https://www.htmldog.com/guides/css/intermediate/classid/&#34;&gt;helpful guide&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now that we know how to target specific objects within our &lt;code&gt;about&lt;/code&gt; section, we can animate our first element!&lt;/p&gt;
&lt;h3 id=&#34;step-3a-your-first-animation&#34;&gt;Step 3A) Your first animation!&lt;/h3&gt;
&lt;p&gt;Creating your first animation is as simple as a few lines of code. To illustrate, we’ll test out an animation which changes our text from red and invisible to black and visible. In the code, we&amp;rsquo;ll have to do two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create an animation with &lt;code&gt;@keyframes&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-scss&#34;&gt;@keyframes yourfirstanimation {
  from {opacity: 0; color: red;}
  to {opacity: 1; color: black;}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Bind the animation to an element&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-scss&#34;&gt;.biography-title {
  animation: yourfirstanimation 5s forwards;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To break down the above code, we create an animation that has a &lt;em&gt;start point&lt;/em&gt; (&lt;code&gt;0%&lt;/code&gt;) and an &lt;em&gt;end point&lt;/em&gt; (&lt;code&gt;100%&lt;/code&gt;). At both of these points, we define CSS properties, such as color and opacity, seen above. When we bind the animation to an element, which is as simple as &lt;code&gt;animation: &amp;lt;animation_name&amp;gt; &amp;lt;duration&amp;gt; &amp;lt;fill_mode&amp;gt;&lt;/code&gt;, CSS deals with all the inbetween and automatically creates a smooth transition! (Fill mode is the most complicated of these three properties, but for our purposes we will always be using &lt;code&gt;forwards&lt;/code&gt;. For more information, visit 
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/animation-fill-mode&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this page&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Altogether, this code creates this output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-scss&#34;&gt;#about {
  
  @keyframes yourfirstanimation {
    0% {opacity: 0; color: red;}
    100% {opacity: 1; color: black;}
  }

  .biography-title {
    animation: yourfirstanimation 5s forwards;
  }
  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./figures/red.gif&#34; alt=&#34;red&#34;&gt;&lt;/p&gt;
&lt;p&gt;Of course, we don’t want a 5 second animation, nor do we want our text to start off as red. A cleaner animation might leverage the power of CSS to modify an element’s &lt;em&gt;position&lt;/em&gt;. In our case, we want an element to &lt;strong&gt;slide in from the right side of the screen&lt;/strong&gt;, and so we make a few tweaks to the code above. Let’s make a new animation called &lt;code&gt;slide-from-right&lt;/code&gt; which starts (at keyframe 0%) with our element 150% to the right of its original position (therefore off the screen) and ends (at keyframe 100%) with it at its original position. This involves the use of &lt;code&gt;translateX&lt;/code&gt;, which you can read about 
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translateX&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-scss&#34;&gt;@keyframes slide-from-right {
  0% {transform: translateX(150%)}
  100% { transform: translateX(0%); }
}

.biography-title {
  animation: slide-from-right 1s forwards;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./figures/slide-from-right.gif&#34; alt=&#34;slide-from-right&#34;&gt;&lt;/p&gt;
&lt;p&gt;There is one slight improvement we can make on the above transition. Specifically, we can call an &lt;em&gt;easing function&lt;/em&gt; on our animation. 
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Easing functions&lt;/a&gt; give a more natural feel to a transition’s flow—rather than our object flying in at a perfectly linear rate, we can add some personality by specifying its speed at different points in the transition. To find an easing function, visit 
&lt;a href=&#34;https://easings.net/en#&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;easings.net&lt;/a&gt;, which allows you to visualize all of the different ways to modify your transition’s ease. (For this tutorial, I chose a clean-looking “&lt;em&gt;easeInOutQuint&lt;/em&gt;“ function, which looks like this: &lt;code&gt;cubic-bezier(0.83, 0, 0.17, 1)&lt;/code&gt;.)&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-3b-dont-wait-to-delay&#34;&gt;Step 3B) Don’t Wait to Delay&lt;/h3&gt;
&lt;p&gt;We want our homepage to have more than just one title animation. We might also want to &lt;strong&gt;animate the paragraphs below it&lt;/strong&gt;, with the same ’slide from right’ transition we defined earlier. While doing this, we can add one property to our element to make the overall transition seem more fluid: &lt;code&gt;animation-delay&lt;/code&gt;. As the name suggests, this property defines how long the browser should wait before it &lt;em&gt;begins&lt;/em&gt; the transition you’ve specified. Animating our &lt;code&gt;main-content&lt;/code&gt; div is as simple as copying the above code and adding a 100 millisecond animation delay.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-scss&#34;&gt;.main-content {
  animation: slide-from-right 1s cubic-bezier(0.87, 0, 0.13, 1) forwards;
  animation-delay: 100ms;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In combination with above, this creates a transition that looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./figures/double-slide.gif&#34; alt=&#34;double-slide&#34;&gt;&lt;/p&gt;
&lt;p&gt;Nice! That looks clean. It looks like those two text blocks are racing to greet your new site visitor :)&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-3c-to-the-left&#34;&gt;Step 3C) To the Left!&lt;/h3&gt;
&lt;p&gt;Let’s go ahead and replicate that ’slide in’ transition for our profile on the left side of our webpage. As you could probably gather, this is as simple as copying the above code and changing the value in &lt;code&gt;translateX&lt;/code&gt; from 150% to -150% (from just outside the right side of our webpage 
&lt;a href=&#34;https://www.youtube.com/watch?v=2EwViQxSJJQ&amp;amp;feature=youtu.be&amp;amp;t=25&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;to the left!&lt;/a&gt;). As above, we’ll define this transition in a &lt;code&gt;@keyframes&lt;/code&gt; rule and apply it to our CSS transition afterward.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-scss&#34;&gt;@keyframes slide-from-left {
  0% {transform: translateX(-150%)}
  100% { transform: translateX(0%); }
}

#profile {
  animation: slide-from-left 1s cubic-bezier(0.87, 0, 0.13, 1) forwards;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./figures/left-and-right.gif&#34; alt=&#34;left-and-right&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;step-3d-finally-the-fade&#34;&gt;Step 3D) Finally, the Fade&lt;/h3&gt;
&lt;p&gt;The only thing not yet animated on our page are the ‘interests’ and ‘education’ content blocks. Of course, you might not want these on your homepage (my educational journey isn’t yet formidable enough to warrant its own section on my homepage!). But for the sake of animating the homepage &lt;em&gt;as its configured by default&lt;/em&gt;, let’s go ahead and have those content blocks fade in &lt;em&gt;once the sliding transitions complete&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you’ve been paying attention to the prior &lt;code&gt;@keyframes&lt;/code&gt; rules, you might have guessed that the code would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-scss&#34;&gt;@keyframes fade-in {
  0% {opacity: 0}
  100% {opacity: 1}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;hellip; and you would be correct!&lt;/p&gt;
&lt;p&gt;Now, we apply this &lt;code&gt;fade-in&lt;/code&gt; rule to both our &lt;code&gt;interests-div&lt;/code&gt; and our &lt;code&gt;education-div&lt;/code&gt;, which we created in step 1. But notably, we want to wait to fade in each of these divs until &lt;em&gt;after our content has slid in from either side of the webpage.&lt;/em&gt; And so, we’ll once again use the &lt;code&gt;animation-delay&lt;/code&gt; property. Because our slide-in animations take one second to complete, we can begin our fade-in animations after a one-second delay. To make the transition a little more visually appealling, we can also stagger them, so the &lt;code&gt;education-div&lt;/code&gt; fades in half a second &lt;em&gt;after&lt;/em&gt; &lt;code&gt;interests-div&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-scss&#34;&gt;.interests-div {
  opacity: 0;
  animation: fade-in 1s forwards;
  animation-delay: 1s;
}

.education-div {
  opacity: 0;
  animation: fade-in 1s forwards;
  animation-delay: 1.5s;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we have a final homepage that looks like this:&lt;/p&gt;















&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./figures/final.gif&#34; &gt;


  &lt;img src=&#34;./figures/final.gif&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;To make our SCSS file more robust across different browsers, we can take our completed file and put it into the 
&lt;a href=&#34;https://autoprefixer.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CSS Autoprefixer&lt;/a&gt;. This adds additional lines of code to our CSS file so that all browsers render the same animations upon page load. Your completed SCSS file should look like 
&lt;a href=&#34;https://github.com/connorrothschild/animate-hugo-academic/blob/master/assets/scss/custom.scss&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;extending-animations&#34;&gt;Extending Animations&lt;/h2&gt;
&lt;p&gt;This tutorial is meant to teach you the essentials of &lt;em&gt;how&lt;/em&gt; to animate your homepage (for any Hugo site, not just Academic). Specifically, you should be able to 1) create and identify CSS elements via their classes and IDs, 2) target them using CSS, and 3) animate them using &lt;code&gt;@keyframes&lt;/code&gt; rules. Although easier said then done, applying these three rules will go a long way in making your homepage much more appealling to new visitors.&lt;/p&gt;
&lt;p&gt;The complete power of CSS animations is not covered in this tutorial. Further applications of animations could do &lt;strong&gt;much&lt;/strong&gt; more than just animate an object’s position. I leave that to you!&lt;/p&gt;
&lt;p&gt;For those that are interested, 
&lt;a href=&#34;https://www.connorrothschild.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;my homepage&lt;/a&gt; is chock-full of CSS properties which make it unique from most; some visitors are surprised to hear that my site is Hugo Academic at all!&lt;/p&gt;















&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./figures/mine.gif&#34; &gt;


  &lt;img src=&#34;./figures/mine.gif&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;For those interested, the code for my personal site (which, like this one, has an &lt;code&gt;about.html&lt;/code&gt; and a &lt;code&gt;custom.scss&lt;/code&gt; file that are carrying the load) can be found 
&lt;a href=&#34;https://github.com/connorrothschild/connorrothschild.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. I look forward to seeing your animated homepages!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spikes in Firearm Background Checks During COVID-19</title>
      <link>/post/covid-gun-spikes/</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/post/covid-gun-spikes/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/core-js/shim.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/react/react.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/react/react-dom.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/reactwidget/react-tools.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/reactable-binding/reactable.js&#34;&gt;&lt;/script&gt;







  
  











&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/post/covid-gun-spikes/featured_hu5c0e9a0959b7c46cfeefb3cca4b2252e_960654_2000x2000_fit_lanczos_2.png&#34; &gt;


  &lt;img data-src=&#34;/post/covid-gun-spikes/featured_hu5c0e9a0959b7c46cfeefb3cca4b2252e_960654_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;A small multiples map showing spikes in firearm background checks in 2020, compared to 1999-2019&#34; width=&#34;4173&#34; height=&#34;2917&#34;&gt;
&lt;/a&gt;



&lt;/figure&gt;

&lt;style type=&#34;text/css&#34;&gt;
.header {
  border-bottom: 2px solid #555;
  font-size: 13px;
  font-weight: 400;
  text-transform: uppercase;
}

.header:hover {
  background-color: #eee;
}
&lt;/style&gt;
&lt;p&gt;So far in 2020, firearm background checks are happening &lt;strong&gt;significantly&lt;/strong&gt; more frequently than they did during the first six months of the last 20 years. Some &lt;a href=&#34;https://www.nytimes.com/interactive/2020/04/01/business/coronavirus-gun-sales.html&#34;&gt;media reports&lt;/a&gt; captured the gun-buying frenzy during its apparent peak in March, but according to data from the &lt;a href=&#34;https://www.fbi.gov/file-repository/nics_firearm_checks_-_month_year_by_state_type.pdf/view&#34;&gt;FBI NICS&lt;/a&gt;, &lt;em&gt;the month of June saw the largest single month count of firearm background checks in the last 20 years.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The data, &lt;a href=&#34;https://github.com/BuzzFeedNews/nics-firearm-background-checks&#34;&gt;which is scraped and cleaned by BuzzFeed News&lt;/a&gt;, shows a massive spike in firearm background checks in the last 5 months:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(reactable)
library(tidyverse)
library(geofacet)
library(scales)
library(cr)

set_cr_theme(font = &amp;quot;IBM Plex Sans&amp;quot;)

data &amp;lt;- readr::read_csv(&amp;#39;data/data.csv&amp;#39;)

data &amp;lt;- data %&amp;gt;%
  mutate(month = as.Date(paste(month, &amp;quot;-01&amp;quot;, sep = &amp;quot;&amp;quot;)),
         year = lubridate::year(month)) %&amp;gt;%
  filter(year != 1998)

data %&amp;gt;%
  mutate(month = lubridate::month(month),
         month = month.abb[month]) %&amp;gt;%
  group_by(year, month) %&amp;gt;%
  summarise(sum = sum(totals)) %&amp;gt;%
  reactable(
    defaultSorted = &amp;#39;sum&amp;#39;,
    defaultSortOrder = &amp;#39;desc&amp;#39;,
    defaultColDef = colDef(headerClass = &amp;quot;header&amp;quot;),
    compact = TRUE,
    fullWidth = FALSE,
    columns = list(
      month = colDef(name = &amp;quot;Month&amp;quot;),
      year = colDef(name = &amp;quot;Year&amp;quot;),
      sum = colDef(name = &amp;quot;# of Firearm Background Checks&amp;quot;,
                   format = colFormat(separators = TRUE))
    ),
    rowStyle = function(index) {
      if (.[index, &amp;quot;year&amp;quot;] == 2020)
        list(fontWeight = &amp;quot;bold&amp;quot;,
             background = &amp;quot;rgba(0, 0, 0, 0.05)&amp;quot;)
    }
  )&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;year&#34;:[1999,1999,1999,1999,1999,1999,1999,1999,1999,1999,1999,1999,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2001,2001,2001,2001,2001,2001,2001,2001,2001,2001,2001,2001,2002,2002,2002,2002,2002,2002,2002,2002,2002,2002,2002,2002,2003,2003,2003,2003,2003,2003,2003,2003,2003,2003,2003,2003,2004,2004,2004,2004,2004,2004,2004,2004,2004,2004,2004,2004,2005,2005,2005,2005,2005,2005,2005,2005,2005,2005,2005,2005,2006,2006,2006,2006,2006,2006,2006,2006,2006,2006,2006,2006,2007,2007,2007,2007,2007,2007,2007,2007,2007,2007,2007,2007,2008,2008,2008,2008,2008,2008,2008,2008,2008,2008,2008,2008,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2009,2010,2010,2010,2010,2010,2010,2010,2010,2010,2010,2010,2010,2011,2011,2011,2011,2011,2011,2011,2011,2011,2011,2011,2011,2012,2012,2012,2012,2012,2012,2012,2012,2012,2012,2012,2012,2013,2013,2013,2013,2013,2013,2013,2013,2013,2013,2013,2013,2014,2014,2014,2014,2014,2014,2014,2014,2014,2014,2014,2014,2015,2015,2015,2015,2015,2015,2015,2015,2015,2015,2015,2015,2016,2016,2016,2016,2016,2016,2016,2016,2016,2016,2016,2016,2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2018,2018,2018,2018,2018,2018,2018,2018,2018,2018,2018,2018,2019,2019,2019,2019,2019,2019,2019,2019,2019,2019,2019,2019,2020,2020,2020,2020,2020,2020],&#34;month&#34;:[&#34;Apr&#34;,&#34;Aug&#34;,&#34;Dec&#34;,&#34;Feb&#34;,&#34;Jan&#34;,&#34;Jul&#34;,&#34;Jun&#34;,&#34;Mar&#34;,&#34;May&#34;,&#34;Nov&#34;,&#34;Oct&#34;,&#34;Sep&#34;,&#34;Apr&#34;,&#34;Aug&#34;,&#34;Dec&#34;,&#34;Feb&#34;,&#34;Jan&#34;,&#34;Jul&#34;,&#34;Jun&#34;,&#34;Mar&#34;,&#34;May&#34;,&#34;Nov&#34;,&#34;Oct&#34;,&#34;Sep&#34;,&#34;Apr&#34;,&#34;Aug&#34;,&#34;Dec&#34;,&#34;Feb&#34;,&#34;Jan&#34;,&#34;Jul&#34;,&#34;Jun&#34;,&#34;Mar&#34;,&#34;May&#34;,&#34;Nov&#34;,&#34;Oct&#34;,&#34;Sep&#34;,&#34;Apr&#34;,&#34;Aug&#34;,&#34;Dec&#34;,&#34;Feb&#34;,&#34;Jan&#34;,&#34;Jul&#34;,&#34;Jun&#34;,&#34;Mar&#34;,&#34;May&#34;,&#34;Nov&#34;,&#34;Oct&#34;,&#34;Sep&#34;,&#34;Apr&#34;,&#34;Aug&#34;,&#34;Dec&#34;,&#34;Feb&#34;,&#34;Jan&#34;,&#34;Jul&#34;,&#34;Jun&#34;,&#34;Mar&#34;,&#34;May&#34;,&#34;Nov&#34;,&#34;Oct&#34;,&#34;Sep&#34;,&#34;Apr&#34;,&#34;Aug&#34;,&#34;Dec&#34;,&#34;Feb&#34;,&#34;Jan&#34;,&#34;Jul&#34;,&#34;Jun&#34;,&#34;Mar&#34;,&#34;May&#34;,&#34;Nov&#34;,&#34;Oct&#34;,&#34;Sep&#34;,&#34;Apr&#34;,&#34;Aug&#34;,&#34;Dec&#34;,&#34;Feb&#34;,&#34;Jan&#34;,&#34;Jul&#34;,&#34;Jun&#34;,&#34;Mar&#34;,&#34;May&#34;,&#34;Nov&#34;,&#34;Oct&#34;,&#34;Sep&#34;,&#34;Apr&#34;,&#34;Aug&#34;,&#34;Dec&#34;,&#34;Feb&#34;,&#34;Jan&#34;,&#34;Jul&#34;,&#34;Jun&#34;,&#34;Mar&#34;,&#34;May&#34;,&#34;Nov&#34;,&#34;Oct&#34;,&#34;Sep&#34;,&#34;Apr&#34;,&#34;Aug&#34;,&#34;Dec&#34;,&#34;Feb&#34;,&#34;Jan&#34;,&#34;Jul&#34;,&#34;Jun&#34;,&#34;Mar&#34;,&#34;May&#34;,&#34;Nov&#34;,&#34;Oct&#34;,&#34;Sep&#34;,&#34;Apr&#34;,&#34;Aug&#34;,&#34;Dec&#34;,&#34;Feb&#34;,&#34;Jan&#34;,&#34;Jul&#34;,&#34;Jun&#34;,&#34;Mar&#34;,&#34;May&#34;,&#34;Nov&#34;,&#34;Oct&#34;,&#34;Sep&#34;,&#34;Apr&#34;,&#34;Aug&#34;,&#34;Dec&#34;,&#34;Feb&#34;,&#34;Jan&#34;,&#34;Jul&#34;,&#34;Jun&#34;,&#34;Mar&#34;,&#34;May&#34;,&#34;Nov&#34;,&#34;Oct&#34;,&#34;Sep&#34;,&#34;Apr&#34;,&#34;Aug&#34;,&#34;Dec&#34;,&#34;Feb&#34;,&#34;Jan&#34;,&#34;Jul&#34;,&#34;Jun&#34;,&#34;Mar&#34;,&#34;May&#34;,&#34;Nov&#34;,&#34;Oct&#34;,&#34;Sep&#34;,&#34;Apr&#34;,&#34;Aug&#34;,&#34;Dec&#34;,&#34;Feb&#34;,&#34;Jan&#34;,&#34;Jul&#34;,&#34;Jun&#34;,&#34;Mar&#34;,&#34;May&#34;,&#34;Nov&#34;,&#34;Oct&#34;,&#34;Sep&#34;,&#34;Apr&#34;,&#34;Aug&#34;,&#34;Dec&#34;,&#34;Feb&#34;,&#34;Jan&#34;,&#34;Jul&#34;,&#34;Jun&#34;,&#34;Mar&#34;,&#34;May&#34;,&#34;Nov&#34;,&#34;Oct&#34;,&#34;Sep&#34;,&#34;Apr&#34;,&#34;Aug&#34;,&#34;Dec&#34;,&#34;Feb&#34;,&#34;Jan&#34;,&#34;Jul&#34;,&#34;Jun&#34;,&#34;Mar&#34;,&#34;May&#34;,&#34;Nov&#34;,&#34;Oct&#34;,&#34;Sep&#34;,&#34;Apr&#34;,&#34;Aug&#34;,&#34;Dec&#34;,&#34;Feb&#34;,&#34;Jan&#34;,&#34;Jul&#34;,&#34;Jun&#34;,&#34;Mar&#34;,&#34;May&#34;,&#34;Nov&#34;,&#34;Oct&#34;,&#34;Sep&#34;,&#34;Apr&#34;,&#34;Aug&#34;,&#34;Dec&#34;,&#34;Feb&#34;,&#34;Jan&#34;,&#34;Jul&#34;,&#34;Jun&#34;,&#34;Mar&#34;,&#34;May&#34;,&#34;Nov&#34;,&#34;Oct&#34;,&#34;Sep&#34;,&#34;Apr&#34;,&#34;Aug&#34;,&#34;Dec&#34;,&#34;Feb&#34;,&#34;Jan&#34;,&#34;Jul&#34;,&#34;Jun&#34;,&#34;Mar&#34;,&#34;May&#34;,&#34;Nov&#34;,&#34;Oct&#34;,&#34;Sep&#34;,&#34;Apr&#34;,&#34;Aug&#34;,&#34;Dec&#34;,&#34;Feb&#34;,&#34;Jan&#34;,&#34;Jul&#34;,&#34;Jun&#34;,&#34;Mar&#34;,&#34;May&#34;,&#34;Nov&#34;,&#34;Oct&#34;,&#34;Sep&#34;,&#34;Apr&#34;,&#34;Aug&#34;,&#34;Dec&#34;,&#34;Feb&#34;,&#34;Jan&#34;,&#34;Jul&#34;,&#34;Jun&#34;,&#34;Mar&#34;,&#34;May&#34;,&#34;Nov&#34;,&#34;Oct&#34;,&#34;Sep&#34;,&#34;Apr&#34;,&#34;Aug&#34;,&#34;Dec&#34;,&#34;Feb&#34;,&#34;Jan&#34;,&#34;Jul&#34;,&#34;Jun&#34;,&#34;Mar&#34;,&#34;May&#34;,&#34;Nov&#34;,&#34;Oct&#34;,&#34;Sep&#34;,&#34;Apr&#34;,&#34;Feb&#34;,&#34;Jan&#34;,&#34;Jun&#34;,&#34;Mar&#34;,&#34;May&#34;],&#34;sum&#34;:[638666,694980,1248333,690215,585974,579634,564912,741687,569220,995894,934922,799310,606636,676394,993656,696313,628853,533898,540036,725733,526521,888547,836363,774146,583762,704010,1055298,666352,633916,532306,534369,720477,532437,976210,1023080,857828,619669,688810,969919,687011,655987,530171,507222,707897,557459,881541,843113,718270,615058,677315,1003080,703956,646882,525032,523780,730189,560886,836392,848369,731305,629279,658919,1065185,715879,685638,552985,537942,729554,529776,883939,857807,732988,647423,679473,1161381,735103,678733,555679,548584,757824,546986,921798,847860,786211,693232,830477,1252784,815478,767936,629866,613583,837280,622547,1043598,969092,917184,838642,916097,1229610,913547,893575,756584,791992,974093,801509,1079062,1023899,943662,938745,955685,1522468,1019972,941043,889634,818485,1039597,885246,1528341,1182156,971613,1222022,1070879,1401109,1257324,1212863,963521,964070,1342359,1019331,1217229,1226560,1087686,1226760,1082360,1512265,1237617,1112312,1062886,998262,1291618,1009818,1286817,1359894,1139880,1339673,1300433,1854400,1463138,1312544,1147355,1157714,1437709,1219872,1527454,1331836,1244604,1416074,1514696,2776105,1734646,1368816,1289585,1290210,1715125,1305392,1997703,1604743,1450737,1702455,1408468,2032755,2298561,2483230,1271571,1270817,2197116,1424450,1805759,1679099,1392423,1733651,1538347,2301386,2073978,1650565,1393705,1375135,2476610,1476318,1797163,1595898,1447485,1697737,1735911,3308199,1848308,1763233,1589462,1518852,2001245,1570893,2236457,1969248,1786743,2135909,1836788,2763115,2604667,2540146,2187190,2123334,2509065,1860699,2554486,2326517,1983596,2037180,1896457,2575486,2224394,2032108,1733308,1888266,2422749,1898840,2372888,2017017,1857226,2186119,2026309,2517286,2293373,1996721,1806746,1912838,2753881,1983346,2363705,2033276,1895841,2305136,2341363,2898501,2028667,2150322,2004277,2291066,2604927,2320918,2545863,2327252,2189028,2878176,2776380,2652263,3909502,3709562,3066740]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;year&#34;,&#34;name&#34;:&#34;Year&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;headerClassName&#34;:&#34;header&#34;},{&#34;accessor&#34;:&#34;month&#34;,&#34;name&#34;:&#34;Month&#34;,&#34;type&#34;:&#34;character&#34;,&#34;headerClassName&#34;:&#34;header&#34;},{&#34;accessor&#34;:&#34;sum&#34;,&#34;name&#34;:&#34;# of Firearm Background Checks&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;headerClassName&#34;:&#34;header&#34;,&#34;format&#34;:{&#34;cell&#34;:{&#34;separators&#34;:true},&#34;aggregated&#34;:{&#34;separators&#34;:true}}}],&#34;defaultSortDesc&#34;:true,&#34;defaultSorted&#34;:[{&#34;id&#34;:&#34;sum&#34;,&#34;desc&#34;:true}],&#34;defaultPageSize&#34;:10,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:1,&#34;compact&#34;:true,&#34;rowStyle&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{&#34;fontWeight&#34;:&#34;bold&#34;,&#34;background&#34;:&#34;rgba(0, 0, 0, 0.05)&#34;},{&#34;fontWeight&#34;:&#34;bold&#34;,&#34;background&#34;:&#34;rgba(0, 0, 0, 0.05)&#34;},{&#34;fontWeight&#34;:&#34;bold&#34;,&#34;background&#34;:&#34;rgba(0, 0, 0, 0.05)&#34;},{&#34;fontWeight&#34;:&#34;bold&#34;,&#34;background&#34;:&#34;rgba(0, 0, 0, 0.05)&#34;},{&#34;fontWeight&#34;:&#34;bold&#34;,&#34;background&#34;:&#34;rgba(0, 0, 0, 0.05)&#34;},{&#34;fontWeight&#34;:&#34;bold&#34;,&#34;background&#34;:&#34;rgba(0, 0, 0, 0.05)&#34;}],&#34;inline&#34;:true,&#34;dataKey&#34;:&#34;dfa06ad7180cec336bbb44b162fe770e&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;As the table shows, the last 5 months have seen some of the greatest numbers of firearm background checks since the FBI has collected such data. It seems as if the only non-2020 entrants to the top 7 are from December 2015, and December 2019, which are (perhaps coincidentally) both the final months before new presidents took office.&lt;/p&gt;
&lt;p&gt;Visually, we see that firearm background checks follow some seasonal trends, but by and large, have undergone unprecedented spikes in the last 5 months:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data %&amp;gt;%
  group_by(month) %&amp;gt;%
  summarise(sum = sum(totals)) %&amp;gt;%
  ggplot(aes(x = month, y = sum)) +
  geom_line() +
  geom_area(alpha = .7, fill = &amp;#39;red&amp;#39;) +
  labs(y = element_blank(), x = element_blank(),
       title = &amp;#39;Firearm background checks, over time&amp;#39;) +
  scale_x_date(expand = expansion(c(0, 0.001))) +
  scale_y_continuous(expand = expansion(c(0, 0.001)),
                     labels = unit_format(
                       unit = &amp;quot;M&amp;quot;,
                       scale = 1e-6,
                       sep = &amp;quot;&amp;quot;,
                       accuracy = 1
                     )) +
  drop_axis(&amp;quot;y&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/covid-gun-spikes/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And we can better understand the magnitude of these shifts by visualizing year-to-year changes:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data %&amp;gt;%
  mutate(month = lubridate::month(month)) %&amp;gt;% 
  filter(month &amp;lt; 7) %&amp;gt;% 
  group_by(year) %&amp;gt;%
  summarise(sum = sum(totals)) %&amp;gt;%
  ungroup() %&amp;gt;% 
  mutate(last_year = lag(sum),
         perc_change =  ((sum - last_year) / last_year)) %&amp;gt;%
  ggplot(aes(x = year, y = perc_change)) +
  geom_col(alpha = .7, fill = &amp;#39;red&amp;#39;, color = &amp;#39;black&amp;#39;) +
  geom_hline(yintercept = 0) +
  scale_x_continuous(expand = expansion(c(0, 0.001))) +
  scale_y_continuous(labels = percent_format(accuracy = 1)) +
  drop_axis() +
  labs(x = element_blank(), y = element_blank(),
       title = &amp;quot;Year-on-year changes in firearm background checks, 1999-2020&amp;quot;,
       subtitle = &amp;quot;January through June&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/covid-gun-spikes/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Visualized another way, we can explore the temporal change &lt;strong&gt;within each year&lt;/strong&gt; for every year between 1999 and 2020, with 2020 &lt;span style=&#34;color:red&#34;&gt;highlighted in red.&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data %&amp;gt;% 
  mutate(month = lubridate::month(month)) %&amp;gt;%
  filter(month &amp;lt; 7) %&amp;gt;%
  group_by(month, year) %&amp;gt;%
  summarise(sum = sum(totals)) %&amp;gt;%
  mutate(fill = ifelse(year == 2020, &amp;quot;2020&amp;quot;, &amp;quot;&amp;quot;)) %&amp;gt;%
  ggplot(aes(group = year)) +
  geom_line(aes(x = month, y = sum, color = fill, alpha = fill), show.legend = FALSE) +
  scale_y_continuous(limits = c(0, 4000000), labels = unit_format(unit = &amp;quot;M&amp;quot;, sep = &amp;quot;&amp;quot;, scale = 1e-6, accuracy = 1)) +
  scale_x_continuous(breaks = c(1,2,3,4,5,6), labels = c(&amp;quot;Jan&amp;quot;, &amp;quot;Feb&amp;quot;, &amp;quot;Mar&amp;quot;, &amp;quot;April&amp;quot;, &amp;quot;May&amp;quot;, &amp;quot;June&amp;quot;)) +
  scale_color_manual(values = c(&amp;quot;gray&amp;quot;, &amp;quot;red&amp;quot;)) +
  scale_alpha_manual(values = c(.7, 1)) +
  labs(x = element_blank(), y = element_blank(),
       title = &amp;quot;Firearm background checks in &amp;lt;span style = &amp;#39;color: red;&amp;#39;&amp;gt;2020&amp;lt;/span&amp;gt; 
       compared to &amp;lt;span style = &amp;#39;color: #343434&amp;#39;&amp;gt;1999 - 2019&amp;lt;/span&amp;gt;&amp;quot;,
       subtitle = &amp;quot;January to June&amp;quot;) +
  drop_axis() +
  theme(plot.title = ggtext::element_markdown())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/covid-gun-spikes/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The FBI database also includes background check data for each U.S. state. This data allows us to compare trends &lt;em&gt;across&lt;/em&gt; states and over time (using &lt;code&gt;geofacet&lt;/code&gt;):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data %&amp;gt;%
  mutate(month = lubridate::month(month)) %&amp;gt;%
  filter(month &amp;lt; 7) %&amp;gt;%
  group_by(month, year, state) %&amp;gt;%
  summarise(sum = sum(totals)) %&amp;gt;%
  mutate(fill = ifelse(year == 2020, &amp;quot;2020&amp;quot;, &amp;quot;&amp;quot;)) %&amp;gt;%
  ggplot(aes(group = year)) +
  geom_line(aes(x = month, y = sum, color = fill, alpha = fill), 
            size = .2, show.legend = FALSE) +
  scale_color_manual(values = c(&amp;quot;gray&amp;quot;, &amp;quot;red&amp;quot;)) +
  scale_alpha_manual(values = c(.5, 1)) +
  facet_geo(~ state, scales = &amp;#39;free_y&amp;#39;, grid = &amp;quot;us_state_grid1&amp;quot;) +
  drop_axis() +
  theme(text = element_text(color = &amp;quot;white&amp;quot;,
                            family = &amp;quot;IBM Plex Sans&amp;quot;),
        axis.title=element_blank(),
        axis.text=element_blank(),
        axis.ticks=element_blank(),
        strip.background = element_rect(fill = &amp;#39;black&amp;#39;),
        strip.text = element_text(size = 10, color = &amp;#39;white&amp;#39;),
        panel.background = element_rect(fill = &amp;#39;black&amp;#39;),
        plot.background = element_rect(fill = &amp;#39;black&amp;#39;),
        panel.grid = element_blank()) +
  labs(x = element_blank(),
       y = element_blank(),
       title = &amp;quot;Spikes in gun ownership during COVID-19&amp;quot;,
       subtitle = &amp;quot;How the first six months of 2020 compare to 1999-2019&amp;quot;)

## With additional styling changes made in Illustrator!&lt;/code&gt;&lt;/pre&gt;





  
  











&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/post/covid-gun-spikes/featured_hu5c0e9a0959b7c46cfeefb3cca4b2252e_960654_2000x2000_fit_lanczos_2.png&#34; &gt;


  &lt;img data-src=&#34;/post/covid-gun-spikes/featured_hu5c0e9a0959b7c46cfeefb3cca4b2252e_960654_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;A small multiples map showing spikes in firearm background checks in 2020, compared to 1999-2019&#34; width=&#34;4173&#34; height=&#34;2917&#34;&gt;
&lt;/a&gt;



&lt;/figure&gt;

&lt;div id=&#34;the-impact&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Impact&lt;/h2&gt;
&lt;p&gt;Most obviously, background checks are a proxy for gun purchases and gun ownership; as such, this data informs us that more and more people are grabbing for guns during COVID-19, perhaps in anticipation of some post-COVID apocalypse or perceived government overreach during.&lt;/p&gt;
&lt;p&gt;In addition, one risk is that more guns can lead to greater numbers of firearm suicides. &lt;a href=&#34;https://everytownresearch.org/reports/covid-gun-violence/&#34;&gt;One group of researchers&lt;/a&gt; at the gun safety organization Everytown predicted that COVID-related unemployment would lead to a 20-30% increase in firearm suicides (5000 to 7000 people). As such, a rise in firearm-related background checks may signal an impending surge of gun violence in the forms of both homicide and suicide.&lt;/p&gt;
&lt;p&gt;Firearm background check data, however, requires close scrutiny. The way that these data are acquired on a state-by-state basis means that we might not be able to safely make comparisons &lt;em&gt;across&lt;/em&gt; states. Moreover, according to &lt;a href=&#34;https://www.thetrace.org/2015/10/private-sale-loophole-background-check-harvard-research/&#34;&gt;one group of Harvard researchers&lt;/a&gt;, upwards of 40% of all gun owners report acquiring their most recent gun &lt;em&gt;without a background check.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Thus, these numbers may tell a different story than one of ‘guns are being purchased more frequently.’ Although not employed in this post, there are some novel ways to develop stories similar to that one, like using &lt;a href=&#34;https://github.com/nytimes/gunsales#getting-gun-sales-estimates-from-background-checks&#34;&gt;NYT’s methodology&lt;/a&gt; to estimate gun sales from background check data. I encourage those interested to pursue their work, alongside the &lt;a href=&#34;https://github.com/BuzzFeedNews/nics-firearm-background-checks&#34;&gt;BuzzFeed News repository&lt;/a&gt; where this data came from, and analyze such questions yourself.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Recreating a Table by The Economist Using Reactable</title>
      <link>/post/economist-table-replication-using-reactable/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      <guid>/post/economist-table-replication-using-reactable/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/core-js/shim.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/react/react.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/react/react-dom.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/reactwidget/react-tools.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/reactable-binding/reactable.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;em&gt;The Economist&lt;/em&gt; recently released a series of country-level &lt;a href=&#34;https://twitter.com/J_CD_T/status/1261625814854045696&#34;&gt;datasets&lt;/a&gt; on ‘excess mortality’, a term used to &lt;a href=&#34;https://www.economist.com/graphic-detail/2020/04/16/tracking-covid-19-excess-deaths-across-countries&#34;&gt;describe&lt;/a&gt; ‘the gap between the total number of people who died from any cause, and the historical average for the same place and time of year.’ In simpler terms, the measure captures how many deaths &lt;em&gt;are&lt;/em&gt; happening that &lt;em&gt;shouldn’t be&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In the (free!) articles accompanying that data, I came across the following table:&lt;/p&gt;
&lt;div style=&#34;text-align:center&#34;&gt;
&lt;p&gt;&lt;img width = 100% src = img/econ-table.png&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I thought the table was clean and sent a clear message. The addition of inline barcharts is not intrusive but still helps the reader takeaway insights about the data. It’s a rather pretty table. Having recently &lt;a href=&#34;https://twitter.com/dataandme/status/1196552930167599106&#34;&gt;come across&lt;/a&gt; Greg Lin’s package &lt;a href=&#34;https://glin.github.io/reactable/index.html&#34;&gt;&lt;code&gt;reactable&lt;/code&gt;&lt;/a&gt;, I thought this could be a good opportunity to try my hand at recreating the above.&lt;/p&gt;
&lt;p&gt;(Coincidentally, while I was working on this project, Malcolm Barrett released a similar &lt;a href=&#34;https://malco.io/2020/05/16/replicating-an-nyt-table-of-swedish-covid-deaths-with-gt/&#34;&gt;blog post&lt;/a&gt; documenting his recreation of a NYT table using &lt;code&gt;gt&lt;/code&gt;. Check it out!)&lt;/p&gt;
&lt;div id=&#34;loading-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Loading packages&lt;/h2&gt;
&lt;p&gt;Our process uses standard packages: &lt;code&gt;reactable&lt;/code&gt; (obviously), &lt;code&gt;htmltools&lt;/code&gt; as its buddy, &lt;code&gt;lubridate&lt;/code&gt; for days and times, &lt;code&gt;hrbrthemes&lt;/code&gt; for &lt;em&gt;The Economist’s&lt;/em&gt; font, and &lt;code&gt;tidyverse&lt;/code&gt; for general purpose data wrangling.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(reactable)
library(htmltools)
library(lubridate)
library(hrbrthemes)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;gather-the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Gather the data&lt;/h2&gt;
&lt;p&gt;You can definitely skip this step if you’re not interested in the data collection and cleaning process.&lt;/p&gt;
&lt;p&gt;Unfortunately, one of the more time-consuming steps of this project was getting the data in the same format &lt;em&gt;The Economist&lt;/em&gt; used in their article. The data they released comes in the form of a series of &lt;a href=&#34;https://github.com/TheEconomist/covid-19-excess-deaths-tracker/tree/master/output-data/excess-deaths&#34;&gt;country-level CSVs&lt;/a&gt;; although helpful for country-level analysis, this meant that we have to modify the data into a joined format in order to create a table.&lt;/p&gt;
&lt;p&gt;Let’s begin by creating a function which reads in &lt;strong&gt;each individual CSV&lt;/strong&gt;, selects relevant columns, and stores that specific dataframe in the global environment.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create_dataframe &amp;lt;- function(country) {
  ## for URL (below)
  country &amp;lt;- str_replace(country, &amp;quot; &amp;quot;, &amp;quot;_&amp;quot;)
  
  ## read in CSV, given country parameter
  data &amp;lt;-
    readr::read_csv(
      paste0(
        &amp;#39;https://raw.githubusercontent.com/TheEconomist/covid-19-excess-deaths-tracker/master/output-data/excess-deaths/&amp;#39;, country, &amp;#39;_excess_deaths.csv&amp;#39;
      )
    )
  
  ## select relevant columns
  data &amp;lt;- data %&amp;gt;%
    select(
      country,
      region,
      start_date,
      end_date,
      population,
      total_deaths,
      covid_deaths,
      expected_deaths,
      excess_deaths,
      non_covid_deaths
    )
  
  assign(country, rbind(data), envir = .GlobalEnv)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that function created, we then want to loop it with each country &lt;em&gt;The Economist&lt;/em&gt; has included.&lt;/p&gt;
&lt;p&gt;To do so, we grab their list of sources from GitHub and pull each country into a list:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;country_names &amp;lt;-
  readr::read_csv(
    &amp;#39;https://raw.githubusercontent.com/TheEconomist/covid-19-excess-deaths-tracker/master/source-data/list_of_sources.csv&amp;#39;
  ) %&amp;gt;%
  select(country) %&amp;gt;%
  distinct() %&amp;gt;%
  mutate(country = stringr::str_to_lower(country)) %&amp;gt;%
  filter(country != &amp;#39;all&amp;#39;) %&amp;gt;%
  pull()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we loop!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;for (country in country_names) {
  create_dataframe(country)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we have a list of dataframes, with each containing one country’s data on excess mortality.&lt;/p&gt;
&lt;p&gt;Finally, we merge each of these new dataframes into one master dataset. Here, we are defining in &lt;code&gt;dfs&lt;/code&gt; a list of all objects in the global environment that are of the structure data frame. Then, we &lt;code&gt;rbind&lt;/code&gt; them all together!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dfs = sapply(.GlobalEnv, is.data.frame)

data &amp;lt;- do.call(rbind, mget(names(dfs)[dfs]))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But unfortunately, that’s not all. We need to filter our data to only include the places that are in &lt;em&gt;The Economist’s&lt;/em&gt; table. To make matters more difficult, the table’s identifying row is titled ‘Region/Country’, and includes data from two &lt;em&gt;separate&lt;/em&gt; rows in the CSVs.&lt;/p&gt;
&lt;p&gt;Let’s begin by manually defining and filtering according to the countries and regions that &lt;em&gt;The Economist&lt;/em&gt; includes. (This selection does not seem to have an order to it; as such, it has to be manual).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;good_countries &amp;lt;-
  c(&amp;quot;Britain&amp;quot;,
    &amp;quot;Spain&amp;quot;,
    &amp;quot;Italy&amp;quot;,
    &amp;quot;France&amp;quot;,
    &amp;quot;Netherlands&amp;quot;,
    &amp;quot;Belgium&amp;quot;,
    &amp;quot;Sweden&amp;quot;,
    &amp;quot;Austria&amp;quot;)

good_regions &amp;lt;- c(&amp;quot;New York City&amp;quot;, &amp;quot;Istanbul&amp;quot;, &amp;quot;Jakarta&amp;quot;)

data_filtered_countries &amp;lt;- data %&amp;gt;%
  filter(country %in% good_countries) %&amp;gt;%
  filter(country == region)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because the table only has one row for country/region, and groups them accordingly, we can go ahead and replace the &lt;code&gt;country&lt;/code&gt; variable in the &lt;code&gt;data_filtered_regions&lt;/code&gt; dataframe with &lt;code&gt;region&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_filtered_regions &amp;lt;- data %&amp;gt;%
  filter(region %in% good_regions) %&amp;gt;%
  # replace for the sake of the table
  mutate(country = region)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And merge:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_filtered &amp;lt;-
  rbind(data_filtered_countries, data_filtered_regions)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we notice that the table title says ‘Excess mortality &lt;em&gt;since region/country’s first 50 covid deaths&lt;/em&gt;.’ This means we need to exclude counts of excess deaths &lt;em&gt;before&lt;/em&gt; a region had 50 COVID deaths.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_filtered &amp;lt;- data_filtered %&amp;gt;%
  group_by(country) %&amp;gt;%
  mutate(csum = cumsum(covid_deaths))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point (after only selecting our relevant columns), our data looks like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_filtered %&amp;gt;% 
  select(country, start_date, end_date, covid_deaths, excess_deaths, covid_deaths, csum) %&amp;gt;% 
  reactable()&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;country&#34;:[&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Jakarta&#34;,&#34;Jakarta&#34;,&#34;Jakarta&#34;,&#34;Jakarta&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;],&#34;start_date&#34;:[&#34;2020-01-04&#34;,&#34;2020-01-11&#34;,&#34;2020-01-18&#34;,&#34;2020-01-25&#34;,&#34;2020-02-01&#34;,&#34;2020-02-08&#34;,&#34;2020-02-15&#34;,&#34;2020-02-22&#34;,&#34;2020-02-29&#34;,&#34;2020-03-07&#34;,&#34;2020-03-14&#34;,&#34;2020-03-21&#34;,&#34;2020-03-28&#34;,&#34;2020-04-04&#34;,&#34;2020-04-11&#34;,&#34;2020-04-18&#34;,&#34;2020-04-25&#34;,&#34;2020-05-02&#34;,&#34;2020-01-01&#34;,&#34;2020-01-08&#34;,&#34;2020-01-15&#34;,&#34;2020-01-22&#34;,&#34;2020-01-29&#34;,&#34;2020-02-05&#34;,&#34;2020-02-12&#34;,&#34;2020-02-19&#34;,&#34;2020-02-26&#34;,&#34;2020-03-04&#34;,&#34;2020-03-11&#34;,&#34;2020-03-18&#34;,&#34;2020-03-25&#34;,&#34;2020-04-01&#34;,&#34;2020-04-08&#34;,&#34;2020-04-15&#34;,&#34;2020-04-22&#34;,&#34;2020-04-29&#34;,&#34;2020-01-01&#34;,&#34;2020-01-08&#34;,&#34;2020-01-15&#34;,&#34;2020-01-22&#34;,&#34;2020-01-29&#34;,&#34;2020-02-05&#34;,&#34;2020-02-12&#34;,&#34;2020-02-19&#34;,&#34;2020-02-26&#34;,&#34;2020-03-04&#34;,&#34;2020-03-11&#34;,&#34;2020-03-18&#34;,&#34;2020-03-25&#34;,&#34;2020-04-01&#34;,&#34;2020-04-08&#34;,&#34;2020-04-15&#34;,&#34;2020-04-22&#34;,&#34;2020-01-06&#34;,&#34;2020-01-13&#34;,&#34;2020-01-20&#34;,&#34;2020-01-27&#34;,&#34;2020-02-03&#34;,&#34;2020-02-10&#34;,&#34;2020-02-17&#34;,&#34;2020-02-24&#34;,&#34;2020-03-02&#34;,&#34;2020-03-09&#34;,&#34;2020-03-16&#34;,&#34;2020-03-23&#34;,&#34;2020-03-30&#34;,&#34;2020-04-06&#34;,&#34;2020-04-13&#34;,&#34;2020-04-20&#34;,&#34;2020-04-27&#34;,&#34;2020-05-04&#34;,&#34;2020-01-01&#34;,&#34;2020-01-08&#34;,&#34;2020-01-15&#34;,&#34;2020-01-22&#34;,&#34;2020-01-29&#34;,&#34;2020-02-05&#34;,&#34;2020-02-12&#34;,&#34;2020-02-19&#34;,&#34;2020-02-26&#34;,&#34;2020-03-04&#34;,&#34;2020-03-11&#34;,&#34;2020-03-18&#34;,&#34;2020-03-25&#34;,&#34;2020-01-01&#34;,&#34;2020-01-08&#34;,&#34;2020-01-15&#34;,&#34;2020-01-22&#34;,&#34;2020-01-29&#34;,&#34;2020-02-05&#34;,&#34;2020-02-12&#34;,&#34;2020-02-19&#34;,&#34;2020-02-26&#34;,&#34;2020-03-04&#34;,&#34;2020-03-11&#34;,&#34;2020-03-18&#34;,&#34;2020-03-25&#34;,&#34;2020-04-01&#34;,&#34;2020-04-08&#34;,&#34;2020-04-15&#34;,&#34;2020-04-22&#34;,&#34;2020-02-24&#34;,&#34;2020-03-02&#34;,&#34;2020-03-09&#34;,&#34;2020-03-16&#34;,&#34;2020-03-23&#34;,&#34;2020-03-30&#34;,&#34;2020-04-06&#34;,&#34;2020-04-13&#34;,&#34;2020-04-20&#34;,&#34;2020-01-27&#34;,&#34;2020-02-03&#34;,&#34;2020-02-10&#34;,&#34;2020-02-17&#34;,&#34;2020-02-24&#34;,&#34;2020-03-02&#34;,&#34;2020-03-09&#34;,&#34;2020-03-16&#34;,&#34;2020-03-23&#34;,&#34;2020-03-30&#34;,&#34;2020-01-01&#34;,&#34;2020-02-01&#34;,&#34;2020-03-01&#34;,&#34;2020-04-01&#34;,&#34;2019-12-29&#34;,&#34;2020-01-05&#34;,&#34;2020-01-12&#34;,&#34;2020-01-19&#34;,&#34;2020-01-26&#34;,&#34;2020-02-02&#34;,&#34;2020-02-09&#34;,&#34;2020-02-16&#34;,&#34;2020-02-23&#34;,&#34;2020-03-01&#34;,&#34;2020-03-08&#34;,&#34;2020-03-15&#34;,&#34;2020-03-22&#34;,&#34;2020-03-29&#34;,&#34;2020-04-05&#34;,&#34;2020-04-12&#34;,&#34;2020-04-19&#34;,&#34;2020-01-01&#34;,&#34;2020-01-08&#34;,&#34;2020-01-15&#34;,&#34;2020-01-22&#34;,&#34;2020-01-29&#34;,&#34;2020-02-05&#34;,&#34;2020-02-12&#34;,&#34;2020-02-19&#34;,&#34;2020-02-26&#34;,&#34;2020-03-04&#34;,&#34;2020-03-11&#34;,&#34;2020-03-18&#34;,&#34;2020-03-25&#34;,&#34;2020-04-01&#34;,&#34;2020-04-08&#34;,&#34;2020-04-15&#34;,&#34;2020-04-22&#34;,&#34;2020-04-29&#34;,&#34;2020-05-06&#34;],&#34;end_date&#34;:[&#34;2020-01-10&#34;,&#34;2020-01-17&#34;,&#34;2020-01-24&#34;,&#34;2020-01-31&#34;,&#34;2020-02-07&#34;,&#34;2020-02-14&#34;,&#34;2020-02-21&#34;,&#34;2020-02-28&#34;,&#34;2020-03-06&#34;,&#34;2020-03-13&#34;,&#34;2020-03-20&#34;,&#34;2020-03-27&#34;,&#34;2020-04-03&#34;,&#34;2020-04-10&#34;,&#34;2020-04-17&#34;,&#34;2020-04-24&#34;,&#34;2020-05-01&#34;,&#34;2020-05-08&#34;,&#34;2020-01-07&#34;,&#34;2020-01-14&#34;,&#34;2020-01-21&#34;,&#34;2020-01-28&#34;,&#34;2020-02-04&#34;,&#34;2020-02-11&#34;,&#34;2020-02-18&#34;,&#34;2020-02-25&#34;,&#34;2020-03-03&#34;,&#34;2020-03-10&#34;,&#34;2020-03-17&#34;,&#34;2020-03-24&#34;,&#34;2020-03-31&#34;,&#34;2020-04-07&#34;,&#34;2020-04-14&#34;,&#34;2020-04-21&#34;,&#34;2020-04-28&#34;,&#34;2020-05-05&#34;,&#34;2020-01-07&#34;,&#34;2020-01-14&#34;,&#34;2020-01-21&#34;,&#34;2020-01-28&#34;,&#34;2020-02-04&#34;,&#34;2020-02-11&#34;,&#34;2020-02-18&#34;,&#34;2020-02-25&#34;,&#34;2020-03-03&#34;,&#34;2020-03-10&#34;,&#34;2020-03-17&#34;,&#34;2020-03-24&#34;,&#34;2020-03-31&#34;,&#34;2020-04-07&#34;,&#34;2020-04-14&#34;,&#34;2020-04-21&#34;,&#34;2020-04-28&#34;,&#34;2020-01-12&#34;,&#34;2020-01-19&#34;,&#34;2020-01-26&#34;,&#34;2020-02-02&#34;,&#34;2020-02-09&#34;,&#34;2020-02-16&#34;,&#34;2020-02-23&#34;,&#34;2020-03-01&#34;,&#34;2020-03-08&#34;,&#34;2020-03-15&#34;,&#34;2020-03-22&#34;,&#34;2020-03-29&#34;,&#34;2020-04-05&#34;,&#34;2020-04-12&#34;,&#34;2020-04-19&#34;,&#34;2020-04-26&#34;,&#34;2020-05-03&#34;,&#34;2020-05-10&#34;,&#34;2020-01-07&#34;,&#34;2020-01-14&#34;,&#34;2020-01-21&#34;,&#34;2020-01-28&#34;,&#34;2020-02-04&#34;,&#34;2020-02-11&#34;,&#34;2020-02-18&#34;,&#34;2020-02-25&#34;,&#34;2020-03-03&#34;,&#34;2020-03-10&#34;,&#34;2020-03-17&#34;,&#34;2020-03-24&#34;,&#34;2020-03-31&#34;,&#34;2020-01-07&#34;,&#34;2020-01-14&#34;,&#34;2020-01-21&#34;,&#34;2020-01-28&#34;,&#34;2020-02-04&#34;,&#34;2020-02-11&#34;,&#34;2020-02-18&#34;,&#34;2020-02-25&#34;,&#34;2020-03-03&#34;,&#34;2020-03-10&#34;,&#34;2020-03-17&#34;,&#34;2020-03-24&#34;,&#34;2020-03-31&#34;,&#34;2020-04-07&#34;,&#34;2020-04-14&#34;,&#34;2020-04-21&#34;,&#34;2020-04-28&#34;,&#34;2020-03-01&#34;,&#34;2020-03-08&#34;,&#34;2020-03-15&#34;,&#34;2020-03-22&#34;,&#34;2020-03-29&#34;,&#34;2020-04-05&#34;,&#34;2020-04-12&#34;,&#34;2020-04-19&#34;,&#34;2020-04-26&#34;,&#34;2020-02-02&#34;,&#34;2020-02-09&#34;,&#34;2020-02-16&#34;,&#34;2020-02-23&#34;,&#34;2020-03-01&#34;,&#34;2020-03-08&#34;,&#34;2020-03-15&#34;,&#34;2020-03-22&#34;,&#34;2020-03-29&#34;,&#34;2020-04-05&#34;,&#34;2020-01-31&#34;,&#34;2020-02-29&#34;,&#34;2020-03-31&#34;,&#34;2020-04-30&#34;,&#34;2020-01-04&#34;,&#34;2020-01-11&#34;,&#34;2020-01-18&#34;,&#34;2020-01-25&#34;,&#34;2020-02-01&#34;,&#34;2020-02-08&#34;,&#34;2020-02-15&#34;,&#34;2020-02-22&#34;,&#34;2020-02-29&#34;,&#34;2020-03-07&#34;,&#34;2020-03-14&#34;,&#34;2020-03-21&#34;,&#34;2020-03-28&#34;,&#34;2020-04-04&#34;,&#34;2020-04-11&#34;,&#34;2020-04-18&#34;,&#34;2020-04-25&#34;,&#34;2020-01-07&#34;,&#34;2020-01-14&#34;,&#34;2020-01-21&#34;,&#34;2020-01-28&#34;,&#34;2020-02-04&#34;,&#34;2020-02-11&#34;,&#34;2020-02-18&#34;,&#34;2020-02-25&#34;,&#34;2020-03-03&#34;,&#34;2020-03-10&#34;,&#34;2020-03-17&#34;,&#34;2020-03-24&#34;,&#34;2020-03-31&#34;,&#34;2020-04-07&#34;,&#34;2020-04-14&#34;,&#34;2020-04-21&#34;,&#34;2020-04-28&#34;,&#34;2020-05-05&#34;,&#34;2020-05-12&#34;],&#34;covid_deaths&#34;:[0,0,0,0,0,0,0,0,0,5,114,610,3812,6899,9509,9024,6684,4429,0,0,0,0,0,0,0,0,0,35,461,2211,5026,5486,4372,3691,2540,1797,0,0,0,0,0,0,0,0,0,0,8,73,251,532,668,629,550,0,0,0,0,0,0,0,0,3,17,159,592,995,971,947,791,581,384,0,0,0,0,0,0,0,10,69,552,1857,4238,5462,0,0,0,0,0,0,1,0,3,29,142,925,2423,6805,5401,5067,2864,0,0,0,18,180,745,1550,2125,1717,0,0,0,0,0,0,1,15,70,118,0,0,84,297,0,0,0,0,0,0,0,0,0,0,4,176,1198,3754,5218,4125,2720,0,0,0,0,0,0,0,0,0,0,0,22,85,255.5,339,428,366.5,264,187],&#34;excess_deaths&#34;:[84,-325.6,-1090,-794.6,-942.200000000001,-923,-717.4,-345.799999999999,-724,-187.799999999999,-207,1112.8,7122.2,8979.2,12731.4,12358.2,8457.6,3840.6,-621.25,-41,177.5,282.25,286,-560.5,-728.5,-704,-601.5,-408.5,675,4198.75,8323.25,7937.5,5389,2947.75,1134,546,-109.6,-76,-165.2,-119.6,-114,-128.8,-106,-239,-212.8,-95.5999999999999,-102.4,79.8,258.2,615.6,819.6,675.6,484.2,9,-167.6,-247.8,-163.8,-117.4,-114.6,-385.4,-232.2,-236.4,-108,459.6,1380.4,2107.8,2047.6,1409,1085,612.4,294,-1525.8,-1509,-1294.6,-716.799999999999,-1119,-837,-758.799999999999,-499.4,-224.4,1738.8,5271,8758.8,8487,-563,-623,-766,-787.200000000001,-699,-1008.8,-961.4,-1343.6,-792.4,-308.200000000001,954.200000000001,2401.4,5644.2,7266.2,5523.2,3247.4,1061.8,-108,-122,-81,267,934,1789,2065,1489,853,132,-138,-48,-61,-34,0,8,252,123,207,585.5,-28.5,1375.5,1409.5,-182.2,-84,-22.2,-11,14.4000000000001,-40.2,-7.20000000000005,-49,-1,5,32,339.2,1694.6,4998,6573.6,4550.8,2572,-67.6666666666667,-23.6666666666667,16.3333333333333,26.3333333333333,-20.6666666666667,8.33333333333326,15.3333333333333,-84.3333333333333,-55.3333333333333,-57.3333333333333,88,283,444.333333333333,818.333333333333,782,629.333333333333,481.333333333333,374,287.333333333333],&#34;csum&#34;:[0,0,0,0,0,0,0,0,0,5,119,729,4541,11440,20949,29973,36657,41086,0,0,0,0,0,0,0,0,0,35,496,2707,7733,13219,17591,21282,23822,25619,0,0,0,0,0,0,0,0,0,0,8,81,332,864,1532,2161,2711,0,0,0,0,0,0,0,0,3,20,179,771,1766,2737,3684,4475,5056,5440,0,0,0,0,0,0,0,10,79,631,2488,6726,12188,0,0,0,0,0,0,1,1,4,33,175,1100,3523,10328,15729,20796,23660,0,0,0,18,198,943,2493,4618,6335,0,0,0,0,0,0,1,16,86,204,0,0,84,381,0,0,0,0,0,0,0,0,0,0,4,180,1378,5132,10350,14475,17195,0,0,0,0,0,0,0,0,0,0,0,22,107,362.5,701.5,1129.5,1496,1760,1947]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;country&#34;,&#34;name&#34;:&#34;country&#34;,&#34;type&#34;:&#34;character&#34;},{&#34;accessor&#34;:&#34;start_date&#34;,&#34;name&#34;:&#34;start_date&#34;,&#34;type&#34;:&#34;Date&#34;},{&#34;accessor&#34;:&#34;end_date&#34;,&#34;name&#34;:&#34;end_date&#34;,&#34;type&#34;:&#34;Date&#34;},{&#34;accessor&#34;:&#34;covid_deaths&#34;,&#34;name&#34;:&#34;covid_deaths&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;excess_deaths&#34;,&#34;name&#34;:&#34;excess_deaths&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;csum&#34;,&#34;name&#34;:&#34;csum&#34;,&#34;type&#34;:&#34;numeric&#34;}],&#34;defaultPageSize&#34;:10,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:1,&#34;dataKey&#34;:&#34;5845fe168655e5f6a72e9b9f636d6082&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;We need to group each country according to its total deaths related to COVID-19, and excess deaths. Then, using those two numbers, we calculate the percentage of excess deaths attributable to COVID-19. This can be used as a metric for underreporting of COVID-19 cases in a country.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_for_table &amp;lt;- data_filtered %&amp;gt;%
  filter(excess_deaths &amp;gt; 0) %&amp;gt;%
  group_by(country) %&amp;gt;%
  summarise(
    excess_deaths = round(sum(excess_deaths)),
    covid_deaths = round(sum(covid_deaths)),
    perc = covid_deaths / excess_deaths
  ) %&amp;gt;%
  select(country, covid_deaths, excess_deaths, perc)

reactable(data_for_table, pagination = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-2&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;country&#34;:[&#34;Austria&#34;,&#34;Belgium&#34;,&#34;Britain&#34;,&#34;France&#34;,&#34;Istanbul&#34;,&#34;Italy&#34;,&#34;Jakarta&#34;,&#34;Netherlands&#34;,&#34;New York City&#34;,&#34;Spain&#34;,&#34;Sweden&#34;],&#34;covid_deaths&#34;:[204,6335,40967,23627,1947,12109,381,5420,17195,25584,2703],&#34;excess_deaths&#34;:[722,7397,54686,26098,4254,24256,3370,9405,20780,31897,2933],&#34;perc&#34;:[0.282548476454294,0.856428281735839,0.749131404747102,0.90531841520423,0.457686882933709,0.499216688654354,0.113056379821958,0.576289207868155,0.827478344562079,0.802081700473399,0.921581997954313]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;country&#34;,&#34;name&#34;:&#34;country&#34;,&#34;type&#34;:&#34;character&#34;},{&#34;accessor&#34;:&#34;covid_deaths&#34;,&#34;name&#34;:&#34;covid_deaths&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;excess_deaths&#34;,&#34;name&#34;:&#34;excess_deaths&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;perc&#34;,&#34;name&#34;:&#34;perc&#34;,&#34;type&#34;:&#34;numeric&#34;}],&#34;defaultPageSize&#34;:11,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:1,&#34;dataKey&#34;:&#34;249cb3ef37824d809949c55e67461087&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;The only thing missing at this point is the date range. In order to find and display the dates, we need to find the &lt;em&gt;first date after a given country/region hit 50 COVID-19 cases&lt;/em&gt; and the &lt;em&gt;last date in the data&lt;/em&gt; for that country/region.&lt;/p&gt;
&lt;p&gt;How do we do this? First, we’ll create a &lt;a href=&#34;https://stackoverflow.com/questions/40039903/r-add-th-rd-and-nd-to-dates&#34;&gt;function&lt;/a&gt; called &lt;code&gt;append_date_suffix&lt;/code&gt; which, according to a given day, appends the appropriate suffix.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;append_date_suffix &amp;lt;- function(dates) {
  suff &amp;lt;- case_when(
    dates %in% c(11, 12, 13) ~ &amp;quot;th&amp;quot;,
    dates %% 10 == 1 ~ &amp;#39;st&amp;#39;,
    dates %% 10 == 2 ~ &amp;#39;nd&amp;#39;,
    dates %% 10 == 3 ~ &amp;#39;rd&amp;#39;,
    TRUE ~ &amp;quot;th&amp;quot;
  )
  paste0(dates, suff)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ll then group by the &lt;code&gt;country&lt;/code&gt; variable and find the min and max date (with the minimum only appearing after a country has seen 50 COVID deaths). Then, we do a lot of formatting of individual days and months, and append them all together with dashes in &lt;em&gt;The Economist’s&lt;/em&gt; style. Sorry, there’s a lot going on here.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dates_data &amp;lt;-
  data_filtered %&amp;gt;%
  # only looking at date ranges starting post-50 deaths
  filter(csum &amp;gt; 50) %&amp;gt;%
  group_by(country) %&amp;gt;%
  summarise(start_date = min(start_date),
            end_date = max(end_date)) %&amp;gt;%
  mutate(
    clean_start_day = format(start_date, &amp;quot;%d&amp;quot;),
    clean_start_day = append_date_suffix(as.numeric(clean_start_day)),
    clean_start_month = format(start_date, &amp;quot;%b&amp;quot;),
    clean_end_day = format(end_date, &amp;quot;%d&amp;quot;),
    clean_end_day = append_date_suffix(as.numeric(clean_end_day)),
    clean_end_month = format(end_date, &amp;quot;%b&amp;quot;)
  ) %&amp;gt;%
  mutate(
    clean_range = paste0(
      clean_start_month,&amp;quot; &amp;quot;, ## Mar
      clean_start_day, &amp;quot;-&amp;quot;, ## 6-
      clean_end_month, &amp;quot; &amp;quot;, ## May
      clean_end_day ## 18
    )
  ) %&amp;gt;%
  select(country, clean_range)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates date ranges that look like this:&lt;/p&gt;
&lt;div id=&#34;htmlwidget-3&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-3&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;country&#34;:[&#34;Austria&#34;,&#34;Belgium&#34;,&#34;Britain&#34;,&#34;France&#34;,&#34;Istanbul&#34;,&#34;Italy&#34;,&#34;Jakarta&#34;,&#34;Netherlands&#34;,&#34;New York City&#34;,&#34;Spain&#34;,&#34;Sweden&#34;],&#34;clean_range&#34;:[&#34;Mar 23rd-Apr 5th&#34;,&#34;Mar 23rd-Apr 26th&#34;,&#34;Mar 14th-May 8th&#34;,&#34;Mar 11th-Apr 28th&#34;,&#34;Mar 25th-May 12th&#34;,&#34;Feb 26th-Mar 31st&#34;,&#34;Mar 1st-Apr 30th&#34;,&#34;Mar 16th-May 10th&#34;,&#34;Mar 15th-Apr 25th&#34;,&#34;Mar 11th-May 5th&#34;,&#34;Mar 18th-Apr 28th&#34;]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;country&#34;,&#34;name&#34;:&#34;country&#34;,&#34;type&#34;:&#34;character&#34;},{&#34;accessor&#34;:&#34;clean_range&#34;,&#34;name&#34;:&#34;clean_range&#34;,&#34;type&#34;:&#34;character&#34;}],&#34;defaultPageSize&#34;:11,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:1,&#34;dataKey&#34;:&#34;944cb010b09fbd5dbf1363c55bf203a7&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Join these dates with our existing data…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_for_table &amp;lt;- data_filtered %&amp;gt;%
  filter(excess_deaths &amp;gt; 0) %&amp;gt;%
  group_by(country) %&amp;gt;%
  summarise(
    excess_deaths = round(sum(excess_deaths)),
    covid_deaths = round(sum(covid_deaths)),
    perc = covid_deaths / excess_deaths
  ) %&amp;gt;%
  left_join(dates_data, by = &amp;#39;country&amp;#39;) %&amp;gt;%
  select(country, clean_range, covid_deaths, excess_deaths, perc)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and we get our finalized dataset:&lt;/p&gt;
&lt;div id=&#34;htmlwidget-4&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-4&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;country&#34;:[&#34;Austria&#34;,&#34;Belgium&#34;,&#34;Britain&#34;,&#34;France&#34;,&#34;Istanbul&#34;,&#34;Italy&#34;,&#34;Jakarta&#34;,&#34;Netherlands&#34;,&#34;New York City&#34;,&#34;Spain&#34;,&#34;Sweden&#34;],&#34;clean_range&#34;:[&#34;Mar 23rd-Apr 5th&#34;,&#34;Mar 23rd-Apr 26th&#34;,&#34;Mar 14th-May 8th&#34;,&#34;Mar 11th-Apr 28th&#34;,&#34;Mar 25th-May 12th&#34;,&#34;Feb 26th-Mar 31st&#34;,&#34;Mar 1st-Apr 30th&#34;,&#34;Mar 16th-May 10th&#34;,&#34;Mar 15th-Apr 25th&#34;,&#34;Mar 11th-May 5th&#34;,&#34;Mar 18th-Apr 28th&#34;],&#34;covid_deaths&#34;:[204,6335,40967,23627,1947,12109,381,5420,17195,25584,2703],&#34;excess_deaths&#34;:[722,7397,54686,26098,4254,24256,3370,9405,20780,31897,2933],&#34;perc&#34;:[0.282548476454294,0.856428281735839,0.749131404747102,0.90531841520423,0.457686882933709,0.499216688654354,0.113056379821958,0.576289207868155,0.827478344562079,0.802081700473399,0.921581997954313]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;country&#34;,&#34;name&#34;:&#34;country&#34;,&#34;type&#34;:&#34;character&#34;},{&#34;accessor&#34;:&#34;clean_range&#34;,&#34;name&#34;:&#34;clean_range&#34;,&#34;type&#34;:&#34;character&#34;},{&#34;accessor&#34;:&#34;covid_deaths&#34;,&#34;name&#34;:&#34;covid_deaths&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;excess_deaths&#34;,&#34;name&#34;:&#34;excess_deaths&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;perc&#34;,&#34;name&#34;:&#34;perc&#34;,&#34;type&#34;:&#34;numeric&#34;}],&#34;defaultPageSize&#34;:11,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:1,&#34;dataKey&#34;:&#34;87a9a93568ca457a61d4bc6661464513&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-the-table&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Creating the table&lt;/h2&gt;
&lt;p&gt;Finally, we’re ready to take that dataset and create our table. We can begin by defining some parameters that make the table easier to use and more aesthetically pleasing. Here, we sort according to excess deaths (but don’t include an arrow), make it compact, and show all results on one page.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reactable(
  data_for_table,
  defaultSortOrder = &amp;#39;desc&amp;#39;,
  defaultSorted = &amp;#39;excess_deaths&amp;#39;,
  showSortIcon = FALSE,
  compact = TRUE,
  pagination = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-5&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-5&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;country&#34;:[&#34;Austria&#34;,&#34;Belgium&#34;,&#34;Britain&#34;,&#34;France&#34;,&#34;Istanbul&#34;,&#34;Italy&#34;,&#34;Jakarta&#34;,&#34;Netherlands&#34;,&#34;New York City&#34;,&#34;Spain&#34;,&#34;Sweden&#34;],&#34;clean_range&#34;:[&#34;Mar 23rd-Apr 5th&#34;,&#34;Mar 23rd-Apr 26th&#34;,&#34;Mar 14th-May 8th&#34;,&#34;Mar 11th-Apr 28th&#34;,&#34;Mar 25th-May 12th&#34;,&#34;Feb 26th-Mar 31st&#34;,&#34;Mar 1st-Apr 30th&#34;,&#34;Mar 16th-May 10th&#34;,&#34;Mar 15th-Apr 25th&#34;,&#34;Mar 11th-May 5th&#34;,&#34;Mar 18th-Apr 28th&#34;],&#34;covid_deaths&#34;:[204,6335,40967,23627,1947,12109,381,5420,17195,25584,2703],&#34;excess_deaths&#34;:[722,7397,54686,26098,4254,24256,3370,9405,20780,31897,2933],&#34;perc&#34;:[0.282548476454294,0.856428281735839,0.749131404747102,0.90531841520423,0.457686882933709,0.499216688654354,0.113056379821958,0.576289207868155,0.827478344562079,0.802081700473399,0.921581997954313]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;country&#34;,&#34;name&#34;:&#34;country&#34;,&#34;type&#34;:&#34;character&#34;},{&#34;accessor&#34;:&#34;clean_range&#34;,&#34;name&#34;:&#34;clean_range&#34;,&#34;type&#34;:&#34;character&#34;},{&#34;accessor&#34;:&#34;covid_deaths&#34;,&#34;name&#34;:&#34;covid_deaths&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;excess_deaths&#34;,&#34;name&#34;:&#34;excess_deaths&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;perc&#34;,&#34;name&#34;:&#34;perc&#34;,&#34;type&#34;:&#34;numeric&#34;}],&#34;defaultSortDesc&#34;:true,&#34;defaultSorted&#34;:[{&#34;id&#34;:&#34;excess_deaths&#34;,&#34;desc&#34;:true}],&#34;defaultPageSize&#34;:11,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:1,&#34;compact&#34;:true,&#34;showSortIcon&#34;:false,&#34;dataKey&#34;:&#34;87a9a93568ca457a61d4bc6661464513&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;div id=&#34;style-headers&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Style headers&lt;/h3&gt;
&lt;p&gt;Next, let’s make the column headers stylistically similar to &lt;em&gt;The Economist&lt;/em&gt;. We do so with reactable’s &lt;code&gt;defaultColDef&lt;/code&gt;, where we define a &lt;code&gt;colDef&lt;/code&gt; with styles for the header and regular cells. Here, we can include CSS (which you can find by inspecting the table at hand). Throughout this post, you’ll notice my constant references to &lt;code&gt;font_es&lt;/code&gt;. This is from &lt;a href=&#34;https://github.com/hrbrmstr/hrbrthemes&#34;&gt;Bob Rudis’s &lt;code&gt;hrbrthemes&lt;/code&gt;&lt;/a&gt;. It contains the font name for Economist Sans Condensed, which is the font that &lt;em&gt;The Economist&lt;/em&gt; uses!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reactable(
  data_for_table,
  defaultSortOrder = &amp;#39;desc&amp;#39;,
  defaultSorted = &amp;#39;excess_deaths&amp;#39;,
  showSortIcon = FALSE,
  compact = TRUE,
  pagination = FALSE,
  ######## NEW ########
  defaultColDef = colDef(
    ### define header styling
    headerStyle = list(
      textAlign = &amp;quot;left&amp;quot;,
      fontSize = &amp;quot;11px&amp;quot;,
      lineHeight = &amp;quot;14px&amp;quot;,
      textTransform = &amp;quot;uppercase&amp;quot;,
      color = &amp;quot;#0c0c0c&amp;quot;,
      fontWeight = &amp;quot;500&amp;quot;,
      borderBottom = &amp;quot;2px solid #e9edf0&amp;quot;,
      paddingBottom = &amp;quot;3px&amp;quot;,
      verticalAlign = &amp;quot;bottom&amp;quot;,
      fontFamily = font_es
    ),
    ### define default column styling
    style = list(
      fontFamily = font_es,
      fontSize = &amp;quot;14px&amp;quot;,
      verticalAlign = &amp;quot;center&amp;quot;,
      align = &amp;quot;left&amp;quot;
    )
  )
)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-6&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-6&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;country&#34;:[&#34;Austria&#34;,&#34;Belgium&#34;,&#34;Britain&#34;,&#34;France&#34;,&#34;Istanbul&#34;,&#34;Italy&#34;,&#34;Jakarta&#34;,&#34;Netherlands&#34;,&#34;New York City&#34;,&#34;Spain&#34;,&#34;Sweden&#34;],&#34;clean_range&#34;:[&#34;Mar 23rd-Apr 5th&#34;,&#34;Mar 23rd-Apr 26th&#34;,&#34;Mar 14th-May 8th&#34;,&#34;Mar 11th-Apr 28th&#34;,&#34;Mar 25th-May 12th&#34;,&#34;Feb 26th-Mar 31st&#34;,&#34;Mar 1st-Apr 30th&#34;,&#34;Mar 16th-May 10th&#34;,&#34;Mar 15th-Apr 25th&#34;,&#34;Mar 11th-May 5th&#34;,&#34;Mar 18th-Apr 28th&#34;],&#34;covid_deaths&#34;:[204,6335,40967,23627,1947,12109,381,5420,17195,25584,2703],&#34;excess_deaths&#34;:[722,7397,54686,26098,4254,24256,3370,9405,20780,31897,2933],&#34;perc&#34;:[0.282548476454294,0.856428281735839,0.749131404747102,0.90531841520423,0.457686882933709,0.499216688654354,0.113056379821958,0.576289207868155,0.827478344562079,0.802081700473399,0.921581997954313]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;country&#34;,&#34;name&#34;:&#34;country&#34;,&#34;type&#34;:&#34;character&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontSize&#34;:&#34;14px&#34;,&#34;verticalAlign&#34;:&#34;center&#34;,&#34;align&#34;:&#34;left&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;clean_range&#34;,&#34;name&#34;:&#34;clean_range&#34;,&#34;type&#34;:&#34;character&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontSize&#34;:&#34;14px&#34;,&#34;verticalAlign&#34;:&#34;center&#34;,&#34;align&#34;:&#34;left&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;covid_deaths&#34;,&#34;name&#34;:&#34;covid_deaths&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontSize&#34;:&#34;14px&#34;,&#34;verticalAlign&#34;:&#34;center&#34;,&#34;align&#34;:&#34;left&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;excess_deaths&#34;,&#34;name&#34;:&#34;excess_deaths&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontSize&#34;:&#34;14px&#34;,&#34;verticalAlign&#34;:&#34;center&#34;,&#34;align&#34;:&#34;left&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;perc&#34;,&#34;name&#34;:&#34;perc&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontSize&#34;:&#34;14px&#34;,&#34;verticalAlign&#34;:&#34;center&#34;,&#34;align&#34;:&#34;left&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}}],&#34;defaultSortDesc&#34;:true,&#34;defaultSorted&#34;:[{&#34;id&#34;:&#34;excess_deaths&#34;,&#34;desc&#34;:true}],&#34;defaultPageSize&#34;:11,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:1,&#34;compact&#34;:true,&#34;showSortIcon&#34;:false,&#34;dataKey&#34;:&#34;8ad8706dfbeacfc7871563a2bd901bf3&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;format-columns&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Format columns&lt;/h3&gt;
&lt;p&gt;Now, we can start to format the specific columns appropriately. The three easiest columns are &lt;strong&gt;Region/Country&lt;/strong&gt;, &lt;strong&gt;Time Period&lt;/strong&gt;, &lt;strong&gt;COVID-19 as % of Total&lt;/strong&gt;. In each of these columns, we create a &lt;code&gt;colDef&lt;/code&gt; which defines the column name, as well as some styling.&lt;/p&gt;
&lt;p&gt;You’ll notice the addition of &lt;code&gt;JS&lt;/code&gt; in our percent column. This allows us to include JavaScript in our columns and column headers. I use it to do something simple, like a line break. You can use JS for plenty of more complex purposes, &lt;a href=&#34;https://glin.github.io/reactable/articles/examples.html&#34;&gt;some of which are documented here&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reactable(
  data_for_table,
  defaultSortOrder = &amp;#39;desc&amp;#39;,
  defaultSorted = &amp;#39;excess_deaths&amp;#39;,
  showSortIcon = FALSE,
  compact = TRUE,
  pagination = FALSE,
  defaultColDef = colDef(
    headerStyle = list(
      textAlign = &amp;quot;left&amp;quot;,
      fontSize = &amp;quot;11px&amp;quot;,
      lineHeight = &amp;quot;14px&amp;quot;,
      textTransform = &amp;quot;uppercase&amp;quot;,
      color = &amp;quot;#0c0c0c&amp;quot;,
      fontWeight = &amp;quot;500&amp;quot;,
      borderBottom = &amp;quot;2px solid #e9edf0&amp;quot;,
      paddingBottom = &amp;quot;3px&amp;quot;,
      verticalAlign = &amp;quot;bottom&amp;quot;,
      fontFamily = font_es
    ),
    style = list(
      fontFamily = font_es,
      fontSize = &amp;quot;14px&amp;quot;,
      verticalAlign = &amp;quot;center&amp;quot;,
      align = &amp;quot;left&amp;quot;
    )
  ),
  ####### NEW #######
  columns = list(
    country = colDef(
      name = &amp;quot;Region / Country&amp;quot;,
      style = list(fontFamily = font_es,
                   fontWeight = &amp;quot;400&amp;quot;)
    ),
    perc = colDef(
      html = TRUE,
      header = JS(&amp;quot;
      function(colInfo) {
        return &amp;#39;COVID-19 as&amp;lt;br&amp;gt;% of total&amp;#39;
      }&amp;quot;),
      name = &amp;quot;COVID-19 as % of Total&amp;quot;,
      align = &amp;quot;right&amp;quot;,
      maxWidth = 100,
      format = colFormat(percent = TRUE, digits = 0),
      style = list(fontFamily =  font_es_bold),
      headerStyle = list(
        fontSize = &amp;quot;11px&amp;quot;,
        lineHeight = &amp;quot;14px&amp;quot;,
        textTransform = &amp;quot;uppercase&amp;quot;,
        color = &amp;quot;#0c0c0c&amp;quot;,
        fontWeight = &amp;quot;500&amp;quot;,
        borderBottom = &amp;quot;2px solid #e9edf0&amp;quot;,
        paddingBottom = &amp;quot;3px&amp;quot;,
        verticalAlign = &amp;quot;bottom&amp;quot;,
        fontFamily = font_es,
        textAlign = &amp;quot;right&amp;quot;
      )
    ),
    clean_range = colDef(
      name = &amp;quot;Time Period&amp;quot;,
      style = list(
        color = &amp;#39;#3f5661&amp;#39;,
        fontSize = &amp;#39;12px&amp;#39;,
        fontFamily = font_es
      )
    )
  )
)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-7&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-7&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;country&#34;:[&#34;Austria&#34;,&#34;Belgium&#34;,&#34;Britain&#34;,&#34;France&#34;,&#34;Istanbul&#34;,&#34;Italy&#34;,&#34;Jakarta&#34;,&#34;Netherlands&#34;,&#34;New York City&#34;,&#34;Spain&#34;,&#34;Sweden&#34;],&#34;clean_range&#34;:[&#34;Mar 23rd-Apr 5th&#34;,&#34;Mar 23rd-Apr 26th&#34;,&#34;Mar 14th-May 8th&#34;,&#34;Mar 11th-Apr 28th&#34;,&#34;Mar 25th-May 12th&#34;,&#34;Feb 26th-Mar 31st&#34;,&#34;Mar 1st-Apr 30th&#34;,&#34;Mar 16th-May 10th&#34;,&#34;Mar 15th-Apr 25th&#34;,&#34;Mar 11th-May 5th&#34;,&#34;Mar 18th-Apr 28th&#34;],&#34;covid_deaths&#34;:[204,6335,40967,23627,1947,12109,381,5420,17195,25584,2703],&#34;excess_deaths&#34;:[722,7397,54686,26098,4254,24256,3370,9405,20780,31897,2933],&#34;perc&#34;:[0.282548476454294,0.856428281735839,0.749131404747102,0.90531841520423,0.457686882933709,0.499216688654354,0.113056379821958,0.576289207868155,0.827478344562079,0.802081700473399,0.921581997954313]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;country&#34;,&#34;name&#34;:&#34;Region / Country&#34;,&#34;type&#34;:&#34;character&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontWeight&#34;:&#34;400&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;clean_range&#34;,&#34;name&#34;:&#34;Time Period&#34;,&#34;type&#34;:&#34;character&#34;,&#34;style&#34;:{&#34;color&#34;:&#34;#3f5661&#34;,&#34;fontSize&#34;:&#34;12px&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;covid_deaths&#34;,&#34;name&#34;:&#34;covid_deaths&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontSize&#34;:&#34;14px&#34;,&#34;verticalAlign&#34;:&#34;center&#34;,&#34;align&#34;:&#34;left&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;excess_deaths&#34;,&#34;name&#34;:&#34;excess_deaths&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontSize&#34;:&#34;14px&#34;,&#34;verticalAlign&#34;:&#34;center&#34;,&#34;align&#34;:&#34;left&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;perc&#34;,&#34;name&#34;:&#34;COVID-19 as % of Total&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndBol&#34;},&#34;headerStyle&#34;:{&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;textAlign&#34;:&#34;right&#34;},&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:0,&#34;percent&#34;:true},&#34;aggregated&#34;:{&#34;digits&#34;:0,&#34;percent&#34;:true}},&#34;header&#34;:&#34;\n      function(colInfo) {\n        return &#39;COVID-19 as&lt;br&gt;% of total&#39;\n      }&#34;,&#34;html&#34;:true,&#34;maxWidth&#34;:100,&#34;align&#34;:&#34;right&#34;}],&#34;defaultSortDesc&#34;:true,&#34;defaultSorted&#34;:[{&#34;id&#34;:&#34;excess_deaths&#34;,&#34;desc&#34;:true}],&#34;defaultPageSize&#34;:11,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:1,&#34;compact&#34;:true,&#34;showSortIcon&#34;:false,&#34;dataKey&#34;:&#34;a9245ac4442c2fd989f596473fa410d5&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[&#34;tag.attribs.columns.4.header&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;add-the-barcharts&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Add the barcharts&lt;/h3&gt;
&lt;p&gt;We can now create the ‘deaths’ columns, which include barcharts.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;reactable&lt;/code&gt; makes the addition of barcharts to tables quite easy, thanks to its integration of JavaScript. Here, I pull from one &lt;a href=&#34;https://glin.github.io/reactable/articles/twitter-followers/twitter-followers.html&#34;&gt;example&lt;/a&gt; on &lt;code&gt;reactable&lt;/code&gt;’s website, and use the following code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reactable(
  data_for_table,
  defaultSortOrder = &amp;#39;desc&amp;#39;,
  defaultSorted = &amp;#39;excess_deaths&amp;#39;,
  showSortIcon = FALSE,
  compact = TRUE,
  pagination = FALSE,
  defaultColDef = colDef(
    headerStyle = list(
      textAlign = &amp;quot;left&amp;quot;,
      fontSize = &amp;quot;11px&amp;quot;,
      lineHeight = &amp;quot;14px&amp;quot;,
      textTransform = &amp;quot;uppercase&amp;quot;,
      color = &amp;quot;#0c0c0c&amp;quot;,
      fontWeight = &amp;quot;500&amp;quot;,
      borderBottom = &amp;quot;2px solid #e9edf0&amp;quot;,
      paddingBottom = &amp;quot;3px&amp;quot;,
      verticalAlign = &amp;quot;bottom&amp;quot;,
      fontFamily = font_es
    ),
    style = list(
      fontFamily = font_es,
      fontSize = &amp;quot;14px&amp;quot;,
      verticalAlign = &amp;quot;center&amp;quot;,
      align = &amp;quot;left&amp;quot;
    )
  ),
  columns = list(
    country = colDef(
      name = &amp;quot;Region / Country&amp;quot;,
      style = list(fontFamily = font_es,
                   fontWeight = &amp;quot;400&amp;quot;)
    ),
    perc = colDef(
      html = TRUE,
      header = JS(&amp;quot;
      function(colInfo) {
        return &amp;#39;COVID-19 as&amp;lt;br&amp;gt;% of total&amp;#39;
      }&amp;quot;),
      name = &amp;quot;COVID-19 as % of Total&amp;quot;,
      align = &amp;quot;right&amp;quot;,
      maxWidth = 100,
      format = colFormat(percent = TRUE, digits = 0),
      style = list(fontFamily =  font_es_bold),
      headerStyle = list(
        fontSize = &amp;quot;11px&amp;quot;,
        lineHeight = &amp;quot;14px&amp;quot;,
        textTransform = &amp;quot;uppercase&amp;quot;,
        color = &amp;quot;#0c0c0c&amp;quot;,
        fontWeight = &amp;quot;500&amp;quot;,
        borderBottom = &amp;quot;2px solid #e9edf0&amp;quot;,
        paddingBottom = &amp;quot;3px&amp;quot;,
        verticalAlign = &amp;quot;bottom&amp;quot;,
        fontFamily = font_es,
        textAlign = &amp;quot;right&amp;quot;
      )
    ),
    clean_range = colDef(
      name = &amp;quot;Time Period&amp;quot;,
      style = list(
        color = &amp;#39;#3f5661&amp;#39;,
        fontSize = &amp;#39;12px&amp;#39;,
        fontFamily = font_es
      )
    ),
    ###### NEW ######
    covid_deaths = colDef(
      name = &amp;quot;COVID-19 Deaths&amp;quot;,
      cell = function(value) {
        width &amp;lt;- paste0(value * 100 / max(data_for_table$covid_deaths), &amp;quot;%&amp;quot;)
        value &amp;lt;- format(value, big.mark = &amp;quot;,&amp;quot;)
        value &amp;lt;- format(value, width = 10, justify = &amp;quot;right&amp;quot;)
        bar &amp;lt;- div(
          class = &amp;quot;bar-chart&amp;quot;,
          style = list(marginRight = &amp;quot;6px&amp;quot;),
          div(
            class = &amp;quot;bar&amp;quot;,
            style = list(width = width, backgroundColor = &amp;quot;#F15A3F&amp;quot;)
          )
        )
        div(class = &amp;quot;bar-cell&amp;quot;, span(class = &amp;quot;number&amp;quot;, value), bar)
      }
    ),
    excess_deaths = colDef(
      name = &amp;quot;Total Excess Deaths&amp;quot;,
      cell = function(value) {
        width &amp;lt;-
          paste0(value * 100 / max(data_for_table$excess_deaths), &amp;quot;%&amp;quot;)
        value &amp;lt;- format(value, big.mark = &amp;quot;,&amp;quot;)
        value &amp;lt;- format(value, width = 10, justify = &amp;quot;right&amp;quot;)
        bar &amp;lt;- div(
          class = &amp;quot;bar-chart&amp;quot;,
          style = list(marginRight = &amp;quot;6px&amp;quot;),
          div(
            class = &amp;quot;bar&amp;quot;,
            style = list(width = width, backgroundColor = &amp;quot;#3F5661&amp;quot;)
          )
        )
        div(class = &amp;quot;bar-cell&amp;quot;, span(class = &amp;quot;number&amp;quot;, value), bar)
      }
    )
  )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s break that down step-by-step, with a focus on &lt;code&gt;covid_deaths&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First, we need to define some CSS. &lt;code&gt;reactable&lt;/code&gt; allows you to easily include CSS is RMarkdown documents, in chunks defined as &lt;code&gt;css&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;css&#34;&gt;&lt;code&gt;.bar-cell {
  display: flex;
  align-items: center;
}

.number {
  font-size: 13.5px;
  white-space: pre;
}

.bar-chart {
  flex-grow: 1;
  margin-left: 6px;
  height: 22px;
}

.bar {
  height: 100%;
}&lt;/code&gt;&lt;/pre&gt;
&lt;style type=&#34;text/css&#34;&gt;
.bar-cell {
  display: flex;
  align-items: center;
}

.number {
  font-size: 13.5px;
  white-space: pre;
}

.bar-chart {
  flex-grow: 1;
  margin-left: 6px;
  height: 22px;
}

.bar {
  height: 100%;
}
&lt;/style&gt;
&lt;p&gt;Now, let’s look at how we define &lt;code&gt;covid_deaths&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  covid_deaths = colDef(
    ### define the name
    name = &amp;quot;COVID-19 Deaths&amp;quot;,
    ### create a &amp;#39;cell&amp;#39; function
    cell = function(value) {
      ### define the bar width according to the specified value
      width &amp;lt;- paste0(value * 100 / max(data_for_table$covid_deaths), &amp;quot;%&amp;quot;)
      ### add a comma to the label
      value &amp;lt;- format(value, big.mark = &amp;quot;,&amp;quot;)
      ### justify and provide padding with width
      value &amp;lt;- format(value, width = 10, justify = &amp;quot;right&amp;quot;)
      ### create the barchart div
      bar &amp;lt;- div(
        ### with a class of &amp;#39;bar-chart&amp;#39;
        class = &amp;quot;bar-chart&amp;quot;,
        ### give the bar a margin
        style = list(marginRight = &amp;quot;6px&amp;quot;),
        ### create the *actual* bar, with the red economist color
        div(
          class = &amp;quot;bar&amp;quot;,
          style = list(width = width, backgroundColor = &amp;quot;#F15A3F&amp;quot;)
        )
      )
      ### bring it all together, with the &amp;#39;value&amp;#39; (number) preceding the bar itself
      div(class = &amp;quot;bar-cell&amp;quot;, span(class = &amp;quot;number&amp;quot;, value), bar)
    }
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates a table that looks like this:&lt;/p&gt;
&lt;div id=&#34;htmlwidget-8&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-8&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;country&#34;:[&#34;Austria&#34;,&#34;Belgium&#34;,&#34;Britain&#34;,&#34;France&#34;,&#34;Istanbul&#34;,&#34;Italy&#34;,&#34;Jakarta&#34;,&#34;Netherlands&#34;,&#34;New York City&#34;,&#34;Spain&#34;,&#34;Sweden&#34;],&#34;clean_range&#34;:[&#34;Mar 23rd-Apr 5th&#34;,&#34;Mar 23rd-Apr 26th&#34;,&#34;Mar 14th-May 8th&#34;,&#34;Mar 11th-Apr 28th&#34;,&#34;Mar 25th-May 12th&#34;,&#34;Feb 26th-Mar 31st&#34;,&#34;Mar 1st-Apr 30th&#34;,&#34;Mar 16th-May 10th&#34;,&#34;Mar 15th-Apr 25th&#34;,&#34;Mar 11th-May 5th&#34;,&#34;Mar 18th-Apr 28th&#34;],&#34;covid_deaths&#34;:[204,6335,40967,23627,1947,12109,381,5420,17195,25584,2703],&#34;excess_deaths&#34;:[722,7397,54686,26098,4254,24256,3370,9405,20780,31897,2933],&#34;perc&#34;:[0.282548476454294,0.856428281735839,0.749131404747102,0.90531841520423,0.457686882933709,0.499216688654354,0.113056379821958,0.576289207868155,0.827478344562079,0.802081700473399,0.921581997954313]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;country&#34;,&#34;name&#34;:&#34;Region / Country&#34;,&#34;type&#34;:&#34;character&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontWeight&#34;:&#34;400&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;clean_range&#34;,&#34;name&#34;:&#34;Time Period&#34;,&#34;type&#34;:&#34;character&#34;,&#34;style&#34;:{&#34;color&#34;:&#34;#3f5661&#34;,&#34;fontSize&#34;:&#34;12px&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;covid_deaths&#34;,&#34;name&#34;:&#34;COVID-19 Deaths&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontSize&#34;:&#34;14px&#34;,&#34;verticalAlign&#34;:&#34;center&#34;,&#34;align&#34;:&#34;left&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;},&#34;cell&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;       204&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;0.49796177411087%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     6,335&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;15.4636658774135%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    40,967&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;100%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    23,627&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;57.6732492005761%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     1,947&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;4.75260575585227%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    12,109&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;29.5579368760222%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;       381&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;0.930016842824713%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     5,420&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;13.230160861181%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    17,195&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;41.972807381551%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    25,584&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;62.4502648473161%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     2,703&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;6.59799350696902%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]}]},{&#34;accessor&#34;:&#34;excess_deaths&#34;,&#34;name&#34;:&#34;Total Excess Deaths&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontSize&#34;:&#34;14px&#34;,&#34;verticalAlign&#34;:&#34;center&#34;,&#34;align&#34;:&#34;left&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;},&#34;cell&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;       722&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;1.32026478440552%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     7,397&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;13.5263138646089%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    54,686&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;100%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    26,098&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;47.7233661266138%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     4,254&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;7.77895622279925%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    24,256&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;44.3550451669532%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     3,370&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;6.16245474161577%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     9,405&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;17.1981860073876%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    20,780&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;37.9987565373222%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    31,897&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;58.327542698314%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     2,933&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;5.36334710894927%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]}]},{&#34;accessor&#34;:&#34;perc&#34;,&#34;name&#34;:&#34;COVID-19 as % of Total&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndBol&#34;},&#34;headerStyle&#34;:{&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;textAlign&#34;:&#34;right&#34;},&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:0,&#34;percent&#34;:true},&#34;aggregated&#34;:{&#34;digits&#34;:0,&#34;percent&#34;:true}},&#34;header&#34;:&#34;\n      function(colInfo) {\n        return &#39;COVID-19 as&lt;br&gt;% of total&#39;\n      }&#34;,&#34;html&#34;:true,&#34;maxWidth&#34;:100,&#34;align&#34;:&#34;right&#34;}],&#34;defaultSortDesc&#34;:true,&#34;defaultSorted&#34;:[{&#34;id&#34;:&#34;excess_deaths&#34;,&#34;desc&#34;:true}],&#34;defaultPageSize&#34;:11,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:1,&#34;compact&#34;:true,&#34;showSortIcon&#34;:false,&#34;dataKey&#34;:&#34;7fed8502c33f575f68606f21c78d769a&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[&#34;tag.attribs.columns.4.header&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;add-a-title&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Add a title&lt;/h3&gt;
&lt;p&gt;Finally, we can add the table title and subtitle. We do so by storing the above table in our environment. (This is the final table code!)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table &amp;lt;- reactable(
  data_for_table,
  defaultSortOrder = &amp;#39;desc&amp;#39;,
  defaultSorted = &amp;#39;excess_deaths&amp;#39;,
  showSortIcon = FALSE,
  compact = TRUE,
  pagination = FALSE,
  defaultColDef = colDef(
    headerStyle = list(
      textAlign = &amp;quot;left&amp;quot;,
      fontSize = &amp;quot;11px&amp;quot;,
      lineHeight = &amp;quot;14px&amp;quot;,
      textTransform = &amp;quot;uppercase&amp;quot;,
      color = &amp;quot;#0c0c0c&amp;quot;,
      fontWeight = &amp;quot;500&amp;quot;,
      borderBottom = &amp;quot;2px solid #e9edf0&amp;quot;,
      paddingBottom = &amp;quot;3px&amp;quot;,
      verticalAlign = &amp;quot;bottom&amp;quot;,
      fontFamily = font_es
    ),
    style = list(
      fontFamily = font_es,
      fontSize = &amp;quot;14px&amp;quot;,
      verticalAlign = &amp;quot;center&amp;quot;,
      align = &amp;quot;left&amp;quot;
    )
  ),
  
  columns = list(
    country = colDef(
      name = &amp;quot;Region / Country&amp;quot;,
      style = list(fontFamily = font_es,
                   fontWeight = &amp;quot;400&amp;quot;)
    ),
    covid_deaths = colDef(
      name = &amp;quot;COVID-19 Deaths&amp;quot;,
      # align = &amp;quot;left&amp;quot;,
      cell = function(value) {
        width &amp;lt;- paste0(value * 100 / max(data_for_table$covid_deaths), &amp;quot;%&amp;quot;)
        value &amp;lt;- format(value, big.mark = &amp;quot;,&amp;quot;)
        # value &amp;lt;- str_pad(value, 6, pad = &amp;quot;&amp;quot;)
        value &amp;lt;- format(value, width = 10, justify = &amp;quot;right&amp;quot;)
        bar &amp;lt;- div(
          class = &amp;quot;bar-chart&amp;quot;,
          style = list(marginRight = &amp;quot;6px&amp;quot;),
          div(
            class = &amp;quot;bar&amp;quot;,
            style = list(width = width, backgroundColor = &amp;quot;#F15A3F&amp;quot;)
          )
        )
        div(class = &amp;quot;bar-cell&amp;quot;, span(class = &amp;quot;number&amp;quot;, value), bar)
      }
    ),
    excess_deaths = colDef(
      name = &amp;quot;Total Excess Deaths&amp;quot;,
      # align = &amp;quot;left&amp;quot;,
      cell = function(value) {
        width &amp;lt;-
          paste0(value * 100 / max(data_for_table$excess_deaths), &amp;quot;%&amp;quot;)
        value &amp;lt;- format(value, big.mark = &amp;quot;,&amp;quot;)
        value &amp;lt;- format(value, width = 10, justify = &amp;quot;right&amp;quot;)
        bar &amp;lt;- div(
          class = &amp;quot;bar-chart&amp;quot;,
          style = list(marginRight = &amp;quot;6px&amp;quot;),
          div(
            class = &amp;quot;bar&amp;quot;,
            style = list(width = width, backgroundColor = &amp;quot;#3F5661&amp;quot;)
          )
        )
        div(class = &amp;quot;bar-cell&amp;quot;, span(class = &amp;quot;number&amp;quot;, value), bar)
      }
    ),
    perc = colDef(
      html = TRUE,
      header = JS(&amp;quot;
      function(colInfo) {
        return &amp;#39;COVID-19 as&amp;lt;br&amp;gt;% of total&amp;#39;
      }&amp;quot;),
      name = &amp;quot;COVID-19 as % of Total&amp;quot;,
      align = &amp;quot;right&amp;quot;,
      maxWidth = 100,
      format = colFormat(percent = TRUE, digits = 0),
      style = list(fontFamily =  font_es_bold),
      headerStyle = list(
        fontSize = &amp;quot;11px&amp;quot;,
        lineHeight = &amp;quot;14px&amp;quot;,
        textTransform = &amp;quot;uppercase&amp;quot;,
        color = &amp;quot;#0c0c0c&amp;quot;,
        fontWeight = &amp;quot;500&amp;quot;,
        borderBottom = &amp;quot;2px solid #e9edf0&amp;quot;,
        paddingBottom = &amp;quot;3px&amp;quot;,
        verticalAlign = &amp;quot;bottom&amp;quot;,
        fontFamily = font_es,
        textAlign = &amp;quot;right&amp;quot;
      )
    ),
    clean_range = colDef(
      name = &amp;quot;Time Period&amp;quot;,
      style = list(
        color = &amp;#39;#3f5661&amp;#39;,
        fontSize = &amp;#39;12px&amp;#39;,
        fontFamily = font_es
      )
    )
  ),
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we can include a title and subtitle above the table. We use some &lt;code&gt;htmltools&lt;/code&gt; functions to create divs, headers, and paragraphs.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;div(
    div(
      h2(&amp;quot;Excess mortality since region/country’s first 50 covid deaths&amp;quot;),
      p(
        ### create the &amp;#39;Updated on ...&amp;#39; and make it dynamic
        paste0(
          &amp;quot;Updated on &amp;quot;, format(Sys.Date(), &amp;quot;%B &amp;quot;),
          append_date_suffix(as.numeric(format(Sys.Date(), &amp;quot;%d&amp;quot;))), &amp;quot; &amp;quot;,
          strftime(Sys.time(), format = &amp;quot;%H:%M&amp;quot;), &amp;quot; UCT&amp;quot;
        )
      ),
    ),
    table)&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;div&gt;
&lt;h2&gt;Excess mortality since region/country’s first 50 covid deaths&lt;/h2&gt;
&lt;p&gt;Updated on May 24th 12:25 UCT&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;htmlwidget-9&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-9&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;country&#34;:[&#34;Austria&#34;,&#34;Belgium&#34;,&#34;Britain&#34;,&#34;France&#34;,&#34;Istanbul&#34;,&#34;Italy&#34;,&#34;Jakarta&#34;,&#34;Netherlands&#34;,&#34;New York City&#34;,&#34;Spain&#34;,&#34;Sweden&#34;],&#34;clean_range&#34;:[&#34;Mar 23rd-Apr 5th&#34;,&#34;Mar 23rd-Apr 26th&#34;,&#34;Mar 14th-May 8th&#34;,&#34;Mar 11th-Apr 28th&#34;,&#34;Mar 25th-May 12th&#34;,&#34;Feb 26th-Mar 31st&#34;,&#34;Mar 1st-Apr 30th&#34;,&#34;Mar 16th-May 10th&#34;,&#34;Mar 15th-Apr 25th&#34;,&#34;Mar 11th-May 5th&#34;,&#34;Mar 18th-Apr 28th&#34;],&#34;covid_deaths&#34;:[204,6335,40967,23627,1947,12109,381,5420,17195,25584,2703],&#34;excess_deaths&#34;:[722,7397,54686,26098,4254,24256,3370,9405,20780,31897,2933],&#34;perc&#34;:[0.282548476454294,0.856428281735839,0.749131404747102,0.90531841520423,0.457686882933709,0.499216688654354,0.113056379821958,0.576289207868155,0.827478344562079,0.802081700473399,0.921581997954313]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;country&#34;,&#34;name&#34;:&#34;Region / Country&#34;,&#34;type&#34;:&#34;character&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontWeight&#34;:&#34;400&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;clean_range&#34;,&#34;name&#34;:&#34;Time Period&#34;,&#34;type&#34;:&#34;character&#34;,&#34;style&#34;:{&#34;color&#34;:&#34;#3f5661&#34;,&#34;fontSize&#34;:&#34;12px&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;covid_deaths&#34;,&#34;name&#34;:&#34;COVID-19 Deaths&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontSize&#34;:&#34;14px&#34;,&#34;verticalAlign&#34;:&#34;center&#34;,&#34;align&#34;:&#34;left&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;},&#34;cell&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;       204&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;0.49796177411087%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     6,335&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;15.4636658774135%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    40,967&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;100%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    23,627&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;57.6732492005761%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     1,947&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;4.75260575585227%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    12,109&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;29.5579368760222%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;       381&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;0.930016842824713%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     5,420&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;13.230160861181%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    17,195&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;41.972807381551%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    25,584&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;62.4502648473161%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     2,703&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;6.59799350696902%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]}]},{&#34;accessor&#34;:&#34;excess_deaths&#34;,&#34;name&#34;:&#34;Total Excess Deaths&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontSize&#34;:&#34;14px&#34;,&#34;verticalAlign&#34;:&#34;center&#34;,&#34;align&#34;:&#34;left&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;},&#34;cell&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;       722&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;1.32026478440552%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     7,397&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;13.5263138646089%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    54,686&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;100%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    26,098&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;47.7233661266138%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     4,254&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;7.77895622279925%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    24,256&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;44.3550451669532%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     3,370&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;6.16245474161577%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     9,405&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;17.1981860073876%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    20,780&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;37.9987565373222%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    31,897&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;58.327542698314%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     2,933&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;5.36334710894927%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]}]},{&#34;accessor&#34;:&#34;perc&#34;,&#34;name&#34;:&#34;COVID-19 as % of Total&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndBol&#34;},&#34;headerStyle&#34;:{&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;textAlign&#34;:&#34;right&#34;},&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:0,&#34;percent&#34;:true},&#34;aggregated&#34;:{&#34;digits&#34;:0,&#34;percent&#34;:true}},&#34;header&#34;:&#34;\n      function(colInfo) {\n        return &#39;COVID-19 as&lt;br&gt;% of total&#39;\n      }&#34;,&#34;html&#34;:true,&#34;maxWidth&#34;:100,&#34;align&#34;:&#34;right&#34;}],&#34;defaultSortDesc&#34;:true,&#34;defaultSorted&#34;:[{&#34;id&#34;:&#34;excess_deaths&#34;,&#34;desc&#34;:true}],&#34;defaultPageSize&#34;:11,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:1,&#34;compact&#34;:true,&#34;showSortIcon&#34;:false,&#34;dataKey&#34;:&#34;7fed8502c33f575f68606f21c78d769a&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[&#34;tag.attribs.columns.4.header&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;Yikes! Those font sizes don’t quite line up with &lt;em&gt;The Economist&lt;/em&gt;’s. Let’s add classes to our divs to match their style.&lt;/p&gt;
&lt;pre class=&#34;css&#34;&gt;&lt;code&gt;.table {
  margin: 0 auto;
  width: 675px;
}

.tableTitle {
  margin: 6px 0;
  font-size: 16px;
  font-family: &amp;#39;Econ Sans Cnd&amp;#39;
}

.tableTitle h2 {
  font-size: 16px;
  font-weight: bold;
  font-family: &amp;#39;Econ Sans Cnd&amp;#39;
}

.tableTitle p {
  font-size: 14px;
  font-weight: 500;
}&lt;/code&gt;&lt;/pre&gt;
&lt;style type=&#34;text/css&#34;&gt;
.table {
  margin: 0 auto;
  width: 675px;
}

.tableTitle {
  margin: 6px 0;
  font-size: 16px;
  font-family: &#39;Econ Sans Cnd&#39;
}

.tableTitle h2 {
  font-size: 16px;
  font-weight: bold;
  font-family: &#39;Econ Sans Cnd&#39;
}

.tableTitle p {
  font-size: 14px;
  font-weight: 500;
}
&lt;/style&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;div(class = &amp;quot;tableTitle&amp;quot;,
    div(
      class = &amp;quot;title&amp;quot;,
      h2(&amp;quot;Excess mortality since region/country’s first 50 covid deaths&amp;quot;),
      p(
        paste0(&amp;quot;Updated on &amp;quot;, format(Sys.Date(),&amp;quot;%B &amp;quot;),
          append_date_suffix(as.numeric(format(Sys.Date(), &amp;quot;%d&amp;quot;))), &amp;quot; &amp;quot;,
          strftime(Sys.time(), format = &amp;quot;%H:%M&amp;quot;), &amp;quot; UCT&amp;quot;
        )
      ),
    ),
    table)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;tableTitle&#34;&gt;
&lt;div class=&#34;title&#34;&gt;
&lt;h2&gt;Excess mortality since region/country’s first 50 covid deaths&lt;/h2&gt;
&lt;p&gt;Updated on May 24th 12:25 UCT&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;htmlwidget-10&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-10&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;country&#34;:[&#34;Austria&#34;,&#34;Belgium&#34;,&#34;Britain&#34;,&#34;France&#34;,&#34;Istanbul&#34;,&#34;Italy&#34;,&#34;Jakarta&#34;,&#34;Netherlands&#34;,&#34;New York City&#34;,&#34;Spain&#34;,&#34;Sweden&#34;],&#34;clean_range&#34;:[&#34;Mar 23rd-Apr 5th&#34;,&#34;Mar 23rd-Apr 26th&#34;,&#34;Mar 14th-May 8th&#34;,&#34;Mar 11th-Apr 28th&#34;,&#34;Mar 25th-May 12th&#34;,&#34;Feb 26th-Mar 31st&#34;,&#34;Mar 1st-Apr 30th&#34;,&#34;Mar 16th-May 10th&#34;,&#34;Mar 15th-Apr 25th&#34;,&#34;Mar 11th-May 5th&#34;,&#34;Mar 18th-Apr 28th&#34;],&#34;covid_deaths&#34;:[204,6335,40967,23627,1947,12109,381,5420,17195,25584,2703],&#34;excess_deaths&#34;:[722,7397,54686,26098,4254,24256,3370,9405,20780,31897,2933],&#34;perc&#34;:[0.282548476454294,0.856428281735839,0.749131404747102,0.90531841520423,0.457686882933709,0.499216688654354,0.113056379821958,0.576289207868155,0.827478344562079,0.802081700473399,0.921581997954313]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;country&#34;,&#34;name&#34;:&#34;Region / Country&#34;,&#34;type&#34;:&#34;character&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontWeight&#34;:&#34;400&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;clean_range&#34;,&#34;name&#34;:&#34;Time Period&#34;,&#34;type&#34;:&#34;character&#34;,&#34;style&#34;:{&#34;color&#34;:&#34;#3f5661&#34;,&#34;fontSize&#34;:&#34;12px&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;covid_deaths&#34;,&#34;name&#34;:&#34;COVID-19 Deaths&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontSize&#34;:&#34;14px&#34;,&#34;verticalAlign&#34;:&#34;center&#34;,&#34;align&#34;:&#34;left&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;},&#34;cell&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;       204&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;0.49796177411087%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     6,335&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;15.4636658774135%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    40,967&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;100%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    23,627&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;57.6732492005761%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     1,947&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;4.75260575585227%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    12,109&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;29.5579368760222%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;       381&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;0.930016842824713%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     5,420&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;13.230160861181%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    17,195&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;41.972807381551%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    25,584&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;62.4502648473161%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     2,703&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;6.59799350696902%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]}]},{&#34;accessor&#34;:&#34;excess_deaths&#34;,&#34;name&#34;:&#34;Total Excess Deaths&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontSize&#34;:&#34;14px&#34;,&#34;verticalAlign&#34;:&#34;center&#34;,&#34;align&#34;:&#34;left&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;},&#34;cell&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;       722&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;1.32026478440552%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     7,397&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;13.5263138646089%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    54,686&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;100%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    26,098&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;47.7233661266138%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     4,254&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;7.77895622279925%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    24,256&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;44.3550451669532%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     3,370&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;6.16245474161577%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     9,405&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;17.1981860073876%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    20,780&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;37.9987565373222%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    31,897&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;58.327542698314%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     2,933&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;5.36334710894927%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]}]},{&#34;accessor&#34;:&#34;perc&#34;,&#34;name&#34;:&#34;COVID-19 as % of Total&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndBol&#34;},&#34;headerStyle&#34;:{&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;textAlign&#34;:&#34;right&#34;},&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:0,&#34;percent&#34;:true},&#34;aggregated&#34;:{&#34;digits&#34;:0,&#34;percent&#34;:true}},&#34;header&#34;:&#34;\n      function(colInfo) {\n        return &#39;COVID-19 as&lt;br&gt;% of total&#39;\n      }&#34;,&#34;html&#34;:true,&#34;maxWidth&#34;:100,&#34;align&#34;:&#34;right&#34;}],&#34;defaultSortDesc&#34;:true,&#34;defaultSorted&#34;:[{&#34;id&#34;:&#34;excess_deaths&#34;,&#34;desc&#34;:true}],&#34;defaultPageSize&#34;:11,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:1,&#34;compact&#34;:true,&#34;showSortIcon&#34;:false,&#34;dataKey&#34;:&#34;7fed8502c33f575f68606f21c78d769a&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[&#34;tag.attribs.columns.4.header&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;Let’s compare that to the table we’re attempting to replicate. Note that some of the data has changed in the time between &lt;em&gt;The Economist&lt;/em&gt; published their table and I created mine.&lt;/p&gt;
&lt;div style=&#34;text-align: center&#34;&gt;
&lt;p&gt;&lt;img width = 100% src = img/econ-table.png&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Create Dumbbell Plots to Visualize Group Differences in R</title>
      <link>/post/dumbbell-plots/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/post/dumbbell-plots/</guid>
      <description>




  
  











&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/post/dumbbell-plots/featured_hud3f906394e33c42b903908d2e33c2bfb_211763_2000x2000_fit_q100_lanczos.jpg&#34; &gt;


  &lt;img data-src=&#34;/post/dumbbell-plots/featured_hud3f906394e33c42b903908d2e33c2bfb_211763_2000x2000_fit_q100_lanczos.jpg&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2329&#34; height=&#34;1387&#34;&gt;
&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;The coronavirus (also known as COVID-19) is a pandemic. As of this writing, nearly 
&lt;a href=&#34;https://www.worldometers.info/coronavirus/coronavirus-death-toll/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;6000&lt;/a&gt; people have died and another 
&lt;a href=&#34;https://www.worldometers.info/coronavirus/coronavirus-death-toll/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;150,000&lt;/a&gt; have been infected. All signs seem to show that the virus is only growing.&lt;/p&gt;
&lt;p&gt;But some groups are less worried about COVID-19 than others. Recent 
&lt;a href=&#34;https://poll.qu.edu/national/release-detail?ReleaseID=3657#.XmaSrM7okEs.twitter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;polling&lt;/a&gt; from Quinnipiac University suggests that worries about coronavirus are related to one’s partisan identity, age, and race.&lt;/p&gt;
&lt;p&gt;Let’s visualize that to see just how stark the differences are. I use dumbbell dot plots because they’re some of the most powerful tools for visualizing differences between two groups (e.g. Republicans and Democrats).&lt;/p&gt;
&lt;h2 id=&#34;political-affiliation&#34;&gt;Political Affiliation&lt;/h2&gt;
&lt;p&gt;Republicans tend to be significantly less worried about coronavirus than Democrats. This is true in two regards. First, with respect to &lt;em&gt;concern for becoming infected&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/partisan-worry.jpg&#34; alt=&#34;partisan-worry&#34;&gt;&lt;/p&gt;
&lt;p&gt;It’s also true when we look at concern than COVID-19 will &lt;em&gt;disrupt an individual’s life&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/partisan-disrupt.jpg&#34; alt=&#34;partisan-disrupt&#34;&gt;&lt;/p&gt;
&lt;p&gt;Looking at the first plot, we notice that Republicans are &lt;strong&gt;3x more likely&lt;/strong&gt; than Democrats to say that they are ’not concerned at all’ by the prospect of coronavirus infecting them or someone they know. By contrast, Democrats are nearly &lt;strong&gt;3x as likely&lt;/strong&gt; as Republicans to say that they are ‘very concerned’ by the same risk.&lt;/p&gt;
&lt;p&gt;The second plot shows us similar trends for fears of disruption: 3 in 4 Democrats are concerned (very or somewhat) that COVID-19 will disrupt their daily lives, compared to only 38% of Republicans. While 26% of Democrats are not worried about disruption, the same is true for 61% of Republicans.&lt;/p&gt;
&lt;h2 id=&#34;age&#34;&gt;Age&lt;/h2&gt;
&lt;p&gt;There is also a relationship between age and fears related to the coronavirus.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/age-disrupt.jpg&#34; alt=&#34;age-disrupt&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/age-worry.jpg&#34; alt=&#34;age-worry&#34;&gt;&lt;/p&gt;
&lt;p&gt;These plots show that there are significant differences in worry by age, but that fears of disruption are felt more universally than fears of infection. The first plot shows that &lt;em&gt;every age group&lt;/em&gt; fears that COVID-19 will disrupt their daily lives; although younger people express this sentiment less frequently. The second plot &lt;strong&gt;the majority of people under age 50 are unconcerned by the prospect of COVID-19 infection&lt;/strong&gt;. The opposite is true for older respondents; those aged 65 years and old are &lt;strong&gt;significantly&lt;/strong&gt; more likely to be concerned by the risk of infection (62% vs 37%).&lt;/p&gt;
&lt;h2 id=&#34;why-dumbbell-plots&#34;&gt;Why Dumbbell Plots?&lt;/h2&gt;
&lt;p&gt;Dumbbell plots are an alternative to grouped barcharts. Like barcharts, they show differences between populations and they more powerfully represent the &lt;em&gt;distances between two groups&lt;/em&gt;. They are frequently used by survey research firms such as the Pew Research Center, as seen in this 
&lt;a href=&#34;https://twitter.com/pewresearch/status/1238345807348334593/photo/1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;example&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/pew.jpg&#34; alt=&#34;pew&#34;&gt;&lt;/p&gt;
&lt;p&gt;While a barchart would require eight bars to visualize each datapoint above, a dumbbell dot plot shows eight dots &lt;em&gt;on four lines&lt;/em&gt;, reducing clutter and emphasizing the differences &lt;em&gt;between groups&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Here’s another example, this time from 
&lt;a href=&#34;https://www.axios.com/trumps-disapproval-rate-is-up-in-every-state-2495232720.html?utm_source=twitter&amp;amp;utm_medium=social&amp;amp;utm_campaign=organic&amp;amp;utm_content=infographic&amp;amp;utm_term=politics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Axios&lt;/a&gt; (visualizing changes in presidential disapproval between January and October 2017):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/axios.jpg&#34; alt=&#34;axios&#34;&gt;&lt;/p&gt;
&lt;p&gt;This pseudo-dumbbell plot (dumbbells with weird endpoints; don’t pick up that side!) has 50 ‘groups’ (US states), but only two &lt;em&gt;outcomes&lt;/em&gt; (January and October). A dumbbell plot is &lt;em&gt;far&lt;/em&gt; superior to a grouped bar chart in this case because it emphasizes the difference is between two periods of time, and it does so with fewer objects (50 lines rather than 100 bars) than a barchart would use.&lt;/p&gt;
&lt;p&gt;One key lesson from the examples above: If the &lt;em&gt;comparison&lt;/em&gt; of interest is between two groups (e.g. Republicans and Democrats), or if the &lt;em&gt;outcome&lt;/em&gt; of interest is two-fold (e.g. ‘concerned’ and ‘not concerned’), dot plots are a superior way to visualize your data.&lt;/p&gt;
&lt;h2 id=&#34;lets-make-it-in-r&#34;&gt;Let’s Make It In R!&lt;/h2&gt;
&lt;p&gt;Now it&amp;rsquo;s time to make your own dumbbell dot plot. We’ll be creating this viz:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/partisan-worry.jpg&#34; alt=&#34;partisan-worry&#34;&gt;&lt;/p&gt;
&lt;p&gt;For reference, the data I’m using looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/table.jpg&#34; alt=&#34;table&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Pretty simple, right? 
&lt;a href=&#34;https://poll.qu.edu/national/release-detail?ReleaseID=3657#.XmaSrM7okEs.twitter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;It comes from here, by the way.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The process relies on Bob Rudis’s &lt;code&gt;ggalt&lt;/code&gt; package and the &lt;code&gt;geom_dumbbell&lt;/code&gt; function, which does most of the heavy lifting. This tutorial is mostly a step-by-step recreation of Rudis’s code 
&lt;a href=&#34;https://rud.is/b/2016/04/17/ggplot2-exercising-with-ggalt-dumbbells/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;found here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For convenience, let&amp;rsquo;s define a few things before we get started:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;blue &amp;lt;- &amp;quot;#0171CE&amp;quot;
red &amp;lt;- &amp;quot;#DE4433&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition to the colors, we create a hack-y function which allows us to selectively label points (thanks to Bob Rudis for 
&lt;a href=&#34;https://rud.is/b/2016/04/17/ggplot2-exercising-with-ggalt-dumbbells/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt;, again):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;percent_first &amp;lt;- function(x) {
  x &amp;lt;- sprintf(&amp;quot;%d%%&amp;quot;, round(x*100))
  x[2:length(x)] &amp;lt;- sub(&amp;quot;%$&amp;quot;, &amp;quot;&amp;quot;, x[2:length(x)])
  x
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-1-barebones&#34;&gt;Step 1: Barebones&lt;/h3&gt;
&lt;p&gt;We begin with a basic &lt;code&gt;ggplot&lt;/code&gt; object. In &lt;code&gt;geom_segment&lt;/code&gt;, we define the pseudo-grid lines (one for each ‘level’ of concern).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;library(ggplot2) 
library(ggalt)   
library(tidyverse)

ggplot() +
  geom_segment(data=infected, aes(y=concerned, yend=concerned, x=0, xend=.5),
               color=&amp;quot;#b2b2b2&amp;quot;, size=0.15)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, &lt;code&gt;geom_segment&lt;/code&gt; creates grey lines with a size of 0.15. The lines span from 0 to 0.5. This changes according to your data; because the largest number we are dealing with is .43 (representing 43% of Democrats), our bound on the right side can be 0.5; this also leaves room for the difference column which we create later.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/process-0.jpg&#34; alt=&#34;process-0&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then, &lt;code&gt;geom_dumbbell&lt;/code&gt; reads in our data and creates the dumbbells: we specify the &lt;em&gt;beginning&lt;/em&gt; (&lt;code&gt;x&lt;/code&gt;) of each dumbbell to represent Republicans and the &lt;em&gt;end&lt;/em&gt; (&lt;code&gt;xend&lt;/code&gt;) to correspond to Democrats. Other specifications affect the accompanying line and points.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;geom_dumbbell(data=infected, aes(y=concerned, x=rep, xend=dem),
                           size=1.5, color=&amp;quot;#b2b2b2&amp;quot;, size_x=3, size_xend = 3,
                           colour_x = red, colour_xend = blue)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That code creates the following plot:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/process-1.jpg&#34; alt=&#34;process-1&#34;&gt;Already, we can begin to see the barebones for the finished version: each dumbbell represents a level of concern, and visualizes Republicans and Democrats’ proportions for that level.&lt;/p&gt;
&lt;h3 id=&#34;step-2-labels&#34;&gt;Step 2: Labels&lt;/h3&gt;
&lt;p&gt;The next step is creating the “Republican” and “Democrat” labels (in case colors aren’t enough, or the image is seen in black and white!).&lt;/p&gt;
&lt;p&gt;We can create labels with the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;geom_text(data=filter(infected, concerned==&amp;quot;Very concerned&amp;quot;),
          aes(x=dem, y=concerned, label=&amp;quot;Democrats&amp;quot;),
          color=blue, size=3, vjust=-1.5, fontface=&amp;quot;bold&amp;quot;, family=&amp;quot;Lato&amp;quot;) +
geom_text(data=filter(infected, concerned==&amp;quot;Very concerned&amp;quot;),
          aes(x=rep, y=concerned, label=&amp;quot;Republicans&amp;quot;),
          color=red, size=3, vjust=-1.5, fontface=&amp;quot;bold&amp;quot;, family=&amp;quot;Lato&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code is hopefully quite intuitive. Since we are only showing the labels once, we specify a filter in the &lt;code&gt;data&lt;/code&gt; argument of &lt;code&gt;geom_text&lt;/code&gt;. If we instead wanted to show the labels for only the bottom level of concern, we would specify &lt;code&gt;data=filter(infected, concerned==&amp;quot;Not concerned at all”)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We label each point at its respective political affiliation, and we specify color according to the point color. The rest is just minor beautification for the text.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/process-2.jpg&#34; alt=&#34;process-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;We also have to add direct labels for values, so that the exact percentages for each group are clear:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;geom_text(data=infected, aes(x=rep, y=concerned, label=percent_first(rep)),
          color=red, size=2.75, vjust=2.5, family=&amp;quot;Lato&amp;quot;) +
geom_text(data=infected, color=blue, size=2.75, vjust=2.5, family=&amp;quot;Lato&amp;quot;,
          aes(x=dem, y=concerned, label=percent_first(dem)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we utilize the function &lt;code&gt;percent_first&lt;/code&gt; we defined earlier, because we only want percentages to appear on the first numbers (to reduce clutter). The rest of the labels are just numbers which represent percentages. The syntax here is simple syntax that should be familiar to  &lt;code&gt;ggplot&lt;/code&gt; users. It creates this output:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/process-3.jpg&#34; alt=&#34;process-3&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;step-3-a-differences-column&#34;&gt;Step 3: A Differences Column&lt;/h3&gt;
&lt;p&gt;Finally, we want to help our viewers see &lt;em&gt;how stark&lt;/em&gt; the differences between Democrats and Republicans really is. We do so with a differences column.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;geom_rect(data=infected, aes(xmin=.5, xmax=.6, ymin=-Inf, ymax=Inf), fill=&amp;quot;grey&amp;quot;) +
geom_text(data=infected, aes(label=paste0(diff*100, &amp;quot;%&amp;quot;), y=concerned, x=.55), fontface=&amp;quot;bold&amp;quot;, size=3, family=&amp;quot;Lato&amp;quot;) +
geom_text(data=filter(infected, concerned==&amp;quot;Very concerned&amp;quot;), 
            aes(x=.55, y=concerned, label=&amp;quot;Difference&amp;quot;),
            color=&amp;quot;black&amp;quot;, size=3.1, vjust=-2, fontface=&amp;quot;bold&amp;quot;, family=&amp;quot;Lato&amp;quot;) +
scale_x_continuous(expand=c(0,0), limits=c(0, .625)) +
scale_y_discrete(expand=c(0.2,0))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we first create a grey rectangle with &lt;code&gt;geom_rect&lt;/code&gt;. It spans the entire chart vertically, hence why &lt;code&gt;ymin&lt;/code&gt; and &lt;code&gt;ymax&lt;/code&gt; range from negative to positive infinity. Next, we create labels according to the differences column. We position each of them according to the degree of concern (our y-axis). Finally, we expand the bounds of the chart so its a bit prettier:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/process-4.jpg&#34; alt=&#34;process-4&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;step-4-titles-labels--captions&#34;&gt;Step 4: Titles, Labels &amp;amp; Captions&lt;/h3&gt;
&lt;p&gt;Finally, let’s add our title, subtitle, caption, and axis labels:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;labs(x=NULL, y=NULL, title=&amp;quot;Republicans are less worried about COVID-19&amp;quot;,
       subtitle=&amp;quot;How concerned are you that you or someone 
								 you know will be infected with the coronavirus?&amp;quot;,
       caption=&amp;quot;Source: Quinnipiac University Poll, March 9, 2020. Q27
								\n\nDesign: Connor Rothschild&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figures/process-5.jpg&#34; alt=&#34;process-5&#34;&gt;&lt;/p&gt;
&lt;p&gt;That’s our plot! Too bad its kinda ugly. Let’s fix that in our final step.&lt;/p&gt;
&lt;h3 id=&#34;step-5-beautification&#34;&gt;Step 5: Beautification&lt;/h3&gt;
&lt;p&gt;Beautification occurs using the &lt;code&gt;theme&lt;/code&gt; argument.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;theme_bw(base_family=&amp;quot;Lato&amp;quot;) +
theme(
  panel.grid.major=element_blank(),
  panel.grid.minor=element_blank(),
  panel.border=element_blank(),
  axis.ticks=element_blank(),
  axis.text.x=element_blank(),
  plot.title=element_text(size = 16, face=&amp;quot;bold&amp;quot;),
  plot.title.position = &amp;quot;plot&amp;quot;,
  plot.subtitle=element_text(face=&amp;quot;italic&amp;quot;, size=12, margin=margin(b=12)),
  plot.caption=element_text(size=8, margin=margin(t=12), color=&amp;quot;#7a7d7e&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After specifying our base &lt;code&gt;ggplot&lt;/code&gt; theme, &lt;code&gt;theme_bw&lt;/code&gt;, we use &lt;code&gt;theme()&lt;/code&gt; to specify a whole host of arguments.&lt;/p&gt;
&lt;p&gt;To simplify, the above code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Removes grid lines (&lt;code&gt;panel.grid.major&lt;/code&gt;, &lt;code&gt;panel.grid.minor&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Removes the panel border (&lt;code&gt;panel.border&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Removes axis ticks and axis text (&lt;code&gt;axis.ticks&lt;/code&gt;, &lt;code&gt;axis.text.x&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Positions the axis plot, subtitle, and caption, and styles them as well (&lt;code&gt;plot.title&lt;/code&gt;, &lt;code&gt;plot.title.position&lt;/code&gt;,&lt;code&gt;plot.subtitle&lt;/code&gt;,&lt;code&gt;plot.caption&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our final output:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/process-6.jpg&#34; alt=&#34;process-6&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;to-summarize&#34;&gt;To Summarize&lt;/h2&gt;
&lt;p&gt;Our process looked like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/process-gif.gif&#34; alt=&#34;process-gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;The code for the above visualizations, as well as the underlying datasets and outputs, can be found 
&lt;a href=&#34;https://github.com/connorrothschild/R/tree/master/covid&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Trends in Refugee Acceptance, 2002 to 2019</title>
      <link>/post/refugee-trends/</link>
      <pubDate>Sat, 01 Feb 2020 00:00:00 +0000</pubDate>
      <guid>/post/refugee-trends/</guid>
      <description>




  
  











&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/post/refugee-trends/featured_hu49160f3b2aa206b95f3283696ca52509_209771_2000x2000_fit_lanczos_2.png&#34; &gt;


  &lt;img data-src=&#34;/post/refugee-trends/featured_hu49160f3b2aa206b95f3283696ca52509_209771_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1790&#34; height=&#34;1264&#34;&gt;
&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;In 
&lt;a href=&#34;https://connorrothschild.github.io/map-missing-migrants/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;previous projects&lt;/a&gt;, I&amp;rsquo;ve explored how migration has unfolded across &lt;em&gt;places&lt;/em&gt;: where migrants travel, where they go missing, and where their journeys come to a fatal end.&lt;/p&gt;
&lt;p&gt;Next, I wanted to see how &lt;em&gt;host countries&lt;/em&gt; have approached the migrant and refugee crisis, with a particular focus on the United States. In my mind, an effective visualization of the U.S.&amp;lsquo;s response to an increasing number of refugees needs to present two things: how refugee acceptance has changed &lt;em&gt;over time&lt;/em&gt; and how refugee acceptance differs &lt;em&gt;across states.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;An effective way to present both of these trends is with a map of 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Small_multiple&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;small multiple&lt;/a&gt; line charts. For aesthetic purposes, it would also be nice to arrange these multiples in a shape that vaguely resembles the United States. (This also makes it easier for readers to find their state of interest.)&lt;/p&gt;
&lt;p&gt;There are examples of these types of small multiple maps across the internet. The Washington Post&amp;rsquo;s 
&lt;a href=&#34;https://www.washingtonpost.com/graphics/politics/how-fair-is-the-electoral-college/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;overview of the electoral college&lt;/a&gt; was visualized in the following way:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/wapo.png&#34; alt=&#34;Washington Post small multiples map of electoral college data&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can also find an overview of &lt;em&gt;why&lt;/em&gt; they work, and some additional examples, on the 
&lt;a href=&#34;https://policyviz.com/2016/05/19/small-multiple-tile-grid-map/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PolicyViz&lt;/a&gt; blog:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/policyviz.jpg&#34; alt=&#34;Policy Viz&amp;rsquo;s small multiples of overall voting results over time&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;making-it-in-r&#34;&gt;Making it in R&lt;/h2&gt;
&lt;p&gt;The process of creating a small multiple tile grid map is relatively easy in R (like most things done in R). It is considerably more difficult in D3.js; if you&amp;rsquo;re interested in that type of thing, you can take a look at 
&lt;a href=&#34;https://bl.ocks.org/jinniluo/a95b27b1f4ea65ae94ab6ca3fcfb5934#index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this code&lt;/a&gt; for inspiration.&lt;/p&gt;
&lt;h4 id=&#34;step-1-build-the-basic-line-chart&#34;&gt;Step 1: Build the basic line chart&lt;/h4&gt;
&lt;p&gt;The first step (after obnoxious data 
&lt;a href=&#34;https://raw.githubusercontent.com/connorrothschild/R/master/refugee-trends/merge.R&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;merging&lt;/a&gt; and cleaning) is getting a feel for the basic line chart. To do so, we can visualize the macro-level trends of refugee acceptance across &lt;em&gt;all states&lt;/em&gt; combined.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;data %&amp;gt;% 
  group_by(region_name_3) %&amp;gt;% 
  summarise(textbox37 = sum(textbox37)) %&amp;gt;% 
  ggplot(aes(x = region_name_3, y = textbox37)) +
  geom_line() +
  labs(title = &amp;quot;Refugee Acceptance on the Decline&amp;quot;,
       subtitle = &amp;quot;Number of refugees accepted annually, 2002 - 2019&amp;quot;,
       x = element_blank(),
       y = element_blank()) +
  scale_y_continuous(labels = scales::comma_format()) +
  scale_x_continuous(breaks = c(2002, 2019))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figures/macro.jpg&#34; alt=&#34;Line chart of refugee acceptance per year; the line is gradually sloping downward&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now we have the answer to our first question: &lt;strong&gt;how has refugee acceptance changed over time?&lt;/strong&gt; The answer: pretty drastically. The US accepted nearly 100,000 refugees in 2016; 2 years later, that number was barely over 20,000.&lt;/p&gt;
&lt;h4 id=&#34;step-2-make-small-multiples&#34;&gt;Step 2: Make small multiples&lt;/h4&gt;
&lt;p&gt;Next, we make 50 of these lines: one for each US state. We do so using Ryan Hafen&amp;rsquo;s &lt;code&gt;geofacet&lt;/code&gt; 
&lt;a href=&#34;https://hafen.github.io/geofacet/rd.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;package&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s as simple as adding one line of code to our previous plot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;facet_geo(~ state)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This makes a plot that looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/firsttry.jpg&#34; alt=&#34;first try&#34;&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s alright, but not perfect! There are a few improvements we can definitely make.&lt;/p&gt;
&lt;p&gt;For one, the axis labels overlap. We already know the range of years is between 2002 and 2019 (its in our subtitle!). So we can remove our x axis labels.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;theme(
  axis.text.x = element_blank(),
  axis.ticks.x = element_blank()
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Second, The axis lines (on both axes) seem unnecessary and (the x-axis specifically) can sometimes conceal trends for those states with lower values. Let&amp;rsquo;s remove those too!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;theme(
  axis.line.x = element_blank(),
  axis.line.y = element_blank()
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, I don&amp;rsquo;t like huge gray boxes around my axis labels. Could we make those transparent?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;theme(
    strip.background = element_rect(color = &amp;quot;white&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add it all together (and tweak the font size), and we get this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;data %&amp;gt;% 
  group_by(region_name_3, state) %&amp;gt;% 
  summarise(textbox37 = sum(textbox37)) %&amp;gt;% 
  ggplot(aes(x = region_name_3, y = textbox37)) +
  geom_line(color = &amp;quot;black&amp;quot;) +
  scale_x_continuous(breaks = c(2002,2019)) +
  scale_y_continuous(breaks = c(0,12000)) +
  facet_geo(~ state, grid = &amp;quot;us_state_grid1&amp;quot;) +
  labs(title = &amp;quot;Refugee Acceptance on the Decline&amp;quot;,
       subtitle = &amp;quot;Number of refugees accepted annually, 2002 - 2019&amp;quot;,
       x = element_blank(),
       y = element_blank()) +
  theme(
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.line.x = element_blank(),
    axis.line.y = element_blank(),
    plot.title = element_text(size = 24),
    plot.subtitle = element_text(size = 18),
    strip.background = element_rect(color = &amp;quot;white&amp;quot;)
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figures/secondtry.jpg&#34; alt=&#34;secondtry&#34;&gt;&lt;/p&gt;
&lt;p&gt;Pretty good! Much better. But we can add some elements to take our visualization to the next level.&lt;/p&gt;
&lt;p&gt;Because our data spans nearly 20 years (2002 to 2019), we can overlay our small multiples with other variables of interest, such as who was President during a given period.&lt;/p&gt;
&lt;p&gt;We do so using &lt;code&gt;geom_rect&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;geom_rect(mapping=aes(xmin=2009, xmax=2017, ymin=0, ymax=12000), fill = &amp;quot;#ADD8E6&amp;quot;, alpha = .05) +
geom_rect(mapping=aes(xmin=2017, xmax=2019, ymin=0, ymax=12000), fill = &amp;quot;#FF9999&amp;quot;, alpha = .05) +
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first line of code creates a blue box which spans 2009 to 2017 (Obama&amp;rsquo;s tenure). The second line creates a red box for Trump&amp;rsquo;s presidency (so far).&lt;/p&gt;
&lt;p&gt;Bringing it all together, the code and output look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;data %&amp;gt;% 
  group_by(region_name_3, state) %&amp;gt;% 
  summarise(textbox37 = sum(textbox37)) %&amp;gt;% 
  ggplot(aes(x = region_name_3, y = textbox37)) +
  geom_line(color = &amp;quot;black&amp;quot;) +
  geom_rect(mapping=aes(xmin=2009, xmax=2017, ymin=0, ymax=12000), fill = &amp;quot;#ADD8E6&amp;quot;, alpha = .05) +
  geom_rect(mapping=aes(xmin=2017, xmax=2019, ymin=0, ymax=12000), fill = &amp;quot;#FF9999&amp;quot;, alpha = .05) +
  scale_x_continuous(breaks = c(2002,2019)) +
  scale_y_continuous(breaks = c(0,12000)) +
  facet_geo(~ state, grid = &amp;quot;us_state_grid1&amp;quot;) +
  labs(title = &amp;quot;Refugee Acceptance on the Decline&amp;quot;,
       subtitle = &amp;quot;Number of refugees accepted annually, 2002 - 2019&amp;quot;,
       x = element_blank(),
       y = element_blank()) +
  theme(
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.line.x = element_blank(),
    axis.line.y = element_blank(),
    plot.title = element_text(size = 24),
    plot.subtitle = element_text(size = 18),
    strip.background = element_rect(color = &amp;quot;white&amp;quot;)
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figures/ref.png&#34; alt=&#34;r version&#34;&gt;&lt;/p&gt;
&lt;p&gt;I brought that plot to Illustrator and made it a lot prettier. Here&amp;rsquo;s the final version:&lt;/p&gt;





  
  











&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/post/refugee-trends/featured_hu49160f3b2aa206b95f3283696ca52509_209771_2000x2000_fit_lanczos_2.png&#34; &gt;


  &lt;img data-src=&#34;/post/refugee-trends/featured_hu49160f3b2aa206b95f3283696ca52509_209771_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1790&#34; height=&#34;1264&#34;&gt;
&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;What do we notice? A few key states (Texas, California, Florida, and Michigan) make up the vast majority of refugee acceptance, while other accept almost &lt;em&gt;no&lt;/em&gt; &lt;em&gt;refugees&lt;/em&gt;. Nearly every state has reduced their refugee acceptance since 2017, but the bulk of this decline has come from these larger states.&lt;/p&gt;
&lt;p&gt;While you&amp;rsquo;re here, take a look at my project 
&lt;a href=&#34;https://connorrothschild.github.io/map-missing-migrants/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Mapping Missing Migrants.&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Color in Data Visualization: Less How, More Why</title>
      <link>/post/color-in-data-vis/</link>
      <pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/color-in-data-vis/</guid>
      <description>&lt;p&gt;If our use of color in visualizations follows the 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Five_Ws&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Five Ws (and one H)&lt;/a&gt;, we&amp;rsquo;re spending too much time on &lt;em&gt;how&lt;/em&gt;, and not enough time on &lt;em&gt;why&lt;/em&gt;. Color is too often seen as a tool to make pretty pictures, when it should be used to inform our audiences.&lt;/p&gt;
&lt;p&gt;For one example, look at this &amp;ldquo;Color Emotion Guide&amp;rdquo; from marketing site 
&lt;a href=&#34;https://www.tapclicks.com/resources/blog/the-influence-of-color-in-data-visualization/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TapClicks&lt;/a&gt; (one of the top results when you Google &amp;ldquo;color in data visualization&amp;rdquo; 🧐).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/color-emotion-guide-lol.jpg&#34; alt=&#34;Color guide that doesn’t make much sense&#34;&gt;&lt;/p&gt;
&lt;p&gt;The implicit suggestion here is that we should use color&amp;ndash;whenever and however we can&amp;ndash;to capture some form of emotion. Not only is this specific categorization rather odd (Monster energy drinks are peaceful, Virgin Mobile embodies &amp;ldquo;bold excitement&amp;rdquo;, and Harley Davidson motorcycles just scream &amp;ldquo;cheerful friendliness&amp;rdquo; 🤩), it leads novice practitioners to believe that color should be used just for the sake of using color.&lt;/p&gt;
&lt;p&gt;Examples of gratuitous color use abound.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/bad-color-use-1.jpg&#34; alt=&#34;A pie chart with far too many colors&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/bad-color-use-2.jpg&#34; alt=&#34;Multiple pie charts with poor color usage&#34;&gt;&lt;/p&gt;
&lt;p&gt;These examples illustrate my thesis: &lt;strong&gt;Too often, we ask &lt;em&gt;how&lt;/em&gt; we can use color in our visualizations when we should be asking &lt;em&gt;why&lt;/em&gt; we are using it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some combination of 1) default software settings, 2) an obsession with pretty color palettes, and 3) a lack of emphasis on careful color consideration has led to a sloppy use of color in some of our most popular data visualizations.&lt;/p&gt;
&lt;p&gt;One of the most common errors I see is the &lt;em&gt;overuse&lt;/em&gt; of color. In the charts above, for example, it&amp;rsquo;s evident that there are far too many colors, with no apparent reason for the&lt;/p&gt;
&lt;p&gt;Often times, those creating visualizations will argue that they &lt;em&gt;must&lt;/em&gt; include a 14 colors in their chart because the dataset has 14 data points of interest! It doesn&amp;rsquo;t help that the default settings of some of the most popular data viz tools (such as Excel) by default map categorical variables to colors.&lt;/p&gt;
&lt;p&gt;The reality is, however, that if you need more than a handful of colors in your chart, you can probably present your data in a different way. Take 
&lt;a href=&#34;https://blog.datawrapper.de/colors/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this example&lt;/a&gt; from Datawrapper:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/bad-and-better.jpg&#34; alt=&#34;bad-and-better&#34;&gt;&lt;/p&gt;
&lt;p&gt;The takeaway? When you emphasize &lt;em&gt;everything&lt;/em&gt;, you end up emphasizing &lt;em&gt;nothing&lt;/em&gt;. That&amp;rsquo;s why its important that we stop uncritically asking &lt;em&gt;how&lt;/em&gt; we can use color in our charts.&lt;/p&gt;
&lt;p&gt;A data visualization is nothing more than a pretty picture if it does not &lt;em&gt;inform&lt;/em&gt; its viewer. And if your chart presents 14 different data points all mapped to different colors, what kind of story is it telling? I really like this from Apple&amp;rsquo;s data visualization practitioner 
&lt;a href=&#34;https://medium.com/@Elijah_Meeks/viz-palette-for-data-visualization-color-8e678d996077?&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Elijah Meeks&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rather than trying to find that impossible 20-color palette, stop using color when you have so many dimensions. It’s indistinguishable, it’s confusing and you’re just off-loading the complexity and decision-making to your reader.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That&amp;rsquo;s why color should be used &lt;em&gt;more sparingly&lt;/em&gt; and &lt;em&gt;more thoughtfully&lt;/em&gt;. Color is one of the most important parts of our visualizations, yet their current use is far too often gratuitous and overwhelming.&lt;/p&gt;
&lt;h2 id=&#34;so-how-should-you-use-color&#34;&gt;So, how &lt;em&gt;should&lt;/em&gt; you use color?&lt;/h2&gt;
&lt;p&gt;Color is not the enemy. Rather, the (far too frequent) abuse and misuse of color is. So, how can you use color correctly? It depends on the purpose of your visualization, and, as a corollary, the purpose of color. You should ask: &lt;strong&gt;why am I using color?&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-color-to-differentiate&#34;&gt;1) Color to differentiate&lt;/h3&gt;
&lt;p&gt;One use of color is to draw attention to a data point of interest. This kind of color use would fall into the category of 
&lt;a href=&#34;https://www.oreilly.com/library/view/designing-data-visualizations/9781449314774/ch01.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;explanatory visualization&lt;/a&gt;, as opposed to its exploratory counterpart. If you&amp;rsquo;ve already explored, analyzed, and probed your data, you now need to deliver those insights to someone else (a supervisor, a client, or a curious friend). It would be a waste of time to present to them all of the exploratory work you did, which is why your presentation should make use of color to focus on your findings.&lt;/p&gt;
&lt;p&gt;As practitioner Andy Kirk 
&lt;a href=&#34;https://www.visualisingdata.com/2015/01/make-grey-best-friend/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;puts it&lt;/a&gt;, visualization practitioners in this stage of presentation should &lt;strong&gt;make grey their best friend&lt;/strong&gt;. This is because the &lt;em&gt;absence of color&lt;/em&gt;, not the excessive use of it, helps paint a picture and tell a story. By using grey as the primary color in a visualization, we automatically draw our viewers&amp;rsquo; eyes to &lt;span style = &#34;color:red&#34;&gt;whatever isn&amp;rsquo;t grey&lt;/span&gt;. That way, if we are interested in telling a story about &lt;em&gt;one data point&lt;/em&gt;, we can do so quite easily.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a quick 
&lt;a href=&#34;https://github.com/connorrothschild/bbdata&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;example&lt;/a&gt; I made in R a while back:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/color-emphasized.png&#34; alt=&#34;color-emphasized&#34;&gt;&lt;/p&gt;
&lt;p&gt;The point of the visualization is not to show our audience the kindergarten vaccination rate of &lt;em&gt;every county&lt;/em&gt; in Texas. It is instead to highlight the lowest rate&amp;ndash;Terry County. This visualization leverages the grey fill of every other bar to immediately draw the audiences&amp;rsquo; eyes to Terry County. Because we used only two colors, we can also highlight text in the subtitle to make the connection even clearer for our audience. Color&amp;ndash;if used prudently&amp;ndash;makes our visualizations more digestible and more informative.&lt;/p&gt;
&lt;p&gt;Now, imagine if I visualized that same data in the following way:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/all-grey.jpg&#34; alt=&#34;all-grey&#34;&gt;&lt;/p&gt;
&lt;p&gt;Or, even worse:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/all-color.jpg&#34; alt=&#34;all-colors&#34;&gt;&lt;/p&gt;
&lt;p&gt;After seeing those eyesores, aren&amp;rsquo;t you thankful that we used color sparingly in the initial plot?&lt;/p&gt;
&lt;p&gt;Perhaps you&amp;rsquo;re interested in a county-by-county overview of 2016 election results. Although you might be tempted to code all counties according to their Trump/Clinton split, that&amp;rsquo;s prettier than it is insightful. What if, instead, we focused on those notable counties which flipped from one party to another between 2012 and 2016? From Kieran Healy&amp;rsquo;s book 
&lt;a href=&#34;https://socviz.co/refineplots.html#use-color-to-your-advantage&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Data Visualization&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/flipping-points-color.jpg&#34; alt=&#34;flipping-points-color&#34;&gt;&lt;/p&gt;
&lt;p&gt;As we can see here, more counties flipped from majority-Democratic in 2012 to majority-Republican in 2016 than vice-versa. Because we&amp;rsquo;re focusing on only a fraction of all of the data points, we can also observe trends: The majority of counties that flipped had a small black population. No county that had over a ~53% black population flipped in either direction (annotation my own):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/flipping-points-color-annotate1.jpg&#34; alt=&#34;flipping-points-color-annotate1&#34;&gt;&lt;/p&gt;
&lt;p&gt;We also notice that flipping direction might be correlated with population size: nearly all of the flipping counties with a log population under 100,000 flipped to Republicans, while a greater proportion of all switching counties flipped toward the Democratic Party if their log population was greater than 100,000.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/flipping-points-color-annotate2.jpg&#34; alt=&#34;flipping-points-color-annotate2&#34;&gt;&lt;/p&gt;
&lt;p&gt;Color can, and should, be used to focus on the key parts of your visualization that you want your audience to see. By using color strategically, we can reduce the cognitive load required to understand &lt;em&gt;what&lt;/em&gt; a visualization is depicting. 
&lt;a href=&#34;https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0183884#pone.0183884.ref008&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kalyuga et al.&lt;/a&gt; found that color-coding &amp;ldquo;ameliorated split-attention effects, resulting in lower perceived difficulty.&amp;rdquo; 
&lt;a href=&#34;https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0183884#pone.0183884.ref024&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Other researchers&lt;/a&gt; have reported reductions in cognitive load when experiment participants were provided color-coding.&lt;/p&gt;
&lt;p&gt;The overuse of colors can have the opposite effect. In one 
&lt;a href=&#34;https://journals-sagepub-com.ezproxy.rice.edu/doi/full/10.1177/1747021818781425&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019 paper&lt;/a&gt;, researchers found &amp;ldquo;task-irrelevant digit colour information hampers the learning process only in instances where it triggers a conflict with the semantic properties of the base-code words.&amp;rdquo; What does this mean? If color encoding conflicts with the objects it represents, it impedes learning and weakens understanding. You don&amp;rsquo;t have to understand what all this means (I don&amp;rsquo;t dully understand all of it). This point is simply to illustrate: &lt;em&gt;we should care about color&lt;/em&gt;. Color can be confusing and complicated, which is why its use should be intentional and minimal. It should be used to draw attention to the important parts of our charts.&lt;/p&gt;
&lt;h3 id=&#34;2-color-to-explore&#34;&gt;2) Color to explore&lt;/h3&gt;
&lt;p&gt;Color does not have to be used in contrast to plain old grey. It can also be used as a tool to showcase a variety of data points all mapped to different colors. The important note is that this usage should be sparing. Given our prior examples, we definitely don&amp;rsquo;t want a plot like this one (from 
&lt;a href=&#34;https://serialmentor.com/dataviz/color-pitfalls.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chapter 19 of Claus Wilke&amp;rsquo;s &lt;em&gt;Fundamentals of Data Visualization&lt;/em&gt;&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/bad-chart.jpg&#34; alt=&#34;bad-chart&#34;&gt;&lt;/p&gt;
&lt;p&gt;A more appropriate alternative may look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/betterchart-1.jpg&#34; alt=&#34;betterchart-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;This way, the audience can still see general patterns in the data, but they don&amp;rsquo;t have to treat the fill legend like a lookup table! Most ideally, this chart would have some interactivity, so that a user could hover over a point to see its respective data.&lt;/p&gt;
&lt;p&gt;In examples like this, where we are &lt;em&gt;exploring&lt;/em&gt; rather than &lt;em&gt;explaining&lt;/em&gt;, we leave the exploration to our users; they can see what they want to see and we give them the information they need to do exactly that.&lt;/p&gt;
&lt;p&gt;Another common use of color for exploratory purposes is showing data progression across a gradient (e.g. low to high, bad to good, cold to warm).&lt;/p&gt;
&lt;p&gt;These examples are most commonly found in 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Choropleth_map&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;choropleth maps&lt;/a&gt;, where the shade of color in a given state (or county, or region) corresponds to a value of interest. As an example, here&amp;rsquo;s a 
&lt;a href=&#34;https://connorrothschild.github.io/D3.js/map-overdoses/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;choropleth map&lt;/a&gt; I created using D3.js, which visualizes opioid-involved overdose deaths in the United States:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/choropleth-ex.jpg&#34; alt=&#34;choropleth-ex&#34;&gt;&lt;/p&gt;
&lt;p&gt;As we can see from the map, &amp;ldquo;rust belt&amp;rdquo; states are suffering from the opioid crisis to a much greater degree than those in western states. Choropleth maps utilize color to show regional variation and illustrate the power of color &lt;em&gt;shading&lt;/em&gt; to represent the severity or extent of a given variable.&lt;/p&gt;
&lt;p&gt;However, color in this context can also be misused. Data may be mapped according to a categorical color scale, or a rainbow scale which makes it difficult to see progression. This chart from 
&lt;a href=&#34;https://serialmentor.com/dataviz/color-pitfalls.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Claus O. Wilke&lt;/a&gt; is a good (bad) example:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/map-Texas-rainbow-1.jpg&#34; alt=&#34;map-Texas-rainbow-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;This chart is pretty! When rainbow scales are used in the media or elsewhere, it may be because their creator asked &amp;ldquo;How can I use color to make a pretty picture?&amp;rdquo; But this use of a non-monotonic color scale means that the relative size of differences between data points are difficult to detect. As an illustration, see how long it takes you to answer this question: using the legend above, what is the percent difference between &lt;span style = &#34;color:#FF6701;&#34;&gt;this color &lt;/span&gt;and &lt;span style = &#34;color:#3736FF;&#34;&gt;this color&lt;/span&gt;? (The answer is ~70%.)&lt;/p&gt;
&lt;p&gt;In 2019, 
&lt;a href=&#34;https://ieeexplore.ieee.org/document/8494817&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a group of researchers&lt;/a&gt; asked climate scientists to evaluate maps depicting changes in climate, where maps were either rainbow (similar to the Texas map above) or monotonic (such as the opioid map earlier). The researchers found that evaluations of magnitude difference in these maps were significantly more accurate when they were encoded with monotonic luminance scales rather than traditional rainbow scales. Other research consistently finds that rainbow color scales are both 
&lt;a href=&#34;http://people.renci.org/~borland/pdfs/RainbowColorMap_VisViewpoints.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;harmful and popular&lt;/a&gt;. All this to say: color matters.&lt;/p&gt;
&lt;p&gt;So, color can be used for exploratory purposes. That is to say, color doesn&amp;rsquo;t have to be used exclusively for focus, and it can be used in charts that have colors other than just grey! But exploratory color usage (as with all use of color) requires caution.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Color is tricky. While it can take your plot to the next level, it can also ruin it. The difference? The questions we ask. Are we questioning &lt;em&gt;how&lt;/em&gt; you can use color; which of the many palettes to use, and how we can map them across variables? These are 
&lt;a href=&#34;https://socviz.co/refineplots.html#use-color-to-your-advantage&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;important questions&lt;/a&gt;, but they have to be preceded by the question of &lt;em&gt;why&lt;/em&gt;  we use color in the first place. If color doesn&amp;rsquo;t serve the purpose of informing, clarifying, or guiding our audience, what purpose does it serve?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How (and Why) to Add a Chart to Your D3.js Tooltip</title>
      <link>/post/adding-a-chart-to-your-d3-tooltip/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/adding-a-chart-to-your-d3-tooltip/</guid>
      <description>&lt;p&gt;I think tooltips are one of the most underrated parts of a visualization. When users are initially confused by a visualization, they often hover over a data point of interest to get more information.&lt;/p&gt;
&lt;p&gt;Unfortunately, many tooltips fail to really illuminate much about our data. They often recapitulate what is already being presented without clarifying any of the confusing parts of the data. Most frequently, I see (and even create 😦) tooltips which present the most basic information (in a map, a tooltip would present the state name and the value of interest), and nothing else!&lt;/p&gt;
&lt;p&gt;Of course, there&amp;rsquo;s nothing &lt;em&gt;wrong&lt;/em&gt; with these kinds of tooltips. But they are truly doing the bare minimum, and, as a result, they&amp;rsquo;re missing out on the full potential of tooltips. &lt;strong&gt;If users are actively seeking more information by hovering over data, we ought to reward them with the most helpful and interesting information we can.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s why I recently updated one of my tooltips from a static presentation of textual information to a line chart depicting change over time. In other words, I went from this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/old-tooltip.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;to this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/new-tooltip.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;why-did-i-make-that-change&#34;&gt;Why did I make that change?&lt;/h2&gt;
&lt;p&gt;The former tooltip provided information which was rather uninteresting. Although it clarified the exact &lt;em&gt;rate&lt;/em&gt; of overdose deaths in a given state at a given time, it didn&amp;rsquo;t do much else. It did provide the year currently in view, but this was also visible in the bottom right corner of the visualization! It also provided the state name, but most of my viewers have likely taken US geography in middle school.&lt;/p&gt;
&lt;p&gt;Thus, this tooltip was rather redundant. At best, it provided the &lt;em&gt;exact&lt;/em&gt; rate, so that a viewer could compare two states, or learn more information about a given state without solely relying on color encoding (
&lt;a href=&#34;https://courses.cs.washington.edu/courses/cse442/17au/lectures/CSE442-VisualEncoding.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;which can be somewhat unreliable when it comes to quantitative encoding&lt;/a&gt;, as is the case in a choropleth map).&lt;/p&gt;
&lt;p&gt;The new tooltip shows a trend over time. It also shows the state name (just in case you skipped that day in US geography!), and also the most recent data on overdose deaths. Because this map is meant to show how the opioid crisis &lt;em&gt;has evolved&lt;/em&gt;, showing a line chart for each state in my tooltip allows the user to explore state-by-state trends on hover! This is much easier than hovering on each state during each year and trying to keep track of the trends.&lt;/p&gt;
&lt;p&gt;For example, hovering on West Virginia, which in 2017 seemed to have the highest opioid-involved overdose death rate (as indicated by it having the darkest shade of red), reveals that its also experienced one of the largest over-time increase in this rate since 1999:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figures/west-virginia.jpg&#34; alt=&#34;West Virginia Image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;so-how-do-you-do-it&#34;&gt;So, how do you do it?&lt;/h2&gt;
&lt;p&gt;Great question! It&amp;rsquo;s thankfully not that hard, but the payoff is huge. The shift from my old, boring tooltip to my new, sexy one took only a couple of hours, thanks to a few 
&lt;a href=&#34;https://stackoverflow.com/questions/43904643/add-chart-to-tooltip-in-d3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stack Overflow answers&lt;/a&gt; and 
&lt;a href=&#34;https://bl.ocks.org/maelafifi/ee7fecf90bb5060d5f9a7551271f4397&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;online examples&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;step-1-load-d3-tip&#34;&gt;Step 1: Load &lt;code&gt;d3-tip&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The process mostly relies on &lt;code&gt;d3-tip&lt;/code&gt;, which you can learn more about 
&lt;a href=&#34;http://labratrevenge.com/d3-tip/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can load &lt;code&gt;d3-tip&lt;/code&gt;with the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/d3-tip/0.7.1/d3-tip.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-2-create-a-tooltip-object&#34;&gt;Step 2: Create a tooltip object&lt;/h3&gt;
&lt;p&gt;Next, you initialize your tooltip, give it a class (for CSS styling), and provide the specified &lt;code&gt;offset&lt;/code&gt;. In my example, I define my offset according to the 
&lt;a href=&#34;https://stackoverflow.com/questions/28536367/in-d3-js-how-to-adjust-tooltip-up-and-down-based-on-the-screen-position&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;user&amp;rsquo;s mouse position&lt;/a&gt;. That way, if a user hovers over an eastern state, the tooltip doesn&amp;rsquo;t disappear off the screen!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  // define the tooltip 
var tool_tip = d3.tip()
  .attr(&amp;quot;class&amp;quot;, &amp;quot;d3-tip&amp;quot;)
  // if the mouse position is greater than 650 (~ Kentucky/Missouri), offset tooltip to the left instead of the right
  .offset(function() {if(current_position[0] &amp;gt; 650) {
  	return [-20,-120] } 
  	else { return [20,120]}
  })
  // input the title, and include the div
  .html(
  	&amp;quot;&amp;lt;p&amp;gt;Opioid-involved deaths over time in&amp;lt;/p&amp;gt;&amp;lt;div id=&#39;tipDiv&#39;&amp;gt;&amp;lt;/div&amp;gt;&amp;quot;
  );

svg.call(tool_tip);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The most important part here is&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;.html(
     &amp;quot;&amp;lt;p&amp;gt;Opioid-involved deaths over time in&amp;lt;/p&amp;gt;&amp;lt;div id=&#39;tipDiv&#39;&amp;gt;&amp;lt;/div&amp;gt;&amp;quot;
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where we define the html that creates the tooltip itself. In our case, we provide a title, &amp;ldquo;Opioid-involved deaths over time&amp;rdquo;, and also specify the div that the tooltip should include.&lt;/p&gt;
&lt;h3 id=&#34;step-3-create-the-tipdiv-object&#34;&gt;Step 3: Create the &lt;code&gt;tipDiv&lt;/code&gt; object&lt;/h3&gt;
&lt;p&gt;Finally, we can create the &lt;code&gt;tipDiv&lt;/code&gt; object we referenced in the above code. The object will be created on mouseover of the group of interest (in my case, states). Thus, the code will look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;states = svg.append(&amp;quot;g&amp;quot;)
  .attr(&amp;quot;class&amp;quot;, &amp;quot;states&amp;quot;)
  .selectAll(&amp;quot;path&amp;quot;)
  .data(topojson.feature(us, us.objects.states).features)
  .enter()
  .append(&amp;quot;path&amp;quot;)
  .attr(&amp;quot;d&amp;quot;, path)
  .on(&#39;mouseover&#39;, function(d) {

// define and store the mouse position. this is used to define tooltip offset, seen above.
current_position = d3.mouse(this); 				

// define current state
current_state = nameById[d.id]
	
// show the tooltip
tool_tip.show();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After that initialization and &lt;code&gt;show&lt;/code&gt; function, we can define the &lt;code&gt;tipDiv&lt;/code&gt; object:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var tipSVG = d3.select(&amp;quot;#tipDiv&amp;quot;)
     .append(&amp;quot;svg&amp;quot;)
     .attr(&amp;quot;width&amp;quot;, 220)
     .attr(&amp;quot;height&amp;quot;, 55);

tipSVG.append(&amp;quot;path&amp;quot;)
     .datum(overdoses.filter(function(d) {return nameById[d.id] == current_state}))
     .style(&amp;quot;stroke&amp;quot;, function() {
     	if (rateById[d.id] &amp;lt; 10) {
     		return &amp;quot;grey&amp;quot;
     	} else {
     	return color(rateById[d.id])
     	}
 	  })
     .style(&amp;quot;stroke-width&amp;quot;, 1.5)
     .style(&amp;quot;fill&amp;quot;, &amp;quot;none&amp;quot;)
     .attr(&amp;quot;d&amp;quot;, line)
     
tipSVG.append(&amp;quot;circle&amp;quot;)
     .attr(&amp;quot;fill&amp;quot;, function() {
     	if (rateById[d.id] &amp;lt; 10) {
     		return &amp;quot;grey&amp;quot;
     	} else {
     	return color(rateById[d.id])
     	}
 	  })
    .attr(&amp;quot;stroke&amp;quot;, &amp;quot;black&amp;quot;)
    .attr(&amp;quot;cx&amp;quot;, 130)
    .attr(&amp;quot;cy&amp;quot;, y_tooltip(rateById[d.id]))
    .attr(&amp;quot;r&amp;quot;, 3)

tipSVG.append(&amp;quot;text&amp;quot;)
     .text(rateById[d.id] + &amp;quot; deaths&amp;quot;)
     .attr(&amp;quot;x&amp;quot;, 140)
     .attr(&amp;quot;y&amp;quot;, function() {
     	if (y_tooltip(rateById[d.id]) &amp;lt; 15) { return 10 }
     		else { return y_tooltip(rateById[d.id]) - 7 }
     	})

tipSVG.append(&amp;quot;text&amp;quot;)
     .text(&amp;quot;per 100,000&amp;quot;)
     .attr(&amp;quot;x&amp;quot;, 140)
     .attr(&amp;quot;y&amp;quot;, function() {
     	if (y_tooltip(rateById[d.id]) &amp;lt; 15) { return 24 }
     		else { return y_tooltip(rateById[d.id]) + 7 }
     	})
	
tipSVG.append(&amp;quot;text&amp;quot;)
     .text(current_state)
     .attr(&amp;quot;x&amp;quot;, 0)
     .attr(&amp;quot;y&amp;quot;, 15)
     .style(&amp;quot;font-size&amp;quot;, 18)
     .style(&amp;quot;font-weight&amp;quot;, 400)
 })
.on(&#39;mouseout&#39;, tool_tip.hide)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What&amp;rsquo;s happening here? Let&amp;rsquo;s look at one piece at a time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, we define the object and name it &lt;code&gt;tipSVG&lt;/code&gt;. &lt;code&gt;tipSVG&lt;/code&gt; selects &lt;code&gt;#tipDiv&lt;/code&gt; (defined in our d3-tip) and appends an SVG. We also define the width and height of the tooltip.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var tipSVG = d3.select(&amp;quot;#tipDiv&amp;quot;)
	      .append(&amp;quot;svg&amp;quot;)
	      .attr(&amp;quot;width&amp;quot;, 220)
	      .attr(&amp;quot;height&amp;quot;, 55);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Next&lt;/strong&gt;, we append a path to that SVG. This could be a circle, or a rectangle, or any other appendable shape. Because I am drawing a simple line, we use &lt;code&gt;path&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;tipSVG.append(&amp;quot;path&amp;quot;)
  .datum(overdoses.filter(function(d) {return nameById[d.id] == current_state}))
  .style(&amp;quot;stroke&amp;quot;, function() {
  	if (rateById[d.id] &amp;lt; 10) {
  		return &amp;quot;grey&amp;quot;
  	} else {
  	return color(rateById[d.id])
  	}
	  })
  .style(&amp;quot;stroke-width&amp;quot;, 1.5)
  .style(&amp;quot;fill&amp;quot;, &amp;quot;none&amp;quot;)
  .attr(&amp;quot;d&amp;quot;, line)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In defining the &lt;code&gt;d&lt;/code&gt; attribute, you see I use the phrase &lt;code&gt;line&lt;/code&gt;. This is defined earlier in my code to return the x and y position of each data point, to create the path itself.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var x_tooltip = d3.scaleLinear()
  .domain(d3.extent(overdoses, function(d) { return d.year; }))
  .range([ 0, 130 ]);

var y_tooltip = d3.scaleLinear()
  .domain([0, 60])
  .range([ 50, 0 ]);

var line = d3.line()
  .x(function(d) {
    return x_tooltip(d.year);
  })
  .y(function(d) {
    return y_tooltip(+d.rate);
  })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Lastly&lt;/strong&gt;, we add a circle at the end of the line to signify the final data point. We also add the text label for the year 2017.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;tipSVG.append(&amp;quot;circle&amp;quot;)
  .attr(&amp;quot;fill&amp;quot;, function() {
  	if (rateById[d.id] &amp;lt; 10) {
  		return &amp;quot;grey&amp;quot;
  	} else {
  	return color(rateById[d.id])
  	}
	  })
   .attr(&amp;quot;stroke&amp;quot;, &amp;quot;black&amp;quot;)
  .attr(&amp;quot;cx&amp;quot;, 130)
  .attr(&amp;quot;cy&amp;quot;, y_tooltip(rateById[d.id]))
  .attr(&amp;quot;r&amp;quot;, 3)

tipSVG.append(&amp;quot;text&amp;quot;)
  .text(rateById[d.id] + &amp;quot; deaths&amp;quot;)
  .attr(&amp;quot;x&amp;quot;, 140)
  .attr(&amp;quot;y&amp;quot;, function() {
  	if (y_tooltip(rateById[d.id]) &amp;lt; 15) { return 10 }
  		else { return y_tooltip(rateById[d.id]) - 7 }
  	})

tipSVG.append(&amp;quot;text&amp;quot;)
  .text(&amp;quot;per 100,000&amp;quot;)
  .attr(&amp;quot;x&amp;quot;, 140)
  .attr(&amp;quot;y&amp;quot;, function() {
  	if (y_tooltip(rateById[d.id]) &amp;lt; 15) { return 24 }
  		else { return y_tooltip(rateById[d.id]) + 7 }
  	})

tipSVG.append(&amp;quot;text&amp;quot;)
  .text(current_state)
  .attr(&amp;quot;x&amp;quot;, 0)
  .attr(&amp;quot;y&amp;quot;, 15)
  .style(&amp;quot;font-size&amp;quot;, 18)
  .style(&amp;quot;font-weight&amp;quot;, 400)
 })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And finally, we hide the tooltip on mouseout:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;.on(&#39;mouseout&#39;, tool_tip.hide)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thanks for reading! You can play around with the visualization and checkout the tooltip for yourself here (find the fullscreen version 
&lt;a href=&#34;https://connorrothschild.github.io/D3.js/map-overdoses/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;):&lt;/p&gt;
&lt;div&gt;    
&lt;svg width=&#34;960&#34; height=&#34;600&#34;&gt;&lt;/svg&gt;
&lt;/div&gt;
&lt;style&gt;

@import url(&#39;https://rsms.me/inter/inter.css&#39;);
html { font-family: &#39;Inter&#39;, sans-serif; }
@supports (font-variation-settings: normal) {
  html { font-family: &#39;Inter var&#39;, sans-serif; }
}

.states :hover {
  stroke: white;
  stroke-width: 8px;
}

.year.label {
  font: 300 2.5em &#34;Inter&#34;;
  fill: gray;
}

.helper.label {
  font: 150 1em &#34;Inter&#34;;
  fill: gray;
}

.overlay {
  fill: none;
  pointer-events: all;
  cursor: ew-resize;
}

.caption {
  font: 150 1.1em &#34;Inter&#34;;
}

.d3-tip {
  padding-right: 6px;
  padding-left: 6px;
  padding-bottom: 6px;
  padding-top: 0;
  background: #fff;
  border: 1px solid black;
  font-size: 12px;
  pointer-events: none !important;
}

/* .my_chart {
	width: 90%;
	padding-left: 15%;
	padding-right: 10%;
} */

&lt;/style&gt;
&lt;script src=&#34;https://d3js.org/d3.v4.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://d3js.org/d3-scale-chromatic.v1.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://d3js.org/topojson.v1.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://d3js.org/queue.v1.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/d3-tip/0.7.1/d3-tip.min.js&#34;&gt;&lt;/script&gt;
&lt;script&gt;

/* This viz was made a lot easier thanks to the following code:

* animation using TweenYear
http://bl.ocks.org/jgujgu/bfbb41f5e8b90ff09d7805f71ef2538e
* choropleth map of us states (using json fips state ids)
https://bl.ocks.org/chucklam/f628765b873d707a3d0e44ffc78deab8
* another choropleth; although I didn&#39;t end up following its structure it was a helpful introduction
https://bl.ocks.org/wboykinm/dbbe50d1023f90d4e241712395c27fb3

A special thanks to Robert Hosbach for his viz here (and his willingness to respond to my email!): https://rahosbach.github.io/2018-10-27-d3UnemploymentChoropleth/
*/  

var svg = d3.select(&#34;svg&#34;)
  .attr(&#34;class&#34;, &#34;my_chart&#34;)
  // resize plot when window is resized (see below)
  .call(responsivefy);

var path = d3.geoPath();
var format = d3.format(&#34;&#34;);
var height = 600;
var width = 960;

// thanks to https://brendansudol.com/writing/responsive-d3 for this function!
function responsivefy(svg) {
  // container will be the DOM element
  // that the svg is appended to
  // we then measure the container
  // and find its aspect ratio
  const container = d3.select(svg.node().parentNode),
      width = parseInt(svg.style(&#39;width&#39;), 10),
      height = parseInt(svg.style(&#39;height&#39;), 10),
      aspect = width / height;

  // set viewBox attribute to the initial size
  // control scaling with preserveAspectRatio
  // resize svg on inital page load
  svg.attr(&#39;viewBox&#39;, `0 0 ${width} ${height}`)
      .attr(&#39;preserveAspectRatio&#39;, &#39;xMinYMid&#39;)
      .call(resize);

  // add a listener so the chart will be resized
  // when the window resizes
  // multiple listeners for the same event type
  // requires a namespace, i.e., &#39;click.foo&#39;
  // api docs: https://goo.gl/F3ZCFr
  d3.select(window).on(
      &#39;resize.&#39; + container.attr(&#39;id&#39;), 
      resize
  );

  // this is the code that resizes the chart
  // it will be called on load
  // and in response to window resizes
  // gets the width of the container
  // and resizes the svg to fill it
  // while maintaining a consistent aspect ratio
  function resize() {
      const w = parseInt(container.style(&#39;width&#39;));
      svg.attr(&#39;width&#39;, w);
      svg.attr(&#39;height&#39;, Math.round(w / aspect));
  }
}

// options for color scheme: https://github.com/d3/d3-scale-chromatic
var colorScheme = d3.schemeReds[9];
colorScheme.unshift(&#34;#eee&#34;);

// building the legend at the top
var color = d3.scaleQuantize()
  .domain([0, 50])
  .range(colorScheme);
var x = d3.scaleLinear()
  .domain(d3.extent(color.domain()))
  // the range specifies the x position of the legend
  .rangeRound([600,860]);
var g = svg.append(&#34;g&#34;)
  .attr(&#34;transform&#34;, &#34;translate(0,40)&#34;);

// legend boxes
g.selectAll(&#34;rect&#34;)
  .data(color.range().map(function(d){ return color.invertExtent(d); }))
  .enter()
  .append(&#34;rect&#34;)
    .attr(&#34;height&#34;, 8)
    .attr(&#34;x&#34;, function(d){ return x(d[0]); })
    .attr(&#34;width&#34;, function(d){ return x(d[1]) - x(d[0]); })
    .attr(&#34;fill&#34;, function(d){ return color(d[0]); });

// legend title
g.append(&#34;text&#34;)
  .attr(&#34;class&#34;, &#34;caption&#34;)
  .attr(&#34;x&#34;, x.range()[0])
  .attr(&#34;y&#34;, -6)
  .attr(&#34;fill&#34;, &#34;#000&#34;)
  .attr(&#34;text-anchor&#34;, &#34;start&#34;)
  .attr(&#34;font-weight&#34;, 30)
  .text(&#34;Overdose Death Rate (Per 100,000)&#34;);

// legend ticks
g.call(d3.axisBottom(x)
  .tickSize(13)
  .tickFormat(format)
  .tickValues(color.range().slice(1).map(function(d){ return color.invertExtent(d)[0]; })))
  .select(&#34;.domain&#34;)
  .remove();

// create tooltip
var div = d3.select(&#34;body&#34;)
  .append(&#34;div&#34;)
  .attr(&#34;class&#34;, &#34;tooltip&#34;)
  .style(&#34;opacity&#34;, 0);

// label positions
labely = height - 50
labelx = width - 280

// Add the year label; the value is set on transition.
var label = svg.append(&#34;text&#34;)
  .attr(&#34;class&#34;, &#34;year label&#34;)
  .attr(&#34;text-anchor&#34;, &#34;middle&#34;)
  // position the label
  .attr(&#34;y&#34;, labely)
  .attr(&#34;x&#34;, labelx)
  .text(1999);

var helperlabel = svg.append(&#34;text&#34;)
  .attr(&#34;class&#34;, &#34;helper label&#34;)
  .attr(&#34;text-anchor&#34;, &#34;middle&#34;)
  // position the label
  .attr(&#34;y&#34;, labely + 20)
  .attr(&#34;x&#34;, labelx)
  .text(&#34;Hover to change year&#34;);

queue()
  // read in JSON which includes all of the complicated shape data for states/counties/etc.
  .defer(d3.json, &#34;https://d3js.org/us-10m.v1.json&#34;)
  // read in opioid data
  .defer(d3.csv, &#34;figures/overdoses.csv&#34;)
  /*
  NOTE ON OVERDOSE DATA: 

  This CSV file was created via pulling data from CDC&#39;s WONDER database.

  I pulled all deaths from the National Vital Statistics System&#39;s multiple cause-of-death mortality files which had one of the following causes of death: opioids (T40.0, T40.1, T40.2, T40.3, T40.4, or T40.6)**; natural/semisynthetic opioids (T40.2); methadone (T40.3); heroin (T40.1); synthetic opioids other than methadone (T40.4); cocaine (T40.5). I followed the methodology of this paper: https://www.cdc.gov/mmwr/volumes/67/wr/mm675152e1.htm?s_cid=mm675152e1_w. Deaths may include multiple opioids as a cause and thus are not mutually exclusive.

  You can replicate the data pull on CDC WONDER with this link: https://wonder.cdc.gov/mcd-icd10.html

  Source: Multiple Cause of Death 1999–2017 on CDC Wide-ranging Online Data for Epidemiologic Research (CDC WONDER). Atlanta, GA: CDC, National Center for Health Statistics. 2018. Available at http://wonder.cdc.gov. 
  */
  .await(ready);

function ready(error, us, overdoses) {
  if (error) throw error;

    // Initialize data to 1990
    var currentYear = 1999;
    var rateById = {};
    var nameById = {};
    // var yearById = {};
    
    //console.table(overdoses)
    
    overdoses.forEach(function(d){
   	  rateById[d.id] = +d.rate;
      nameById[d.id] = d.state;
      d.year = d.year;
  });

   	console.table(overdoses)

    // Add an overlay for the year label.
    var box = label.node().getBBox();
    
    var overlay = svg.append(&#34;rect&#34;)
      .attr(&#34;class&#34;, &#34;overlay&#34;)
      .attr(&#34;x&#34;, box.x)
      .attr(&#34;y&#34;, box.y)
      .attr(&#34;width&#34;, box.width)
      .attr(&#34;height&#34;, box.height)
      .on(&#34;mouseover&#34;, enableInteraction);

  var x_tooltip = d3.scaleLinear()
    .domain(d3.extent(overdoses, function(d) { return d.year; }))
    .range([ 0, 130 ]);

  var y_tooltip = d3.scaleLinear()
    .domain([0, 60])
    .range([ 50, 0 ]);

  // define line function
  var line = d3.line()
    .x(function(d) {
      return x_tooltip(d.year);
    })
    .y(function(d) {
      return y_tooltip(+d.rate);
    })

  var tool_tip = d3.tip()
  .attr(&#34;class&#34;, &#34;d3-tip&#34;)
  // if the mouse position is greater than 650 (~ Kentucky/Missouri), 
  // offset tooltip to the left instead of the right
  // credit https://stackoverflow.com/questions/28536367/in-d3-js-how-to-adjust-tooltip-up-and-down-based-on-the-screen-position
  .offset(function() {if(current_position[0] &gt; 650) {
  	return [-20,-120] } 
  	else { return [20,120]}
  })
  .html(
  	&#34;&lt;p&gt;Opioid-involved deaths over time in&lt;/p&gt;&lt;div id=&#39;tipDiv&#39;&gt;&lt;/div&gt;&#34;
  );

	svg.call(tool_tip);
	
	// Start a transition that interpolates the data based on year.
	svg.transition()
	  .duration(10000)
	  .ease(d3.easeLinear)
	  .tween(&#34;year&#34;, tweenYear);
	
	states = svg.append(&#34;g&#34;)
	  .attr(&#34;class&#34;, &#34;states&#34;)
	  .selectAll(&#34;path&#34;)
	  .data(topojson.feature(us, us.objects.states).features)
	  .enter()
	  .append(&#34;path&#34;)
	  .attr(&#34;d&#34;, path)
	  // appending svg inside of tooltip for year by year change.
	  // h/t https://bl.ocks.org/maelafifi/ee7fecf90bb5060d5f9a7551271f4397
	  // h/t https://stackoverflow.com/questions/43904643/add-chart-to-tooltip-in-d3
	   .on(&#39;mouseover&#39;, function(d) {
	
	   	// define and store the mouse position. this is used to define
	   	// tooltip offset, seen above.
		current_position = d3.mouse(this); 				
	   	//console.log(current_position[0])
	
	   	current_state = nameById[d.id]
	
	    tool_tip.show();
	    var tipSVG = d3.select(&#34;#tipDiv&#34;)
	      .append(&#34;svg&#34;)
	      .attr(&#34;width&#34;, 220)
	      .attr(&#34;height&#34;, 55);
	
	    tipSVG.append(&#34;path&#34;)
	      .datum(overdoses.filter(function(d) {return nameById[d.id] == current_state}))
	      .style(&#34;stroke&#34;, function() {
	      	if (rateById[d.id] &lt; 10) {
	      		return &#34;grey&#34;
	      	} else {
	      	return color(rateById[d.id])
	      	}
	  	  })
	      .style(&#34;stroke-width&#34;, 1.5)
	      .style(&#34;fill&#34;, &#34;none&#34;)
	      .attr(&#34;d&#34;, line)
	      
	    tipSVG.append(&#34;circle&#34;)
	      .attr(&#34;fill&#34;, function() {
	      	if (rateById[d.id] &lt; 10) {
	      		return &#34;grey&#34;
	      	} else {
	      	return color(rateById[d.id])
	      	}
	  	  })
	      .attr(&#34;stroke&#34;, &#34;black&#34;)
	      .attr(&#34;cx&#34;, 130)
		  .attr(&#34;cy&#34;, y_tooltip(rateById[d.id]))
		  .attr(&#34;r&#34;, 3)
	
	    tipSVG.append(&#34;text&#34;)
	      .text(rateById[d.id] + &#34; deaths&#34;)
	      // .transition()
	      // .duration(1000)
	      .attr(&#34;x&#34;, 140)
	      .attr(&#34;y&#34;, function() {
	      	if (y_tooltip(rateById[d.id]) &lt; 15) { return 10 }
	      		else { return y_tooltip(rateById[d.id]) - 7 }
	      	})
	
		tipSVG.append(&#34;text&#34;)
	      .text(&#34;per 100,000&#34;)
	      // .transition()
	      // .duration(1000)
	      .attr(&#34;x&#34;, 140)
	      .attr(&#34;y&#34;, function() {
	      	if (y_tooltip(rateById[d.id]) &lt; 15) { return 24 }
	      		else { return y_tooltip(rateById[d.id]) + 7 }
	      	})
	
	    tipSVG.append(&#34;text&#34;)
	      .text(current_state)
	      // .transition()
	      // .duration(1000)
	      .attr(&#34;x&#34;, 0)
	      .attr(&#34;y&#34;, 15)
	      .style(&#34;font-size&#34;, 18)
	      .style(&#34;font-weight&#34;, 400)


	  })
  	  .on(&#39;mouseout&#39;, tool_tip.hide)
      .call(style, currentYear)

 // FOR BAR CHART //
   //    .on(&#39;mouseover&#39;, function(d) {
	  //   tool_tip.show();
	  //   var tipSVG = d3.select(&#34;#tipDiv&#34;)
	  //     .append(&#34;svg&#34;)
	  //     .attr(&#34;width&#34;, 200)
	  //     .attr(&#34;height&#34;, 50);

	  //   tipSVG.append(&#34;rect&#34;)
	  //     .attr(&#34;fill&#34;, color(rateById[d.id]))
	  //     .attr(&#34;y&#34;, 10)
	  //     .attr(&#34;width&#34;, 0)
	  //     .attr(&#34;height&#34;, 30)
	  //     .transition()
	  //     .duration(1000)
	  //     .attr(&#34;width&#34;, rateById[d.id] * 6);
	
	  //   tipSVG.append(&#34;text&#34;)
	  //     .text(rateById[d.id] + &#34; per 100,000&#34;)
	  //     .attr(&#34;x&#34;, 10)
	  //     .attr(&#34;y&#34;, 30)
	  //     .transition()
	  //     .duration(1000)
	  //     .attr(&#34;x&#34;, 6 + rateById[d.id] * 6)
	  // })
  	//   .on(&#39;mouseout&#39;, tool_tip.hide)
   //    .call(style, currentYear)

    function style(states, year){
      newoverdoses = interpolateData(year);
    
    var rateById = {};
    var nameById = {};
    
    newoverdoses.forEach(function(d) {
    
      // each state is encoded according to its ANSI/FIPS state code
      // you can find states and their codes here https://en.wikipedia.org/wiki/List_of_U.S._state_abbreviations#ANSI_standard_INCITS_38:2009
      rateById[d.id] = +d.rate;
      nameById[d.id] = d.state;
      d.year = d.year;
      
    });
    
    // add fill according to death rates, for each id (state)
    states.style(&#34;fill&#34;, function(d) { return color(rateById[d.id]); })
    // OLD TOOLTIP // 
      // .on(&#34;mouseover&#34;, function(d) {      
      //     div.transition()        
      //       .duration(200)      
      //       .style(&#34;opacity&#34;, .9);  
    
      // // add tooltip here    
      //     div.html(&#39;&lt;strong&gt; State: &lt;/strong&gt;&#39; + nameById[d.id] + 
      //       &#39;&lt;br&gt;&#39; + 
      //       &#39;&lt;strong&gt; Year: &lt;/strong&gt;&#39; + Math.round(currentYear) +
      //       &#39;&lt;br&gt;&#39; + 
      //       &#39;&lt;strong&gt; Rate: &lt;/strong&gt;&#39; + rateById[d.id] + &#34; per 100,000&#34;)
      //       .style(&#34;left&#34;, (d3.event.pageX) + &#34;px&#34;)     
      //       .style(&#34;top&#34;, (d3.event.pageY - 28) + &#34;px&#34;);})   
      //  // remove tooltip on mouse out               
      //  .on(&#34;mouseout&#34;, function(d) {       
      //     div.transition()        
      //      .duration(500)      
      //      .style(&#34;opacity&#34;, 0);});

  // create the actual state objects
  svg.append(&#34;path&#34;)
    .datum(topojson.mesh(us, us.objects.states, (a, b) =&gt; a !== b))
    .attr(&#34;fill&#34;, &#34;none&#34;)
    .attr(&#34;stroke&#34;, &#34;white&#34;)
    // .attr(&#34;stroke-linejoin&#34;, &#34;round&#34;)
    .attr(&#34;d&#34;, path)
   }

  // after the transition finishes, mouseover to change  year.
  function enableInteraction() {
    var yearScale = d3.scaleLinear()
      .domain([1999, 2017])
      .range([box.x + 10, box.x + box.width - 10])
      .clamp(true);

    // Cancel the current transition, if any.
    svg.transition().duration(0);
    
    overlay
      .on(&#34;mouseover&#34;, mouseover)
      .on(&#34;mouseout&#34;, mouseout)
      .on(&#34;mousemove&#34;, mousemove)
      .on(&#34;touchmove&#34;, mousemove);
    
    function mouseover() { label.classed(&#34;active&#34;, true); }
    function mouseout() { label.classed(&#34;active&#34;, false); }
    function mousemove() { displayYear(yearScale.invert(d3.mouse(this)[0])); }
  }

  // Tweens the entire chart by first tweening the year, and then the data.
  // For the interpolated data, the dots and label are redrawn.
  function tweenYear() {
    var year = d3.interpolateNumber(1999, 2017);
    return function(t) { displayYear(year(t)); };
  }

  // Updates the display to show the specified year.
  function displayYear(year) {
    currentYear = year;
    states.call(style,year)
    label.text(Math.round(year));
  }

  // Interpolates the dataset for the given (fractional) year.
  function interpolateData(year) {
    return overdoses.filter(function(row) {
    return row[&#39;year&#39;] == Math.round(year);
     });
    }
};
    &lt;/script&gt; 
</description>
    </item>
    
    <item>
      <title>Who Mentions Who in the Office?</title>
      <link>/post/who-mentions-who-in-the-office/</link>
      <pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate>
      <guid>/post/who-mentions-who-in-the-office/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/d3/d3.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/d3-tip/index.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/chorddiag/chorddiag.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/chorddiag/chorddiag.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/chorddiag-binding/chorddiag.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This project explores the relationships between different characters in the classic TV show &lt;strong&gt;The Office&lt;/strong&gt;. Using transcript data newly released in &lt;a href=&#34;https://technistema.com/&#34;&gt;Bradley H. Lindblad&lt;/a&gt;’s &lt;a href=&#34;https://cran.r-project.org/web/packages/schrute/vignettes/theoffice.html&#34;&gt;&lt;code&gt;schrute&lt;/code&gt; package&lt;/a&gt;, I’d like to see &lt;em&gt;who mentions who in the Office&lt;/em&gt;. Is one character more popular than the others?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(schrute)
library(tidyverse)
library(cr)
set_cr_theme()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s take a look at the transcripts:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;transcripts &amp;lt;- schrute::theoffice

knitr::kable(transcripts[1:3,])&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;index&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;season&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;episode&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;episode_name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;director&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;writer&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;character&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;text&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;text_w_direction&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;imdb_rating&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;total_votes&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;air_date&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Pilot&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ken Kwapis&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ricky Gervais;Stephen Merchant;Greg Daniels&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Michael&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;All right Jim. Your quarterlies look very good. How are things at the library?&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;All right Jim. Your quarterlies look very good. How are things at the library?&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3706&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2005-03-24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Pilot&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ken Kwapis&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ricky Gervais;Stephen Merchant;Greg Daniels&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Jim&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Oh, I told you. I couldn’t close it. So…&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Oh, I told you. I couldn’t close it. So…&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3706&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2005-03-24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Pilot&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ken Kwapis&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ricky Gervais;Stephen Merchant;Greg Daniels&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Michael&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;So you’ve come to the master for guidance? Is this what you’re saying, grasshopper?&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;So you’ve come to the master for guidance? Is this what you’re saying, grasshopper?&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3706&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2005-03-24&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;By using &lt;code&gt;tidytext&lt;/code&gt;, we can split the transcripts into their constituent parts (words).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;transcripts_tokenized &amp;lt;- transcripts %&amp;gt;%
  tidytext::unnest_tokens(word, text)

knitr::kable(transcripts_tokenized[1:3,])&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;index&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;season&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;episode&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;episode_name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;director&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;writer&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;character&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;text_w_direction&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;imdb_rating&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;total_votes&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;air_date&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;word&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Pilot&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ken Kwapis&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ricky Gervais;Stephen Merchant;Greg Daniels&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Michael&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;All right Jim. Your quarterlies look very good. How are things at the library?&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3706&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2005-03-24&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;all&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Pilot&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ken Kwapis&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ricky Gervais;Stephen Merchant;Greg Daniels&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Michael&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;All right Jim. Your quarterlies look very good. How are things at the library?&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3706&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2005-03-24&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;right&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Pilot&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ken Kwapis&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ricky Gervais;Stephen Merchant;Greg Daniels&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Michael&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;All right Jim. Your quarterlies look very good. How are things at the library?&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3706&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2005-03-24&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;jim&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We can now use the text to see who mentions who. But first, let’s construct a vector with a list of characters to keep in the analysis. There are &lt;strong&gt;485 characters&lt;/strong&gt; in the transcripts, so its important we filter only those of relevance:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;keep_characters &amp;lt;- transcripts %&amp;gt;% 
  group_by(character) %&amp;gt;% 
  count() %&amp;gt;% 
  arrange(desc(n)) %&amp;gt;% 
  head(9) %&amp;gt;% 
  pull(character)

knitr::kable(keep_characters)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;x&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Michael&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Dwight&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Jim&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Pam&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Andy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Angela&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Kevin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Erin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Oscar&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This is an optional decision. One may be interested in seeing which characters talk about Jim most, including those characters who are otherwise less relevant. I decide to filter according to the main cast so that comparisons between characters (e.g., through a chord diagram) is feasible.&lt;/p&gt;
&lt;div id=&#34;who-mentions-who&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Who Mentions Who?&lt;/h2&gt;
&lt;div id=&#34;jim-a-case-study&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Jim: A Case Study&lt;/h3&gt;
&lt;p&gt;Who is talking to who in the Office?&lt;/p&gt;
&lt;p&gt;Now that we have &lt;code&gt;keep_characters&lt;/code&gt;, we can filter according to it and spit out who mentions who &lt;em&gt;among the most relevant Office characters&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;transcripts_tokenized %&amp;gt;% 
  filter(character %in% keep_characters) %&amp;gt;% 
  mutate(jim = ifelse(word == &amp;quot;jim&amp;quot;, 1, 0)) %&amp;gt;% 
  group_by(character) %&amp;gt;% 
  summarise(jim = sum(jim)) %&amp;gt;% 
  arrange(desc(jim)) %&amp;gt;% 
  mutate(character = reorder(character, jim)) %&amp;gt;% 
  ggplot(ggplot2::aes(character, jim)) +
  geom_col() +
  coord_flip() +
  fix_bars() +
  labs(title = &amp;quot;Who Mentions Jim?&amp;quot;,
       subtitle = &amp;quot;Counts of &amp;#39;Jim&amp;#39; in The Office Transcripts&amp;quot;,
       x = element_blank(),
       y = &amp;quot;Mentions&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/who-mentions-who-in-the-office/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The takeaway here is that Dwight mentions Jim the most, followed by Michael. No surprise there! What I find interesting is that only three characters &lt;em&gt;really&lt;/em&gt; talk about/to Jim. After Dwight, Michael, and Pam (and Jim referencing himself, apparently), the mention rate for Jim’s name drops from over 200 to only 60 mentions. It seems as if the writers of the Office intentionally made Jim a subject of conversation among only a few characters!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;replicate-for-the-rest-of-the-cast&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Replicate for the rest of the cast&lt;/h3&gt;
&lt;p&gt;Next, we replicate that process for the rest of the cast. There is probably a better way to do this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_chord &amp;lt;- transcripts_tokenized %&amp;gt;% 
  filter(character %in% keep_characters) %&amp;gt;% 
  mutate(jim = ifelse(word == &amp;quot;jim&amp;quot;, 1, 0)) %&amp;gt;% 
  mutate(michael = ifelse(word == &amp;quot;michael&amp;quot;, 1, 0)) %&amp;gt;% 
  mutate(dwight = ifelse(word == &amp;quot;dwight&amp;quot;, 1, 0)) %&amp;gt;% 
  mutate(pam = ifelse(word == &amp;quot;pam&amp;quot;, 1, 0)) %&amp;gt;% 
  mutate(andy = ifelse(word == &amp;quot;andy&amp;quot;, 1, 0)) %&amp;gt;% 
  mutate(angela = ifelse(word == &amp;quot;angela&amp;quot;, 1, 0)) %&amp;gt;% 
  mutate(kevin = ifelse(word == &amp;quot;kevin&amp;quot;, 1, 0)) %&amp;gt;% 
  mutate(erin = ifelse(word == &amp;quot;erin&amp;quot;, 1, 0)) %&amp;gt;% 
  mutate(oscar = ifelse(word == &amp;quot;oscar&amp;quot;, 1, 0)) %&amp;gt;% 
  # mutate(ryan = ifelse(word == &amp;quot;ryan&amp;quot;, 1, 0)) %&amp;gt;% 
  # mutate(darryl = ifelse(word == &amp;quot;darryl&amp;quot;, 1, 0)) %&amp;gt;% 
  # mutate(phyllis = ifelse(word == &amp;quot;phyllis&amp;quot;, 1, 0)) %&amp;gt;% 
  # mutate(kelly = ifelse(word == &amp;quot;kelly&amp;quot;, 1, 0)) %&amp;gt;% 
  # mutate(toby = ifelse(word == &amp;quot;toby&amp;quot;, 1, 0)) %&amp;gt;% 
  group_by(character) %&amp;gt;% 
  summarise_at(vars(jim:oscar), funs(sum))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;visualize&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualize&lt;/h2&gt;
&lt;p&gt;Now, let’s make a chord diagram!&lt;/p&gt;
&lt;p&gt;We first have to convert the data frame into a format &lt;code&gt;chordDiagram&lt;/code&gt; will recognize.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;circlize_data &amp;lt;- as.data.frame(data_chord) %&amp;gt;% 
  pivot_longer(jim:oscar, names_to = &amp;quot;to&amp;quot;, values_to = &amp;quot;value&amp;quot;) %&amp;gt;% 
  rename(from = &amp;#39;character&amp;#39;) %&amp;gt;% 
  mutate(to = str_to_title(to))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This process pivots each row of data into a value-key combination, so that the data looks like this:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;from&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;to&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Andy&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Jim&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Andy&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Michael&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Andy&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Dwight&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Andy&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Pam&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;34&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Andy&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Andy&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;42&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Andy&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Angela&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;33&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Using that data, we can create a chord diagram quite easily, using a single command from the &lt;code&gt;circlize&lt;/code&gt; library. &lt;a href=&#34;https://jokergoo.github.io/circlize_book/book/the-chorddiagram-function.html&#34;&gt;This chapter is helpful&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(circlize)
chordDiagram(circlize_data, grid.col = c(&amp;quot;#B997C7&amp;quot;, &amp;quot;#824D99&amp;quot;, &amp;quot;#4E78C4&amp;quot;, &amp;quot;#57A2AC&amp;quot;, &amp;quot;#7EB875&amp;quot;, &amp;quot;#D0B541&amp;quot;, &amp;quot;#E67F33&amp;quot;, &amp;quot;#CE2220&amp;quot;, &amp;quot;#521A13&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/who-mentions-who-in-the-office/index_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;make-it-interactive&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Make It Interactive&lt;/h3&gt;
&lt;p&gt;With nine people, some of the data can get easily concealed (how often did Angela mention Michael’s name?). One way to fix this is to make the visualization interactive, so that a user can hover over chords to see relationships between characters.&lt;/p&gt;
&lt;p&gt;First, we conduct some data cleaning. I found that the rownames and column names have to be of the same order; let’s do a little manipulation to get there:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;int_chord &amp;lt;- as.data.frame(data_chord)

rownames(int_chord) &amp;lt;- int_chord$character

row.order &amp;lt;- c(&amp;quot;Jim&amp;quot;, &amp;quot;Michael&amp;quot;, &amp;quot;Dwight&amp;quot;, &amp;quot;Pam&amp;quot;, &amp;quot;Andy&amp;quot;, &amp;quot;Angela&amp;quot;, &amp;quot;Kevin&amp;quot;, &amp;quot;Erin&amp;quot;, &amp;quot;Oscar&amp;quot;)
               #, &amp;quot;Ryan&amp;quot;, &amp;quot;Darryl&amp;quot;, &amp;quot;Phyllis&amp;quot;, &amp;quot;Kelly&amp;quot;, &amp;quot;Toby&amp;quot;)
int_chord &amp;lt;- int_chord[row.order,]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we load &lt;a href=&#34;https://github.com/mattflor&#34;&gt;Matt Flor&lt;/a&gt;’s &lt;a href=&#34;https://github.com/mattflor/chorddiag&#34;&gt;&lt;code&gt;chorddiag&lt;/code&gt;&lt;/a&gt; package, and construct a matrix according to its function’s liking:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# devtools::install_github(&amp;quot;mattflor/chorddiag&amp;quot;)
library(chorddiag)

m &amp;lt;- as.matrix(int_chord[-1])

dimnames(m) &amp;lt;- list(have = int_chord$character,
                    prefer = str_to_title(colnames(int_chord[-1])))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we add a color palette and construct the diagram.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;groupColors &amp;lt;- c(&amp;quot;#B997C7&amp;quot;, &amp;quot;#824D99&amp;quot;, &amp;quot;#4E78C4&amp;quot;, &amp;quot;#57A2AC&amp;quot;, &amp;quot;#7EB875&amp;quot;, &amp;quot;#D0B541&amp;quot;, &amp;quot;#E67F33&amp;quot;, &amp;quot;#CE2220&amp;quot;, &amp;quot;#521A13&amp;quot;)

p &amp;lt;- chorddiag(m, 
               groupColors = groupColors, 
               groupnamePadding = 35,
               tickInterval = 50,
               groupnameFontsize = 12)
p&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:672px;height:480px;&#34; class=&#34;chorddiag html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;matrix&#34;:[[47,181,258,189,53,18,19,3,14],[227,171,353,327,66,48,95,44,100],[294,282,106,104,61,59,41,21,29],[182,262,126,58,35,44,34,17,26],[48,40,80,34,42,33,20,78,19],[11,28,81,31,23,10,40,2,26],[39,71,12,39,19,22,23,7,36],[12,37,23,28,92,9,4,15,5],[16,65,22,22,29,37,34,9,6]],&#34;options&#34;:{&#34;type&#34;:&#34;directional&#34;,&#34;width&#34;:null,&#34;height&#34;:null,&#34;margin&#34;:100,&#34;showGroupnames&#34;:true,&#34;groupNames&#34;:[&#34;Jim&#34;,&#34;Michael&#34;,&#34;Dwight&#34;,&#34;Pam&#34;,&#34;Andy&#34;,&#34;Angela&#34;,&#34;Kevin&#34;,&#34;Erin&#34;,&#34;Oscar&#34;],&#34;groupColors&#34;:[&#34;#B997C7&#34;,&#34;#824D99&#34;,&#34;#4E78C4&#34;,&#34;#57A2AC&#34;,&#34;#7EB875&#34;,&#34;#D0B541&#34;,&#34;#E67F33&#34;,&#34;#CE2220&#34;,&#34;#521A13&#34;],&#34;groupThickness&#34;:0.1,&#34;groupPadding&#34;:0.0349065850398866,&#34;groupnamePadding&#34;:[35,35,35,35,35,35,35,35,35],&#34;groupnameFontsize&#34;:12,&#34;groupedgeColor&#34;:null,&#34;chordedgeColor&#34;:&#34;#808080&#34;,&#34;categoryNames&#34;:null,&#34;categorynamePadding&#34;:100,&#34;categorynameFontsize&#34;:28,&#34;showTicks&#34;:true,&#34;tickInterval&#34;:50,&#34;ticklabelFontsize&#34;:10,&#34;fadeLevel&#34;:0.1,&#34;showTooltips&#34;:true,&#34;showZeroTooltips&#34;:true,&#34;tooltipNames&#34;:[&#34;Jim&#34;,&#34;Michael&#34;,&#34;Dwight&#34;,&#34;Pam&#34;,&#34;Andy&#34;,&#34;Angela&#34;,&#34;Kevin&#34;,&#34;Erin&#34;,&#34;Oscar&#34;],&#34;tooltipFontsize&#34;:12,&#34;tooltipUnit&#34;:&#34;&#34;,&#34;tooltipGroupConnector&#34;:&#34; &amp;#x25B6; &#34;,&#34;precision&#34;:&#34;null&#34;,&#34;clickAction&#34;:null,&#34;clickGroupAction&#34;:null}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# save the widget
# library(htmlwidgets)
# saveWidget(p, file=&amp;quot;chord_interactive.html&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Play around with the diagram &lt;a href=&#34;connorrothschild.github.io/D3.js/the-office/&#34;&gt;here&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Tidy Tuesday: Replication</title>
      <link>/post/tidy-tuesday-replication/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate>
      <guid>/post/tidy-tuesday-replication/</guid>
      <description>


&lt;p&gt;This weeks’s installment of &lt;a href=&#34;https://t.co/sElb4fcv3u?amp=1&#34;&gt;Tidy Tuesday&lt;/a&gt; is all about replicating professional plots in R.
Inspired by Rafael Irizarry’s post &lt;a href=&#34;https://simplystatistics.org/2019/08/28/you-can-replicate-almost-any-plot-with-ggplot2/&#34;&gt;“You can replicate almost any plot with R”&lt;/a&gt;, the goal is to take otherwise professional publication-ready plots and make them in R (usually ggplot2).&lt;/p&gt;
&lt;p&gt;I was interested in this Tidy Tuesday because some of my &lt;a href=&#34;https://connorrothschild.github.io/r/introducing-tpltheme/&#34;&gt;past work&lt;/a&gt; has been dedicated to creating publication-ready plots. Because &lt;a href=&#34;https://connorrothschild.github.io/r/automation/&#34;&gt;the first visualization I ever created&lt;/a&gt; was inspired by (a replication of?) &lt;a href=&#34;https://www.bloomberg.com/graphics/2017-job-risk/&#34;&gt;this visualization&lt;/a&gt; from Bloomberg graphics, I decided to set out on a journey to make that plot as close as possible to the real thing.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figs/bloomberg.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The real goal of this week’s Tidy Tuesday is using &lt;strong&gt;the data that Rafael posted&lt;/strong&gt; to create other cool visualizations; I took a slightly different approach to try to recreate another visualization entirely. What follows is an interactive recreation of the visualization above, using &lt;a href=&#34;https://shiny.rstudio.com/&#34;&gt;Shiny&lt;/a&gt; and &lt;a href=&#34;https://plot.ly/r/&#34;&gt;plotly&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
library(ggthemes)
library(dplyr)
library(ggrepel)
library(tools)
library(readxl)
library(tidyverse)
library(knitr)
library(shiny)
library(plotly)

theme_set(theme_minimal())&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;load-and-clean-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Load and Clean Data&lt;/h1&gt;
&lt;p&gt;First, we read in the data. This process was a bit complicated as I kind of had to guess where Bloomberg pulled their data from.&lt;/p&gt;
&lt;p&gt;I relied on three datasets:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Educational attainment broke down by occupation, provided by BLS &lt;a href=&#34;https://www.bls.gov/emp/ep_education_training_system.htm&#34;&gt;here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Salaries, median hourly/annual wages broke down by occupation, provided by BLS &lt;a href=&#34;https://www.bls.gov/oes/current/oes_nat.htm#11-0000&#34;&gt;here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Risk of automation broken down by occupation, provided by Carl Benedikt Frey and Michael A. Osborne (but compiled &lt;a href=&#34;https://data.world/wnedds/occupations-by-state-and-likelihood-of-automation&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;education &amp;lt;- read_excel(&amp;quot;data/education.xlsx&amp;quot;, skip=1)
salary &amp;lt;- read_excel(&amp;quot;data/national_M2017_dl.xlsx&amp;quot;)
automation &amp;lt;- read_excel(&amp;quot;data/raw_state_automation_data.xlsx&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;a href=&#34;https://connorrothschild.github.io/r/automation/&#34;&gt;another post&lt;/a&gt;, I detail the data cleaning process. I’ll spare you the details here.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;create-the-ui&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Create the UI&lt;/h1&gt;
&lt;p&gt;Now we create the UI, as is the case for any Shiny app. This is pretty simple: first, we add the title panel and beautify it with some CSS.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ui &amp;lt;- fluidPage(
  
    titlePanel(
      h1(&amp;quot;A College Degree Lowers Job Automation Risk&amp;quot;,
        style = &amp;quot;font-family: &amp;#39;Helvetica Neue&amp;#39;;
        font-size: 20px; font-weight: 400; line-height: 1.1;&amp;quot;),
      windowTitle = &amp;quot;Find Out If Your Job Will Be Automated&amp;quot;
      ),&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we add the main panel, which includes a) the plot object, b) the footnote, and c) some CSS.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mainPanel(
      fluidRow(
        div(
           plotlyOutput(&amp;quot;plot&amp;quot;, height = &amp;#39;600px&amp;#39;, width = &amp;#39;850px&amp;#39;)
           ),align=&amp;quot;left&amp;quot;),
           p(&amp;quot;DATA: FREY &amp;amp; OSBORNE, BUREAU OF LABOR STATISTICS&amp;quot;,
           style = &amp;quot;font-family: &amp;#39;Helvetica Neue&amp;#39;;
        font-size: 8px; font-weight: 500; line-height: 1.1;&amp;quot;)
           )  

)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;server&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Server&lt;/h1&gt;
&lt;p&gt;Now we can define the &lt;code&gt;server()&lt;/code&gt; function, where the real magic of this visualization happens.&lt;/p&gt;
&lt;p&gt;All of the following takes place in the &lt;code&gt;server &amp;lt;- function(input, output, session) {}&lt;/code&gt; function.&lt;/p&gt;
&lt;div id=&#34;create-a-ggplot-object&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Create a ggplot Object&lt;/h2&gt;
&lt;p&gt;We know we’re going to need a ggplot object. In my case, we’ll need a plot object which relies on &lt;em&gt;probability, median income,&lt;/em&gt; and &lt;em&gt;risk of automation&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(aes(x=probability, y=A_MEDIAN, size=TOT_EMP, fill=typicaled, text = text)) +
    geom_point(color = &amp;quot;black&amp;quot;, alpha = .97, stroke = .1) +
    scale_size(range = c(1, 10), guide = &amp;#39;legend&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates the base of the object.&lt;/p&gt;
&lt;div id=&#34;add-a-tooltip&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Add a Tooltip&lt;/h3&gt;
&lt;p&gt;We also know that, like the Bloomberg visualization we’re replicating, we’re going to want a tooltip.&lt;/p&gt;
&lt;p&gt;That’s why we included &lt;code&gt;text&lt;/code&gt; in the above code, which we define here:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data %&amp;gt;% 
    mutate(text = glue::glue(&amp;#39;&amp;lt;span style=&amp;quot;font-size:16px;font-weight:bold&amp;quot;&amp;gt;{data$occupation}&amp;lt;/span&amp;gt;&amp;#39;,
                             &amp;#39;\n&amp;lt;b&amp;gt;Number employed:&amp;lt;/b&amp;gt; {scales::comma(data$TOT_EMP)}&amp;#39;,
                             &amp;#39;\n&amp;lt;b&amp;gt;Computerization prob:&amp;lt;/b&amp;gt; {data$probability}%&amp;#39;,
                             &amp;#39;\n&amp;lt;b&amp;gt;Education:&amp;lt;/b&amp;gt; {data$typicaled}&amp;#39;,
                             sep = &amp;quot;\n&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This tooltip takes in some CSS, some HTML, and creates a pretty tooltip! The &lt;code&gt;glue&lt;/code&gt; function is lovely.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;axes-and-labels&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Axes and Labels&lt;/h3&gt;
&lt;p&gt;The Bloomberg visualization is unique in that it has no axis lines. We can replicate that in &lt;code&gt;ggplot2&lt;/code&gt; via the following code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;theme(axis.line.x = ggplot2::element_blank(), 
      axis.line.y = ggplot2::element_blank(),
      axis.text = element_text(colour = &amp;quot;black&amp;quot;, size = 8))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But that’s not all!&lt;/p&gt;
&lt;p&gt;The Bloomberg visualization is also unique in that it doesn’t have axis titles. Moreover, the axis labels are a bit unique; the x axis increases sequentially by 10 until 90 where it transitions into ‘90%’ (the % is not present in the earlier numbers).&lt;/p&gt;
&lt;p&gt;We can mimic that kind of styling with this code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;xlab(&amp;quot;&amp;quot;) +
ylab(&amp;quot;&amp;quot;) +
labs(size= &amp;quot;&amp;quot;, alpha = &amp;quot;&amp;quot;, fill = &amp;quot;&amp;quot;) + 
scale_y_continuous(limits = c(-1000,240000), 
                   breaks = c(20000, 40000, 60000, 80000, 100000, 120000, 140000, 160000, 180000, 200000, 220000),
                   labels = c(&amp;quot;20K&amp;quot;, &amp;quot;40K&amp;quot;, &amp;quot;60K&amp;quot;, &amp;quot;80K&amp;quot;, &amp;quot;100K&amp;quot;, &amp;quot;120K&amp;quot;, &amp;quot;140K&amp;quot;, &amp;quot;160K&amp;quot;, &amp;quot;180K&amp;quot;, &amp;quot;200K&amp;quot;, &amp;quot;220K&amp;quot;)) +
scale_x_continuous(limits = c(0,100), 
                   breaks = c(10,20,30,40,50,60,70,80,90),
                   labels = c(10,20,30,40,50,60,70,80,&amp;quot;90%&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We create a bit of a buffer on the &lt;code&gt;limits&lt;/code&gt; argument so that we can add annotations. We’ll get to that later!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;colors&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Colors&lt;/h3&gt;
&lt;p&gt;To get as close as possible to Bloomberg’s plot, I’d also like to mimic their color scheme. I pulled the colors from their dotplot with this awesome &lt;a href=&#34;https://chrome.google.com/webstore/detail/color-picker/ohcpnigalekghcmgcdcenkpelffpdolg&#34;&gt;Chrome plugin&lt;/a&gt;; then, I added them to R with the following:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cols &amp;lt;- c(&amp;#39;No formal educational credential&amp;#39; = &amp;#39;#FA1A48&amp;#39;,&amp;#39;High school diploma or equivalent&amp;#39; = &amp;#39;#F79734&amp;#39;,
          &amp;quot;Postsecondary nondegree award&amp;quot; = &amp;#39;#FDFF1C&amp;#39;, &amp;quot;Associate&amp;#39;s degree&amp;quot; = &amp;#39;#1DDF50&amp;#39;, 
          &amp;quot;Bachelor&amp;#39;s degree&amp;quot; = &amp;#39;#34D19D&amp;#39;, &amp;quot;Master&amp;#39;s degree&amp;quot; = &amp;#39;#1BC0E9&amp;#39;,
          &amp;quot;Doctoral or professional degree&amp;quot; = &amp;#39;#1B91FF&amp;#39;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the plot object, we reference this with the following:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scale_fill_manual(values = cols, labels = c(&amp;#39;No formal educational credential&amp;#39;, &amp;#39;High school diploma or equivalent&amp;#39;, &amp;quot;Some college, no degree&amp;quot;,
                                             &amp;quot;Associate&amp;#39;s degree&amp;quot;, &amp;quot;Postsecondary nondegree award&amp;quot;,
                                             &amp;quot;Bachelor&amp;#39;s degree&amp;quot;, &amp;quot;Master&amp;#39;s degree&amp;quot;,
                                             &amp;quot;Doctoral or professional degree&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This essentially creates a fill scale (manually) with specified hex codes for colors. I also tried to manipulate the order of the legend but that didn’t translate to plotly (a documented problem, I believe).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;final-touches-for-the-ggplot&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Final Touches for the ggplot&lt;/h3&gt;
&lt;p&gt;Finally, we do something really hacky: add a regression line with &lt;code&gt;geom_segment&lt;/code&gt;. (I’m so sorry, R gods.)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;geom_segment(aes(x = 0, y = 54000, xend = 100, yend = 58000), size = .1) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have the ggplot object created; let’s convert it to a plotly object.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;create-a-plotly-object&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Create a plotly Object&lt;/h2&gt;
&lt;p&gt;This process relies on the &lt;code&gt;ggplotly&lt;/code&gt; function, which reads in a previously defined &lt;code&gt;ggplot&lt;/code&gt; object and converts into an interactive plotly one.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;introPlot &amp;lt;- ggplotly(introggPlot, tooltip = &amp;#39;text&amp;#39;, sort = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After creating the base plotly object, we move to some more complicated steps:&lt;/p&gt;
&lt;div id=&#34;legend-orientation&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Legend Orientation&lt;/h3&gt;
&lt;p&gt;We’d like the legend to orient horizontally, right above the plot. We do that with the following (inside the &lt;code&gt;layout&lt;/code&gt; function):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;legend = list(orientation = &amp;quot;h&amp;quot;,   
                     xanchor = &amp;quot;left&amp;quot;,
                     x = 0, y = 100,
                     traceorder = &amp;quot;normal&amp;quot;,
                     itemsizing = &amp;quot;constant&amp;quot;,
                     tracegroupgap = 0,
                     font = list(size = 13))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This does a few things. First, it orients the legend horizontally. Second, it anchors the legend to the left. Third, it defines the location (using x-y pairs) of the legend. &lt;code&gt;traceorder&lt;/code&gt; is meant to maintain the previous order from &lt;code&gt;ggplot&lt;/code&gt;, but that didn’t work in my version. &lt;code&gt;itemsizing&lt;/code&gt; is meant to keep the legend items with a constant size, as opposed to dynamic relative to the plot objects themselves. This also didn’t work. The last two arguments define the spacing between points and the font size of the legend text!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;axes-revisited&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Axes Revisited&lt;/h3&gt;
&lt;p&gt;We also see the Bloomberg viz has a right-aligned Y-axis. We can add that to plotly via the following code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;yaxis = list(
        tickfont = element_blank(),
        overlaying = &amp;quot;y&amp;quot;,
        side = &amp;quot;right&amp;quot;,
        title = &amp;quot;&amp;quot;
      )&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;some-aesthetic-changes&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Some Aesthetic Changes&lt;/h3&gt;
&lt;p&gt;Finally, we add three commands to the &lt;code&gt;layout&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;font = list(family = &amp;#39;Helvetica Neue&amp;#39;,
            color = &amp;quot;black&amp;quot;),
margin = list(r=1, l=1,t=1,b=1,pad = 0),
hoverlabel = list(bgcolor = &amp;#39;white&amp;#39;, color = &amp;#39;black&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This a) changes the font of the plot, b) adds a small margin, and c) stylizes the tooltip on hover.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;annotations&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Annotations&lt;/h3&gt;
&lt;p&gt;The last step is to mimic Bloomberg’s annotations. This is a little tough, specifically because it requires pretty specific x- and y-values.&lt;/p&gt;
&lt;p&gt;First, we’ll add their guiding annotations (that replace axis labels) that you can find in each corner:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;add_annotations(
      x = 1, y = 7500,
      xref = &amp;quot;x&amp;quot;,
      yref = &amp;quot;y&amp;quot;,
      text = &amp;quot;&amp;lt;b&amp;gt;Low paid,\nleast vulnerable&amp;lt;/b&amp;gt;&amp;quot;,
      xanchor = &amp;#39;center&amp;#39;,
      align = &amp;#39;left&amp;#39;,
      font = list(size = 10), 
      showarrow = F
    ) %&amp;gt;%
    add_annotations(
      x = 100, y = 7500,
      xref = &amp;quot;x&amp;quot;,
      yref = &amp;quot;y&amp;quot;,
      text = &amp;quot;&amp;lt;b&amp;gt;Low paid,\nmost vulnerable&amp;lt;/b&amp;gt;&amp;quot;,
      xanchor = &amp;#39;center&amp;#39;,
      align = &amp;#39;right&amp;#39;,
      font = list(size = 10), 
      showarrow = F
    ) %&amp;gt;%
    add_annotations(
      x = 1, y = 230000,
      xref = &amp;quot;x&amp;quot;,
      yref = &amp;quot;y&amp;quot;,
      text = &amp;quot;&amp;lt;b&amp;gt;Best paid,\nleast vulnerable&amp;lt;/b&amp;gt;&amp;quot;,
      xanchor = &amp;#39;center&amp;#39;,
      align = &amp;#39;left&amp;#39;,
      font = list(size = 10), 
      showarrow = F
    ) %&amp;gt;%
    add_annotations(
      x = 100, y = 230000,
      xref = &amp;quot;x&amp;quot;,
      yref = &amp;quot;y&amp;quot;,
      text = &amp;quot;&amp;lt;b&amp;gt;Best paid,\nmost vulnerable&amp;lt;/b&amp;gt;&amp;quot;,
      xanchor = &amp;#39;center&amp;#39;,
      align = &amp;#39;right&amp;#39;,
      font = list(size = 10), 
      showarrow = F
    )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we add annotations for ‘most and least likely to be automated’, as well as the y axis label.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;add_annotations(
      x = -5, y = -5000,
      xref = &amp;quot;x&amp;quot;,
      yref = &amp;quot;y&amp;quot;,
      text = glue::glue(sprintf(&amp;#39;\u2190&amp;#39;), &amp;quot;Least likely to be automated&amp;quot;),
      xanchor = &amp;#39;left&amp;#39;,
      align = &amp;#39;left&amp;#39;,
      font = list(size = 10), 
      showarrow = F
    ) %&amp;gt;%
    add_annotations(
      x = 105, y = -5000,
      xref = &amp;quot;x&amp;quot;,
      yref = &amp;quot;y&amp;quot;,
      text = glue::glue(&amp;quot;Most likely to be automated&amp;quot;, sprintf(&amp;#39;\u2192&amp;#39;)),
      xanchor = &amp;#39;right&amp;#39;,
      align = &amp;#39;right&amp;#39;,
      font = list(size = 10), 
      showarrow = F
    ) %&amp;gt;%
    add_annotations(
      x = 99, y = 243000,
      xref = &amp;quot;x&amp;quot;,
      yref = &amp;quot;y&amp;quot;,
      text = &amp;quot;Average annual wage&amp;quot;,
      xanchor = &amp;#39;center&amp;#39;,
      align = &amp;#39;right&amp;#39;,
      font = list(size = 10), 
      showarrow = F
    )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And finally, add a couple of plot annotations which label specific points. (We are not labelling a hundred occupations like Bloomberg did.)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;add_annotations(
      x = subset(data$probability, data$occupation == &amp;quot;Chief Executives&amp;quot;),
      y = subset(data$A_MEDIAN, data$occupation == &amp;quot;Chief Executives&amp;quot;),
      text = &amp;quot;Chief Executives&amp;quot;,
      xref = &amp;quot;x&amp;quot;,
      yref = &amp;quot;y&amp;quot;,
      xanchor = &amp;#39;center&amp;#39;,
      align = &amp;#39;right&amp;#39;,
      font = list(size = 10), 
      showarrow = TRUE,
      arrowhead = 0,
      ax = 50,
      ay = 25
    ) %&amp;gt;% 
    add_annotations(
      x = subset(data$probability, data$occupation == &amp;quot;Cashiers&amp;quot;),
      y = subset(data$A_MEDIAN, data$occupation == &amp;quot;Cashiers&amp;quot;),
      text = &amp;quot;Cashiers&amp;quot;,
      xref = &amp;quot;x&amp;quot;,
      yref = &amp;quot;y&amp;quot;,
      xanchor = &amp;#39;center&amp;#39;,
      align = &amp;#39;right&amp;#39;,
      font = list(size = 10), 
      showarrow = TRUE,
      arrowhead = 0,
      ax = 40,
      ay = -50
    )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finalize the plotly object with&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;config(displaylogo = F, showSendToCloud = F, displayModeBar = F)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re done! Run the application with the following code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;shinyApp(ui = ui, server = server)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we’re done! Find my interactive visualization &lt;a href=&#34;https://connorrothschild.shinyapps.io/2019-12-10/&#34;&gt;here&lt;/a&gt;. Find the code, uninterrupted and (hopefully) reproducible, &lt;em&gt;&lt;a href=&#34;https://github.com/connorrothschild/tidytuesday/blob/master/2019-12-10/app.R&#34;&gt;here&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Here’s the Bloomberg visualization:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figs/bloomberg.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And here’s mine:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figs/replication.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Creating a Streetmap of Springfield, MO</title>
      <link>/post/map-springfield/</link>
      <pubDate>Wed, 20 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/map-springfield/</guid>
      <description>


&lt;p&gt;In this post, I expand upon the wonderful &lt;a href=&#34;https://christianburkhart.de/&#34;&gt;Christian Burkhart’s&lt;/a&gt; wonderful &lt;a href=&#34;https://ggplot2tutor.com/streetmaps/streetmaps/&#34;&gt;ggplot2tor tutorial&lt;/a&gt; on streetmap creation using ggplot2. My process differs slightly from his in that I include text using &lt;code&gt;geom_label&lt;/code&gt;, rather than PowerPoint, to create the text annotations. (This was much more difficult!)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
library(osmdata)
library(sf)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, per the tutorial, we load street (and river, etc). data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;streets &amp;lt;- getbb(&amp;quot;Springfield Missouri&amp;quot;)%&amp;gt;%
  opq() %&amp;gt;%
  add_osm_feature(key = &amp;quot;highway&amp;quot;, 
                  value = c(&amp;quot;motorway&amp;quot;, &amp;quot;primary&amp;quot;, 
                            &amp;quot;secondary&amp;quot;, &amp;quot;tertiary&amp;quot;)) %&amp;gt;%
  osmdata_sf()

small_streets &amp;lt;- getbb(&amp;quot;Springfield Missouri&amp;quot;)%&amp;gt;%
  opq() %&amp;gt;%
  add_osm_feature(key = &amp;quot;highway&amp;quot;, 
                  value = c(&amp;quot;residential&amp;quot;, &amp;quot;living_street&amp;quot;,
                            &amp;quot;unclassified&amp;quot;,
                            &amp;quot;service&amp;quot;, &amp;quot;footway&amp;quot;)) %&amp;gt;%
  osmdata_sf()

river &amp;lt;- getbb(&amp;quot;Springfield Missouri&amp;quot;)%&amp;gt;%
  opq() %&amp;gt;%
  add_osm_feature(key = &amp;quot;waterway&amp;quot;, value = &amp;quot;river&amp;quot;) %&amp;gt;%
  osmdata_sf()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we define the plot limits, using the lat-long found in the last step.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;right = -93.175
left = -93.395
bottom = 37
top = 37.275&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In my plot, I’m going to create a text box to hold the city, state, and lat/long combination.&lt;/p&gt;
&lt;p&gt;We can create the parameters for this box through some manipulations of the existing plot limits:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;top_rect = (top + bottom)/2.0035
bot_rect = bottom + .01
box_height = (top_rect + bot_rect)/2
mid_box = (left + right)/2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we can create a black and white plot. This follows the same structure as the ggplot2tor tutorial:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_bw &amp;lt;- ggplot() +
  geom_sf(data = streets$osm_lines,
          inherit.aes = FALSE,
          color = &amp;quot;#000000&amp;quot;,
          size = .3,
          alpha = .8) +
  geom_sf(data = small_streets$osm_lines,
          inherit.aes = FALSE,
          color = &amp;quot;#000000&amp;quot;,
          size = .1,
          alpha = .6) +
  geom_sf(data = river$osm_lines,
          inherit.aes = FALSE,
          color = &amp;quot;#000000&amp;quot;,
          size = .2,
          alpha = .5) +
  coord_sf(xlim = c(left, right),
           ylim = c(bottom, top),
           expand = FALSE) +
  theme_void() +
  theme(
    plot.background = element_rect(fill = &amp;quot;#FFFFFF&amp;quot;),
    panel.background = element_rect(fill = &amp;quot;#FFFFFF&amp;quot;),
    plot.margin=unit(c(0,-0.5,0,0), &amp;quot;mm&amp;quot;)
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we can introduce our text elements using &lt;code&gt;geom_text&lt;/code&gt; (as well as borders using &lt;code&gt;geom_rect&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;map_bw &amp;lt;- plot_bw +
  # big box
  geom_rect(
    aes(
      xmax = right - .005,
      xmin = left + .005,
      ymin = bottom + .005,
      ymax = top - .005
    ),
    alpha = 0,
    color = &amp;quot;black&amp;quot;,
    size = 1
  ) +
  # smaller, label box
  geom_rect(
    aes(
      xmax = right - .01,
      xmin = left + .01,
      ymin = bot_rect,
      ymax = top_rect
    ),
    alpha = .75,
    color = &amp;quot;black&amp;quot;,
    fill = &amp;quot;white&amp;quot;,
    size = .6
  ) +
  # springfield
  geom_text(
    aes(x = mid_box, y = box_height + .002,
        label = &amp;quot;SPRINGFIELD\n&amp;quot;),
    color = &amp;quot;black&amp;quot;,
    family = &amp;quot;Lato&amp;quot;,
    fontface = &amp;quot;bold&amp;quot;,
    size = 9
  ) +
  # a line that goes behind &amp;#39;Missouri&amp;#39;
  geom_segment(aes(
    x = left + .03,
    y = (top_rect + bottom) / 2,
    xend = right - .03,
    yend = (top_rect + bottom) / 2
  ), color = &amp;quot;black&amp;quot;) +
  # Missouri label
  geom_label(
    aes(x = mid_box, y = box_height - .005,
        label = &amp;quot;MISSOURI&amp;quot;),
    color = &amp;quot;black&amp;quot;,
    fill = &amp;quot;white&amp;quot;,
    # alpha = .9,
    label.size = 0,
    family = &amp;quot;Lato&amp;quot;,
    # fontface = &amp;quot;thin&amp;quot;,
    size = 7
  ) +
  # coords
  geom_text(
    aes(x = mid_box, y = box_height - .02,
        label = &amp;quot;37.2090° N / 93.2923° W&amp;quot;),
    color = &amp;quot;black&amp;quot;,
    family = &amp;quot;Lato&amp;quot;,
    size = 4
  ) +
  # me!
  geom_label(
    aes(
      x = left + .035,
      y = top_rect + .005,
      label = &amp;quot;Design: Connor Rothschild&amp;quot;
    ),
    size = 1.5,
    color = &amp;quot;black&amp;quot;,
    fill = &amp;quot;white&amp;quot;,
    label.size = 0,
    family = &amp;quot;Lato&amp;quot;
  )

map_bw&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/map-springfield/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Finally, save the plot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggsave(map_bw, filename = &amp;quot;bw_springfield_map.png&amp;quot;, width = 3.234, height = 5.016)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Replicate that code with different colors:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_gold &amp;lt;- ggplot() +
  geom_sf(
    data = streets$osm_lines,
    inherit.aes = FALSE,
    color = &amp;quot;steelblue&amp;quot;,
    size = .3,
    alpha = .8
  ) +
  geom_sf(
    data = small_streets$osm_lines,
    inherit.aes = FALSE,
    color = &amp;quot;#ffbe7f&amp;quot;,
    size = .1,
    alpha = .6
  ) +
  geom_sf(
    data = river$osm_lines,
    inherit.aes = FALSE,
    color = &amp;quot;#ffbe7f&amp;quot;,
    size = .2,
    alpha = .5
  ) +
  coord_sf(
    xlim = c(left, right),
    ylim = c(bottom, top),
    expand = FALSE
  ) +
  theme_void() +
  theme(
    plot.background = element_rect(fill = &amp;quot;#282828&amp;quot;),
    panel.background = element_rect(fill = &amp;quot;#282828&amp;quot;),
    plot.margin = unit(c(0, -0.5, 0, 0), &amp;quot;mm&amp;quot;)
  )

map_gold &amp;lt;- plot_gold +
  geom_rect(
    aes(
      xmax = right - .005,
      xmin = left + .005,
      ymin = bottom + .005,
      ymax = top - .005
    ),
    alpha = 0,
    color = &amp;quot;white&amp;quot;,
    size = 1
  ) +
  geom_rect(
    aes(
      xmax = right - .01,
      xmin = left + .01,
      ymin = bot_rect,
      ymax = top_rect
    ),
    alpha = .5,
    color = &amp;quot;#ffbe7f&amp;quot;,
    fill = &amp;quot;#282828&amp;quot;,
    size = .5
  ) +
  geom_text(
    aes(x = mid_box, y = box_height + .002,
        label = &amp;quot;SPRINGFIELD\n&amp;quot;),
    color = &amp;quot;white&amp;quot;,
    family = &amp;quot;Lato&amp;quot;,
    fontface = &amp;quot;bold&amp;quot;,
    size = 9
  ) +
  geom_segment(aes(
    x = left + .03,
    y = (top_rect + bottom) / 2,
    xend = right - .03,
    yend = (top_rect + bottom) / 2
  ),
  color = &amp;quot;#ffbe7f&amp;quot;) +
  geom_label(
    aes(x = mid_box, y = box_height - .005,
        label = &amp;quot;MISSOURI&amp;quot;),
    color = &amp;quot;white&amp;quot;,
    fill = &amp;quot;#282828&amp;quot;,
    # alpha = .9,
    label.size = 0,
    family = &amp;quot;Lato&amp;quot;,
    # fontface = &amp;quot;thin&amp;quot;,
    size = 7
  ) +
  geom_text(
    aes(x = mid_box, y = box_height - .02,
        label = &amp;quot;37.2090° N / 93.2923° W&amp;quot;),
    color = &amp;quot;white&amp;quot;,
    family = &amp;quot;Lato&amp;quot;,
    size = 4
  ) +
  geom_label(
    aes(
      x = left + .035,
      y = top_rect + .005,
      label = &amp;quot;Design: Connor Rothschild&amp;quot;
    ),
    size = 1.5,
    color = &amp;quot;white&amp;quot;,
    fill = &amp;quot;#282828&amp;quot;,
    label.size = 0,
    family = &amp;quot;Lato&amp;quot;
  )

map_gold&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/map-springfield/index_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggsave(map_gold,
       filename = &amp;quot;gold_springfield_map.png&amp;quot;,
       width = 3.234,
       height = 5.016)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to Scrollytell in R: Automation and Its Impact on Jobs</title>
      <link>/post/automation-scrollytell/</link>
      <pubDate>Sat, 26 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/post/automation-scrollytell/</guid>
      <description>


&lt;p&gt;I’ve always been interested in data visualization, and my most recent sub-passion has been &lt;em&gt;scrollytelling&lt;/em&gt;. I’ve seen numerous examples of amazing scrolling articles, from sites such as &lt;a href=&#34;https://pudding.cool/&#34;&gt;The Pudding&lt;/a&gt;, the &lt;a href=&#34;https://www.nytimes.com/&#34;&gt;New York Times&lt;/a&gt;, and &lt;a href=&#34;https://fivethirtyeight.com/&#34;&gt;FiveThirtyEight&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Although most of these sites rely on the same high-powered visualization tools (such as &lt;a href=&#34;https://d3js.org/&#34;&gt;D3.js&lt;/a&gt;) to create their stories, the learning curve for those are a bit too steep for a full-time college student to pursue (although &lt;a href=&#34;https://github.com/connorrothschild/D3.js&#34;&gt;I am trying&lt;/a&gt;!).&lt;/p&gt;
&lt;p&gt;Thankfully, I came across some examples of scrollytelling in my language of choice, R.&lt;/p&gt;
&lt;p&gt;What follows is a scrollytelling recreation of the &lt;a href=&#34;https://connorrothschild.github.io/r/automation/&#34;&gt;very first visualization I ever made&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(shiny)
library(scrollytell)
library(shinyjs)
library(ggvis)
library(plotly)

theme_set(theme_minimal())&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;construct-an-updating-plot-object&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Construct an Updating Plot Object&lt;/h2&gt;
&lt;p&gt;Once the data (&lt;a href=&#34;https://github.com/connorrothschild/shiny-scrollytell/tree/master/data&#34;&gt;which can be found here&lt;/a&gt;) is already &lt;a href=&#34;https://connorrothschild.github.io/r/automation/#load-datasets&#34;&gt;loaded and cleaned&lt;/a&gt;, we construct a plot object that will update as the user scrolls. (&lt;a href=&#34;https://github.com/scottyd22/dream_team&#34;&gt;Other R users&lt;/a&gt; make multiple plots; either way is fine.)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot &amp;lt;- data %&amp;gt;% 
  filter(if (add != 8) add &amp;gt;= reveal else reveal %in% c(1:8)) %&amp;gt;%
  ggplot() +
  geom_point(mapping=aes(x=A_MEDIAN, y=probability, size=TOT_EMP,
                         alpha=ifelse(add == reveal, 1/5, 1/10), col=typicaled,
                         text = glue::glue(&amp;#39;&amp;lt;b&amp;gt;Occupation&amp;lt;/b&amp;gt;: {occupation}
                                            &amp;lt;b&amp;gt;Probability of Automation&amp;lt;/b&amp;gt;: {probability}%
                                            &amp;lt;b&amp;gt;Median Income&amp;lt;/b&amp;gt;: ${A_MEDIAN}
                                            &amp;lt;b&amp;gt;Number of Workers&amp;lt;/b&amp;gt;: {TOT_EMP}&amp;#39;))) +
  scale_size(range = c(1, 20)) +
  xlab(&amp;quot;\nMedian Income&amp;quot;) +
  ylab(&amp;quot;Probability of Automation&amp;quot;) +
  labs(size= &amp;quot;&amp;quot;, col= &amp;quot;&amp;quot;, alpha = &amp;quot;&amp;quot;) +
  scale_color_manual(values = cols, breaks = legend_ord) +
  scale_x_continuous(labels=scales::dollar_format(prefix=&amp;quot;$&amp;quot;), limits = c(25000,200000)) +
  scale_y_continuous(labels=scales::number_format(suffix=&amp;quot;%&amp;quot;), limits = c(0,100)) +
  # cr::drop_axis(axis = &amp;quot;y&amp;quot;) +
  theme(axis.line.x = ggplot2::element_line(colour = NULL, 
                                            size = NULL, linetype = NULL, lineend = NULL), 
        axis.line.y = ggplot2::element_blank(),
        panel.grid.major.x = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But wait, what’s that second line of code?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filter(if (add != 8) add &amp;gt;= reveal else reveal %in% c(1:8))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This may make &lt;em&gt;0 sense&lt;/em&gt; right now, but here’s why we have it.&lt;/p&gt;
&lt;p&gt;The important part (and somewhat difficult thing to understand) about this step is that your plot object has some &lt;strong&gt;data which corresponds to an updating variable&lt;/strong&gt;. For me, I added a variable called &lt;em&gt;reveal&lt;/em&gt; for each step of the visualization. For me, this meant having reveal correspond to a typical level of education for a given job.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- data %&amp;gt;% 
  mutate(reveal = case_when(
    typicaled == &amp;quot;No formal educational credential&amp;quot; ~ 1,
    typicaled == &amp;quot;High school diploma or equivalent&amp;quot; ~ 2,
    typicaled == &amp;quot;Postsecondary nondegree award&amp;quot; ~ 3,
    typicaled == &amp;quot;Some college, no degree&amp;quot; ~ 0,
    typicaled == &amp;quot;Associate&amp;#39;s degree&amp;quot; ~ 4,
    typicaled == &amp;quot;Bachelor&amp;#39;s degree&amp;quot; ~ 5,
    typicaled == &amp;quot;Master&amp;#39;s degree&amp;quot; ~ 6,
    typicaled == &amp;quot;Doctoral or professional degree&amp;quot; ~ 7,
  ))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What this means is that every time the post observes an event (a scroll), it will update according to the number in the &lt;em&gt;reveal&lt;/em&gt; column.&lt;/p&gt;
&lt;p&gt;So, when my plot object has a line of code which says:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filter(if (add != 8) add &amp;gt;= reveal else reveal %in% c(1:8))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That can be read as “Update the plot object to include all data points &lt;strong&gt;up until the current point&lt;/strong&gt; encoded in reveal.”&lt;/p&gt;
&lt;p&gt;But, it also depends on what level of &lt;em&gt;add&lt;/em&gt; we are at; if &lt;em&gt;add&lt;/em&gt; == 8 (the last data point, e.g. the concluding plot), then we want to show &lt;em&gt;all data points&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;“Okay, okay. But what is &lt;em&gt;add&lt;/em&gt;???”&lt;/p&gt;
&lt;p&gt;Good question. &lt;em&gt;add&lt;/em&gt; is the variable I constructed to correspond to the user’s input (in this case, the scroll!). When we put it all together, we’re going to wrap our plot object into a rendering function &lt;em&gt;inside&lt;/em&gt; the server function. Confusing? It looks like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;server &amp;lt;- function(input, output, session) {
  
  output$plot &amp;lt;- renderPlotly({
    
    add &amp;lt;- input$scr
    
    plot &amp;lt;- 
      # static ggplot goes here
      
      ggplotly(plot) %&amp;gt;%
      # other ggplotly parameters go here
      
  })
  
  # render the plot here
  output$scr &amp;lt;- renderScrollytell({scrollytell()})
  renderText(paste0(&amp;quot;Section: &amp;quot;, input$scr))
  observe({cat(&amp;quot;section:&amp;quot;, input$scr, &amp;quot;\n&amp;quot;)})
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What’s happening here? Within the server function, we’re doing two things:&lt;/p&gt;
&lt;p&gt;First, we’re creating the plot object. Because we have the command &lt;em&gt;add &amp;lt;- input&lt;span class=&#34;math inline&#34;&gt;\(scr* **inside** the function `renderPlotly`, our plot object will be dynamically updated along with *input\)&lt;/span&gt;scr&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This makes more sense when you connect it to the ui. In our ui function, we include a &lt;code&gt;scrolly_container&lt;/code&gt; from the scrollytell package. Within that, we make our &lt;code&gt;outputId&lt;/code&gt; correspond to the name of our updating input (in this case, &lt;em&gt;scr&lt;/em&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ui &amp;lt;- fluidPage(
  
  # a bunch of introductory stuff, css stuff
  
  # scrollytelling plot
  scrolly_container(outputId = &amp;quot;scr&amp;quot;, 
                       scrolly_graph(
                                     ## this is the plot object that we made earlier:
                                     plotlyOutput(&amp;quot;plot&amp;quot;, height = &amp;#39;600px&amp;#39;)
                                     
                    ), 
                    scrolly_sections(
                      ## each of these sections corresponds to an update
                      ## the number after id = corresponds to the `scr` update
                      ## the render_text() function will be discussed later
                      scrolly_section(id = 0, render_text(0)),
                      scrolly_section(id = 1, render_text(1)),
                      scrolly_section(id = 2, render_text(2)),
                      scrolly_section(id = 3, render_text(3)),
                      scrolly_section(id = 4, render_text(4)),
                      scrolly_section(id = 5, render_text(5)),
                      scrolly_section(id = 6, render_text(6)),
                      scrolly_section(id = 7, render_text(7)),
                      scrolly_section(id = 8, render_text(8)),
                      # add a scrolly_section with nothing in it; 
                      # this buffer prevents the plot from disappearing while reading last section
                      scrolly_section(id = &amp;quot;buffer&amp;quot;, br())
                    )
                    
  ),
 
  # a bunch of concluding stuff, other html 

)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, the simplest way to think about this so far is:&lt;/p&gt;
&lt;p&gt;Construct a plot object with some updating variable (in my case, &lt;em&gt;reveal&lt;/em&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filter(if (add != 8) add &amp;gt;= reveal else reveal %in% c(1:8))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make that variable correspond with some input variable (in my case &lt;em&gt;add&lt;/em&gt;, which is created from the &lt;em&gt;input$scr&lt;/em&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;server &amp;lt;- function(input, output, session) {
  
  output$plot &amp;lt;- renderPlotly({
    
    add &amp;lt;- input$scr
    #... &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Render your plot object in &lt;code&gt;scrolly_graph&lt;/code&gt;, and provide input updates via each &lt;code&gt;scrolly_section&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ui &amp;lt;- fluidPage(
  
  # a bunch of introductory stuff, css stuff
  
  # scrollytelling plot
  scrolly_container(outputId = &amp;quot;scr&amp;quot;, 
                       scrolly_graph(plotlyOutput(&amp;quot;plot&amp;quot;, height = &amp;#39;600px&amp;#39;)
                                     
                    ), 
                    scrolly_sections(
                      scrolly_section(id = 0, render_text(0)),
                      scrolly_section(id = 1, render_text(1)),
                      
                      # ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Render your plots in your server function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;server &amp;lt;- function(input, output, session) {
  
  output$plot &amp;lt;- 
    #...
  })
  
  output$scr &amp;lt;- renderScrollytell({scrollytell()})
  renderText(paste0(&amp;quot;Section: &amp;quot;, input$scr))
  observe({cat(&amp;quot;section:&amp;quot;, input$scr, &amp;quot;\n&amp;quot;)})
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s (most of) it for the plot section. You can play around with other customizations too (for example, the alphas for my circles correspond to an &lt;code&gt;ifelse&lt;/code&gt; around &lt;em&gt;reveal&lt;/em&gt;, so old circles are faded out compared to new ones).&lt;/p&gt;
&lt;div id=&#34;create-a-series-of-text-reveals&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Create a Series of Text Reveals&lt;/h3&gt;
&lt;p&gt;Next, we create text sections using &lt;code&gt;HTML&lt;/code&gt; and some helper functions which beautify them.&lt;/p&gt;
&lt;p&gt;First, we create the text boxes for each section following a similar naming convention:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;text1 &amp;lt;- HTML(&amp;quot;&amp;lt;H2&amp;gt; No education credentials &amp;lt;/H2&amp;gt;
              &amp;lt;br&amp;gt; &amp;lt;p&amp;gt; Workers with &amp;lt;font color=&amp;#39;#A00042&amp;#39;&amp;gt;no formal education credential&amp;lt;/font&amp;gt; have a median income of $25,636.
              &amp;lt;br&amp;gt; On average, those occupations have a &amp;lt;b&amp;gt;90% chance&amp;lt;/b&amp;gt; of job automation.
              &amp;lt;br&amp;gt;&amp;lt;br&amp;gt; There are 23,765,700 workers with &amp;lt;font color=&amp;#39;#A00042&amp;#39;&amp;gt;no formal education credential&amp;lt;/font&amp;gt;.&amp;lt;p&amp;gt;&amp;quot;)

text2 &amp;lt;- HTML(&amp;quot;&amp;lt;H2&amp;gt; High school diplomas &amp;lt;/H2&amp;gt;
              &amp;lt;br&amp;gt; &amp;lt;p&amp;gt;Workers with &amp;lt;font color=&amp;#39;#F56C42&amp;#39;&amp;gt;high school diplomas&amp;lt;/font&amp;gt; have a median income of $25,636.
              &amp;lt;br&amp;gt; On average, those occupations have a &amp;lt;b&amp;gt;60% chance&amp;lt;/b&amp;gt; of job automation.
              &amp;lt;br&amp;gt;&amp;lt;br&amp;gt; There are 33,129,910 workers with a &amp;lt;font color=&amp;#39;#F56C42&amp;#39;&amp;gt;high school diploma&amp;lt;/font&amp;gt;.&amp;lt;p&amp;gt;&amp;quot;)

# ... &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we create a function &lt;code&gt;render_text&lt;/code&gt; which beautifies that HTML with CSS:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;text &amp;lt;- function(num){
  p(
    switch(num,
           text1,
           text2,
           text3,
           text4,
           text5,
           text6,
           text7,
           text8
    )
  )
}

render_text &amp;lt;- function(num){
  
  div(
    text(num), class = &amp;quot;text&amp;quot;
  )
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For all 8 of the above &lt;em&gt;text_&lt;/em&gt;s, we’ve created a switch function which calls them depnding on the number passed to &lt;code&gt;render_text&lt;/code&gt;. Then, we apply paragraph format, put them in their own div, and apply the &lt;em&gt;text&lt;/em&gt; class in our CSS sheet.&lt;/p&gt;
&lt;p&gt;How does this work?&lt;/p&gt;
&lt;p&gt;Recall that above, in our ui section, we had the following:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scrolly_sections(
                      HTML(&amp;#39;&amp;lt;center&amp;gt;&amp;#39;),
                      scrolly_section(id = 0, render_text(0)),
                      scrolly_section(id = 1, render_text(1)),
                      # ...
                      
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, our &lt;code&gt;scrolly_section&lt;/code&gt;s take two inputs: our ID and our corresponding text. Rather than write out lengthy text boxes in each &lt;code&gt;scrolly_section&lt;/code&gt;, we can construct them in a single file and then knit them all into the same format using &lt;code&gt;render_text&lt;/code&gt;. This makes life a lot easier.&lt;/p&gt;
&lt;p&gt;So, on each scroll (or observation), the app will update 1) the plot object, by adding &lt;em&gt;add&lt;/em&gt; and updating according to &lt;em&gt;reveal&lt;/em&gt;, and 2) the text, by running &lt;code&gt;render_text&lt;/code&gt; which calls &lt;code&gt;text&lt;/code&gt; which beautifies our HTML text.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;final-touches&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Final Touches&lt;/h3&gt;
&lt;p&gt;Surprisingly, that’s about it. The rest of the app is built on &lt;code&gt;fluidPage&lt;/code&gt;, and organizing via rows and columns in your shiny app. Your app should have a CSS style sheet (in the &lt;a href=&#34;https://shiny.rstudio.com/articles/css.html&#34;&gt;www folder&lt;/a&gt;). You may also include other plots (for my post, I have an introductory plot with a bit more context), which you will have to separately create and render in your server function.&lt;/p&gt;
&lt;p&gt;All in all, my code looks like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ui &amp;lt;- fluidPage(
  
  # suppress warning messages while data is loading on-screen 
  tags$style(type=&amp;quot;text/css&amp;quot;,
             &amp;quot;.shiny-output-error { visibility: hidden; }&amp;quot;,
             &amp;quot;.shiny-output-error:before { visibility: hidden; }&amp;quot;),
  tags$head(
    includeCSS(&amp;quot;www/style.css&amp;quot;)
  ),
  
  # article title &amp;amp; name
  fluidRow(HTML(&amp;quot;&amp;lt;center&amp;gt;
                &amp;lt;h1&amp;gt;Automation and Its Impact on Jobs&amp;lt;/h1&amp;gt;
                &amp;lt;p style=&amp;#39;font-size:26px&amp;#39;&amp;gt; by &amp;lt;a href=&amp;#39;https://connorrothschild.github.io/&amp;#39; target=&amp;#39;_blank&amp;#39;&amp;gt;Connor Rothschild&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
                &amp;lt;/center&amp;gt;&amp;quot;)
  ),
  
  br(),
  
  fluidRow(
    column(1),
    
    column(10,
           # intro text
           fluidRow(id=&amp;#39;text&amp;#39;,
                    column(1),
                    column(10, 
                           br(),
                           text0,
                           hr(),
                           h1(
                             class = &amp;quot;instructions&amp;quot;,
                             &amp;quot;How to read this chart:&amp;quot;, 
                             br(),
                             br(),
                             &amp;quot;The size of each&amp;quot;, icon(&amp;quot;circle&amp;quot;), &amp;quot;corresponds to the number of workers in that job.&amp;quot;,
                             br(),
                             &amp;quot;Hover over each&amp;quot;, icon(&amp;quot;circle&amp;quot;), &amp;quot;to see details on the occupation&amp;#39;s income and probability of automation.&amp;quot;,
                             br(),
                             &amp;quot;Double click on a&amp;quot;, icon(&amp;quot;circle&amp;quot;), &amp;quot;in the legend to focus on a specific level of education.&amp;quot; 
                           )),
                    column(1)),
           # plot object for intro
           plotlyOutput(&amp;quot;introPlot&amp;quot;, height = &amp;#39;400px&amp;#39;)
           ),
    
    column(1),
    
           ),
  
  # scrollytelling plot
  scrolly_container(&amp;quot;scr&amp;quot;
                    , scrolly_graph( br(), 
                                     br(),
                                     textOutput(&amp;quot;section&amp;quot;),
                                     br(),
                                     HTML(&amp;#39;&amp;lt;center&amp;gt;&amp;#39;),
                                     plotlyOutput(&amp;quot;plot&amp;quot;, height = &amp;#39;600px&amp;#39;),
                                     HTML(&amp;#39;&amp;lt;/center&amp;gt;&amp;#39;)
                                     
                    )
                    , scrolly_sections(
                      HTML(&amp;#39;&amp;lt;center&amp;gt;&amp;#39;),
                      scrolly_section(id = 0, render_text(0)),
                      scrolly_section(id = 1, render_text(1)),
                      scrolly_section(id = 2, render_text(2)),
                      scrolly_section(id = 3, render_text(3)),
                      scrolly_section(id = 4, render_text(4)),
                      scrolly_section(id = 5, render_text(5)),
                      scrolly_section(id = 6, render_text(6)),
                      scrolly_section(id = 7, render_text(7)),
                      scrolly_section(id = 8, render_text(8)),
                      # add a scrolly_section with nothing in it; 
                      # this buffer prevents the plot from disappearing while reading last section
                      scrolly_section(id = &amp;quot;buffer&amp;quot;, br()),
                      HTML(&amp;#39;&amp;lt;/center&amp;gt;&amp;#39;)
                    )
                    
  ),
  
  # concluding text
  div(fluidRow(id = &amp;#39;text&amp;#39;,
               column(2),
               column(8, 
                      concludingtext,
                      br()
               ),
               column(2)
  ), style = &amp;#39;margin-top: -300px;&amp;#39;),
  
  br(),
  br(),
  br(),
  hr(),
  
  fluidRow(
    column(1),
    column(10,
           technicalnotes
    ),
    column(1)
  ),
  br(),
  br(),
column(1)

)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the server looks like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;server &amp;lt;- function(input, output, session) {
  
  output$plot &amp;lt;- renderPlotly({
    
    add &amp;lt;- input$scr
    
    plot &amp;lt;- data %&amp;gt;% 
      filter(typicaled != &amp;quot;Some college, no degree&amp;quot;) %&amp;gt;%
      filter(if (add != 8) add &amp;gt;= reveal else reveal %in% c(1:8)) %&amp;gt;%
      ggplot() +
      geom_point(mapping=aes(x=A_MEDIAN, y=probability, size=TOT_EMP,
                             alpha=ifelse(add == reveal, 1/5, 1/10), col=typicaled,
                             text = glue::glue(&amp;#39;&amp;lt;b&amp;gt;Occupation&amp;lt;/b&amp;gt;: {occupation}
                                                &amp;lt;b&amp;gt;Probability of Automation&amp;lt;/b&amp;gt;: {probability}%
                                                &amp;lt;b&amp;gt;Median Income&amp;lt;/b&amp;gt;: ${A_MEDIAN}
                                                &amp;lt;b&amp;gt;Number of Workers&amp;lt;/b&amp;gt;: {TOT_EMP}&amp;#39;))) +
      scale_size(range = c(1, 20)) +
      xlab(&amp;quot;\nMedian Income&amp;quot;) +
      ylab(&amp;quot;Probability of Automation&amp;quot;) +
      labs(size= &amp;quot;&amp;quot;, col= &amp;quot;&amp;quot;, alpha = &amp;quot;&amp;quot;) +
      scale_color_manual(values = cols, breaks = legend_ord) +
      scale_x_continuous(labels=scales::dollar_format(prefix=&amp;quot;$&amp;quot;), limits = c(25000,200000)) +
      scale_y_continuous(labels=scales::number_format(suffix=&amp;quot;%&amp;quot;), limits = c(0,100)) +
      # cr::drop_axis(axis = &amp;quot;y&amp;quot;) +
      theme(axis.line.x = ggplot2::element_line(colour = NULL, 
                                                size = NULL, linetype = NULL, lineend = NULL), 
            axis.line.y = ggplot2::element_blank(),
            panel.grid.major.x = element_blank())
    
    ggplotly(plot, tooltip = &amp;#39;text&amp;#39;) %&amp;gt;%
    layout(
      title = list(element_blank()),
      legend = list(x = 0.65, y = 0.925),
      font = list(family = &amp;#39;Lato&amp;#39;),
      margin=list(t=50),
      hoverlabel = list(bgcolor = &amp;#39;whitesmoke&amp;#39;, color = &amp;#39;DarkGray&amp;#39;)) %&amp;gt;%
    config(displaylogo = F, showSendToCloud = F, displayModeBar = F)
    
  })
    
  output$introPlot &amp;lt;- renderPlotly({introPlot})
  output$scr &amp;lt;- renderScrollytell({scrollytell()})
  renderText(paste0(&amp;quot;Section: &amp;quot;, input$scr))
  observe({cat(&amp;quot;section:&amp;quot;, input$scr, &amp;quot;\n&amp;quot;)})
  
}

# Run the application
shinyApp(ui = ui, server = server)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;the-output&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Output&lt;/h2&gt;
&lt;p&gt;You can see the final output of my post &lt;a href=&#34;https://connorrothschild.shinyapps.io/automation/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can look at the code and all of its context on GitHub &lt;a href=&#34;https://github.com/connorrothschild/shiny-scrollytell&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>TidyTuesday: Powerlifting</title>
      <link>/post/tidy-tuesday-powerlifting/</link>
      <pubDate>Tue, 08 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/post/tidy-tuesday-powerlifting/</guid>
      <description>


&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
library(tidyverse)
library(ggtext)
library(gifski)
library(gganimate)
library(cr)

set_cr_theme(font = &amp;quot;lato&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;load-and-clean-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Load and Clean Data&lt;/h2&gt;
&lt;p&gt;First, read in the data from &lt;a href=&#34;https://openpowerlifting.org/data&#34; class=&#34;uri&#34;&gt;https://openpowerlifting.org/data&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# df &amp;lt;- readr::read_csv(&amp;quot;openpowerlifting-2019-09-20.csv&amp;quot;)
# 
# df_clean &amp;lt;- df %&amp;gt;% 
#   janitor::clean_names()
# 
# ipf_lifts &amp;lt;- df_clean %&amp;gt;% 
#   select(name:weight_class_kg, starts_with(&amp;quot;best&amp;quot;), place, date, federation, meet_name)  %&amp;gt;% 
#   filter(!is.na(date)) %&amp;gt;% 
#   filter(federation == &amp;quot;IPF&amp;quot;)

ipf_lifts &amp;lt;- readr::read_csv(&amp;quot;data/ipf_lifts.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Clean ipf_lifts, and reshape the three lifts into one column:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ipf_lifts &amp;lt;- ipf_lifts %&amp;gt;% 
  mutate(year = lubridate::year(date))

ipf_lifts_reshape &amp;lt;- ipf_lifts %&amp;gt;% 
  tidyr::pivot_longer(cols = c(&amp;quot;best3squat_kg&amp;quot;, &amp;quot;best3bench_kg&amp;quot;, &amp;quot;best3deadlift_kg&amp;quot;), names_to = &amp;quot;lift&amp;quot;) %&amp;gt;% 
  select(name, sex, year, lift, value)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For my visualization, I’m only concerned with the &lt;em&gt;heaviest&lt;/em&gt; lifts from each year:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ipf_lifts_maxes &amp;lt;- ipf_lifts_reshape %&amp;gt;% 
  group_by(year, sex, lift) %&amp;gt;% 
  top_n(1, value) %&amp;gt;% 
  ungroup %&amp;gt;% 
  distinct(year, lift, value, .keep_all = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to construct a dumbbell plot, we need both male and female observations in the same row.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;max_pivot &amp;lt;- ipf_lifts_maxes %&amp;gt;% 
  spread(sex, value)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s try to construct a dataframe for each sex:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;male_lifts &amp;lt;- max_pivot %&amp;gt;% 
  select(-name) %&amp;gt;% 
  filter(!is.na(M)) %&amp;gt;% 
  group_by(year, lift) %&amp;gt;% 
  summarise(male = mean(M))

female_lifts &amp;lt;- max_pivot %&amp;gt;% 
  select(-name) %&amp;gt;% 
  filter(!is.na(`F`)) %&amp;gt;% 
  group_by(year, lift) %&amp;gt;% 
  summarise(female = mean(`F`))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And join them:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;max_lifts &amp;lt;- merge(male_lifts, female_lifts)

max_lifts_final &amp;lt;- max_lifts %&amp;gt;% 
  group_by(year, lift) %&amp;gt;% 
  mutate(diff = male - female)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;visualize&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualize&lt;/h2&gt;
&lt;p&gt;Finally, we can construct the visualization.&lt;/p&gt;
&lt;p&gt;First, a static viz (thanks to hrbrmaster’s &lt;code&gt;ggalt&lt;/code&gt; &lt;a href=&#34;https://rud.is/b/2016/04/17/ggplot2-exercising-with-ggalt-dumbbells/&#34;&gt;package&lt;/a&gt;):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;max_lifts_final %&amp;gt;% 
  filter(year == 2019) %&amp;gt;% 
  ggplot() + 
  ggalt::geom_dumbbell(aes(y = lift,
                    x = female, xend = male),
                colour = &amp;quot;grey&amp;quot;, size = 5,
                colour_x = &amp;quot;#D6604C&amp;quot;, colour_xend = &amp;quot;#395B74&amp;quot;) +
  labs(y = element_blank(),
       x = &amp;quot;Top Lift Recorded (kg)&amp;quot;,
       title =  &amp;quot;How &amp;lt;span style=&amp;#39;color:#D6604C&amp;#39;&amp;gt;Women&amp;lt;/span&amp;gt; and &amp;lt;span style=&amp;#39;color:#395B74&amp;#39;&amp;gt;Men&amp;lt;/span&amp;gt; Differ in Top Lifts&amp;quot;,
                       subtitle = &amp;quot;In 2019&amp;quot;) +
  theme(plot.title = element_markdown(lineheight = 1.1, size = 20),
        plot.subtitle = element_text(size = 15)) +
  scale_y_discrete(labels = c(&amp;quot;Bench&amp;quot;, &amp;quot;Deadlift&amp;quot;, &amp;quot;Squat&amp;quot;)) +
  drop_axis(axis = &amp;quot;y&amp;quot;) +
  geom_text(aes(x = female, y = lift, label = paste(female, &amp;quot;kg&amp;quot;)),
            color = &amp;quot;#D6604C&amp;quot;, size = 4, vjust = -2) +
  geom_text(aes(x = male, y = lift, label = paste(male, &amp;quot;kg&amp;quot;)),
            color = &amp;quot;#395B74&amp;quot;, size = 4, vjust = -2) +
  geom_rect(aes(xmin=430, xmax=470, ymin=-Inf, ymax=Inf), fill=&amp;quot;grey80&amp;quot;) +
  geom_text(aes(label=diff, y=lift, x=450), fontface=&amp;quot;bold&amp;quot;, size=4) +
  geom_text(aes(x=450, y=3, label=&amp;quot;Difference&amp;quot;),
            color=&amp;quot;grey20&amp;quot;, size=4, vjust=-3, fontface=&amp;quot;bold&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/tidy-tuesday-powerlifting/index_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Finally, we animate, using Thomas Pedersen’s wonderful &lt;a href=&#34;https://github.com/thomasp85/gganimate&#34;&gt;gganimate package&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;animation &amp;lt;- max_lifts_final %&amp;gt;% 
  ggplot() + 
  ggalt::geom_dumbbell(aes(y = lift,
                    x = female, xend = male),
                colour = &amp;quot;grey&amp;quot;, size = 5,
                colour_x = &amp;quot;#D6604C&amp;quot;, colour_xend = &amp;quot;#395B74&amp;quot;) +
  labs(y = element_blank(),
       x = &amp;quot;Top Lift Recorded (kg)&amp;quot;,
       title =  &amp;quot;How &amp;lt;span style=&amp;#39;color:#D6604C&amp;#39;&amp;gt;Women&amp;lt;/span&amp;gt; and &amp;lt;span style=&amp;#39;color:#395B74&amp;#39;&amp;gt;Men&amp;lt;/span&amp;gt; Differ in Top Lifts&amp;quot;,
  subtitle=&amp;#39;\nThis plot depicts the difference between the heaviest lifts for each sex at International Powerlifting Federation\nevents over time. \n \n{closest_state}&amp;#39;) +
  theme(plot.title = element_markdown(lineheight = 1.1, size = 25, margin=margin(0,0,0,0)),
        plot.subtitle = element_text(size = 15, margin=margin(8,0,-30,0))) +
  scale_y_discrete(labels = c(&amp;quot;Bench&amp;quot;, &amp;quot;Deadlift&amp;quot;, &amp;quot;Squat&amp;quot;)) +
  drop_axis(axis = &amp;quot;y&amp;quot;) +
  geom_text(aes(x = female, y = lift, label = paste(female, &amp;quot;kg&amp;quot;)),
            color = &amp;quot;#D6604C&amp;quot;, size = 4, vjust = -2) +
  geom_text(aes(x = male, y = lift, label = paste(male, &amp;quot;kg&amp;quot;)),
            color = &amp;quot;#395B74&amp;quot;, size = 4, vjust = -2) +
  transition_states(year, transition_length = 4, state_length = 1) +
  ease_aes(&amp;#39;cubic-in-out&amp;#39;)

a_gif &amp;lt;- animate(animation, 
                 fps = 10, 
                 duration = 25,
                 width = 800, height = 400, 
                 renderer = gifski_renderer(&amp;quot;outputs/animation.gif&amp;quot;))

a_gif&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/tidy-tuesday-powerlifting/index_files/figure-html/unnamed-chunk-9-1.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;I’d like to include another GIF: a line chart of differences over time&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;animation2 &amp;lt;- max_lifts_final %&amp;gt;% 
  ungroup %&amp;gt;% 
  mutate(lift = case_when(lift == &amp;quot;best3bench_kg&amp;quot; ~ &amp;quot;Bench&amp;quot;,
                          lift == &amp;quot;best3squat_kg&amp;quot; ~ &amp;quot;Squat&amp;quot;,
                          lift == &amp;quot;best3deadlift_kg&amp;quot; ~ &amp;quot;Deadlift&amp;quot;)) %&amp;gt;% 
  ggplot(aes(year, diff, group = lift, color = lift)) + 
  geom_line(show.legend = FALSE) + 
  geom_segment(aes(xend = 2019.1, yend = diff), linetype = 2, colour = &amp;#39;grey&amp;#39;, show.legend = FALSE) + 
  geom_point(size = 2, show.legend = FALSE) + 
  geom_text(aes(x = 2019.1, label = lift, color = &amp;quot;#000000&amp;quot;), hjust = 0, show.legend = FALSE) + 
  drop_axis(axis = &amp;quot;y&amp;quot;) +
  transition_reveal(year) +
  coord_cartesian(clip = &amp;#39;off&amp;#39;) +
  theme(plot.title = element_text(size = 20)) +
  labs(title = &amp;#39;Difference over time&amp;#39;,
       y = &amp;#39;Difference (kg)&amp;#39;,
       x = element_blank()) + 
  theme(plot.margin = margin(5.5, 40, 5.5, 5.5))

b_gif &amp;lt;- animate(animation2, 
                 fps = 10, 
                 duration = 25,
        width = 800, height = 200, 
        renderer = gifski_renderer(&amp;quot;outputs/animation2.gif&amp;quot;))

b_gif&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/tidy-tuesday-powerlifting/index_files/figure-html/unnamed-chunk-10-1.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;Next, combine them using &lt;code&gt;magick&lt;/code&gt; (thanks to &lt;a href=&#34;https://github.com/thomasp85/gganimate/wiki/Animation-Composition&#34;&gt;this post&lt;/a&gt;):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(magick)
a_mgif &amp;lt;- image_read(a_gif)
b_mgif &amp;lt;- image_read(b_gif)

new_gif &amp;lt;- image_append(c(a_mgif[1], b_mgif[1]), stack = TRUE)
for(i in 2:250){
  combined &amp;lt;- image_append(c(a_mgif[i], b_mgif[i]), stack = TRUE)
  new_gif &amp;lt;- c(new_gif, combined)
}

new_gif&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/tidy-tuesday-powerlifting/index_files/figure-html/unnamed-chunk-11-1.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Games and Guns</title>
      <link>/post/games-and-guns/</link>
      <pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate>
      <guid>/post/games-and-guns/</guid>
      <description>


&lt;p&gt;Is there a connection between video games and gun violence, as Republicans suggest?&lt;/p&gt;
&lt;div id=&#34;load-packages&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Load Packages&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(readr)
library(readxl)
library(tidyverse)
library(ggplot2)
library(showtext)
library(emojifont)
library(cr)
conflicted::conflict_prefer(&amp;quot;filter&amp;quot;, &amp;quot;dplyr&amp;quot;)
conflicted::conflict_prefer(&amp;quot;scale_colour_discrete&amp;quot;, &amp;quot;cr&amp;quot;)

set_cr_theme(font = &amp;quot;lato&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;load-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Load Data&lt;/h3&gt;
&lt;p&gt;Data regarding gun deaths per capita comes from the &lt;a href=&#34;https://vizhub.healthdata.org/gbd-compare/&#34;&gt;Institute for Health Metrics and Evaluation&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;guns &amp;lt;- read_csv(&amp;quot;data/IHME-guns.csv&amp;quot;)

guns &amp;lt;- guns %&amp;gt;% select(Location, Value)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Data regarding video game sales per capita comes from this &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1n7VPylBiHov7gWwM4F070m5JZsB7fGOMMQsoAOIh5RA/edit?usp=sharing&#34;&gt;Google Spreadsheet&lt;/a&gt; which was pulled from NewZoo, a gaming analytics company.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;games &amp;lt;- read_excel(&amp;quot;data/GameRevenueByCountry.xlsx&amp;quot;)

games &amp;lt;- games %&amp;gt;% 
  rename(revenue = `PER CAPITA REVENUE`) %&amp;gt;% 
  select(Country, revenue)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;merge-and-clean-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Merge and Clean Data&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;joined &amp;lt;- left_join(games, guns, by = c(&amp;quot;Country&amp;quot; = &amp;quot;Location&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we clean &lt;code&gt;games&lt;/code&gt; dataset so that &lt;code&gt;Country&lt;/code&gt; matches the &lt;code&gt;Location&lt;/code&gt; column from &lt;code&gt;guns&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;games &amp;lt;- games %&amp;gt;% 
  mutate(Country = case_when(Country == &amp;quot;Republic of Korea&amp;quot; ~ &amp;quot;South Korea&amp;quot;,
                             Country == &amp;quot;Brunei Darussalam&amp;quot; ~ &amp;quot;Brunei&amp;quot;,
                             #Country == &amp;quot;Macao&amp;quot; ~ ,
                             #Country == &amp;quot;Hong Kong, China&amp;quot; ~ ,
                             Country == &amp;quot;Lucembourg&amp;quot; ~ &amp;quot;Luxembourg&amp;quot;,
                             Country == &amp;quot;Kuwair&amp;quot; ~ &amp;quot;Kuwait&amp;quot;,
                             Country == &amp;quot;UAE&amp;quot; ~ &amp;quot;United Arab Emirates&amp;quot;,
                             Country == &amp;quot;TFYR Macedonia&amp;quot; ~ &amp;quot;Macedonia&amp;quot;,
                             Country == &amp;quot;Joran&amp;quot; ~ &amp;quot;Jordan&amp;quot;,
                             Country == &amp;quot;Republic of Moldova&amp;quot; ~ &amp;quot;Moldova&amp;quot;,
                             TRUE ~ as.character(Country)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;joined &amp;lt;- left_join(games, guns, by = c(&amp;quot;Country&amp;quot; = &amp;quot;Location&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are 98 countries with full data present.&lt;/p&gt;
&lt;p&gt;We should also create a dummy variable for each country depending on whether it is an OECD country or not.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Country &amp;lt;- c(
&amp;quot;Austria&amp;quot;,
&amp;quot;Belgium&amp;quot;,
&amp;quot;Canada&amp;quot;,
&amp;quot;Denmark&amp;quot;,
&amp;quot;France&amp;quot;,
&amp;quot;Greece&amp;quot;,
&amp;quot;Iceland&amp;quot;,
&amp;quot;Ireland&amp;quot;,
&amp;quot;Italy&amp;quot;,
&amp;quot;Luxembourg&amp;quot;,
&amp;quot;Netherlands&amp;quot;,
&amp;quot;Norway&amp;quot;,
&amp;quot;Portugal&amp;quot;,
&amp;quot;Spain&amp;quot;,
&amp;quot;Sweden&amp;quot;,
&amp;quot;Switzerland&amp;quot;,
&amp;quot;Turkey&amp;quot;,
&amp;quot;United Kingdom&amp;quot;,
&amp;quot;United States&amp;quot;,
&amp;quot;West Germany&amp;quot;,
&amp;quot;Australia&amp;quot;,
&amp;quot;Finland&amp;quot;,
&amp;quot;Japan&amp;quot;,
&amp;quot;New Zealand&amp;quot;)

OECD &amp;lt;- &amp;quot;OECD&amp;quot;

oecd &amp;lt;- data.frame(Country, OECD)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;oecd_joined &amp;lt;- left_join(joined, oecd, by = &amp;quot;Country&amp;quot;)

oecd_joined &amp;lt;- oecd_joined %&amp;gt;% 
  mutate(OECD = ifelse(is.na(OECD), &amp;quot;Not OECD&amp;quot;, &amp;quot;OECD&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;visualize&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Visualize&lt;/h3&gt;
&lt;p&gt;This allows us to plot each country in a scatterplot, with point colour corresponding to OECD status:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;oecd_joined %&amp;gt;% 
  ggplot(aes(x = revenue, y = Value, colour = factor(OECD))) +
  geom_point() +
  geom_text(aes(label = ifelse(Country == &amp;quot;United States&amp;quot;, as.character(Country),&amp;#39;&amp;#39;), vjust = -1), show.legend = FALSE) +
  geom_text(aes(label = ifelse(Value &amp;gt; 40, as.character(Country),&amp;#39;&amp;#39;), vjust = -1), show.legend = FALSE) +
  geom_text(aes(label = ifelse(revenue &amp;gt; 150, as.character(Country),&amp;#39;&amp;#39;), vjust = -1), show.legend = FALSE) +
  labs(x = &amp;quot;Video Game Revenue per Capita (US $)&amp;quot;,
       y = &amp;quot;Violent Gun Deaths per 100k&amp;quot;,
       title = &amp;quot;Gun Deaths vs Game Sales&amp;quot;,
       colour = element_blank(),
       caption = &amp;quot;\nSources: Institute for Health Metrics and Evaluation, NewZoo&amp;quot;) +
  scale_y_continuous(limits = c(0, 45)) +
  theme(plot.caption = element_text(face = &amp;quot;italic&amp;quot;, hjust = 0), 
        legend.position = &amp;quot;top&amp;quot;, legend.direction = &amp;quot;horizontal&amp;quot;) +
  drop_axis(axis = &amp;quot;y&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/games-and-guns/index_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Finally, we can focus on only OECD countries:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;oecd_joined %&amp;gt;% 
  dplyr::filter(OECD == &amp;quot;OECD&amp;quot;) %&amp;gt;% 
  ggplot(aes(x = revenue, y = Value)) +
  geom_point() +
  #geom_smooth() +
  geom_text(aes(label = ifelse(Country == &amp;quot;United States&amp;quot;, as.character(Country),&amp;#39;&amp;#39;), vjust = -1)) +
  labs(x = &amp;quot;Video Game Revenue per Capita (US $)&amp;quot;,
       y = &amp;quot;Violent Gun Deaths per 100k&amp;quot;,
       title = &amp;quot;Gun Deaths vs Game Sales&amp;quot;,
       subtitle = &amp;quot;OECD Countries&amp;quot;,
       caption = &amp;quot;\nSources: Institute for Health Metrics and Evaluation, NewZoo&amp;quot;) +
  scale_y_continuous(limits = c(0, 5)) +
  theme(plot.caption = element_text(face = &amp;quot;italic&amp;quot;, hjust = 0)) +
  drop_axis(axis = &amp;quot;y&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/games-and-guns/index_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To conclude, let’s add an emoji to fully capture our skepticism with the &lt;a href=&#34;https://www.cnn.com/2019/08/05/politics/kevin-mccarthy-mass-shootings-video-games/index.html&#34;&gt;newfound argument&lt;/a&gt; linking video games to violence.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;oecd_joined %&amp;gt;% 
  dplyr::filter(OECD == &amp;quot;OECD&amp;quot;) %&amp;gt;% 
  ggplot(aes(x = revenue, y = Value)) +
  geom_point() +
  #geom_smooth() +
  geom_text(aes(label = ifelse(Country == &amp;quot;United States&amp;quot;, as.character(Country),&amp;#39;&amp;#39;), vjust = -1)) +
  labs(x = &amp;quot;Video Game Revenue per Capita (US $)&amp;quot;,
       y = &amp;quot;Violent Gun Deaths per 100k&amp;quot;,
       title = &amp;quot;Gun Deaths vs Game Sales&amp;quot;,
       subtitle = &amp;quot;OECD Countries&amp;quot;,
       caption = &amp;quot;\nSources: Institute for Health Metrics and Evaluation, NewZoo&amp;quot;) +
  scale_y_continuous(limits = c(0, 5)) +
  theme(plot.caption = element_text(face = &amp;quot;italic&amp;quot;, hjust = 0)) +
  drop_axis(axis = &amp;quot;y&amp;quot;) +
  geom_text(y = 4.85, x = 107.5, size = 7, label = emoji(&amp;#39;thinking&amp;#39;), family = &amp;quot;EmojiOne&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/games-and-guns/index_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Building my First Shiny App</title>
      <link>/post/building-my-first-shiny-app/</link>
      <pubDate>Sat, 03 Aug 2019 00:00:00 +0000</pubDate>
      <guid>/post/building-my-first-shiny-app/</guid>
      <description>


&lt;p&gt;I spent some time this weekend playing around with &lt;a href=&#34;https://shiny.rstudio.com&#34;&gt;Shiny&lt;/a&gt;, RStudio’s tool for creating interactive web apps. In a nod to my humble beginnings, I wanted to bring some interactivity to my first R project (&lt;a href=&#34;https://connorrothschild.github.io/r/automation/&#34;&gt;ever!&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I finished the project roughly a year ago, in the summer between my freshman and sophomore year. It was an exercise in plotting multiple dimensions related to something of personal interest to me: automation and its impact on jobs. I wanted to use ggplot2 to recreate a visualization I came across on Bloomberg graphics. Here’s &lt;a href=&#34;https://www.bloomberg.com/graphics/2017-job-risk/&#34;&gt;Bloomberg’s visualization&lt;/a&gt; and here’s &lt;a href=&#34;https://connorrothschild.github.io/r/automation/&#34;&gt;mine&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are some obvious differences in our visualizations (our axes are inverted, they likely used D3.js while I used ggplot2), but for the most part, our visualizations depict the same lesson: lower-paying jobs and less-educated jobs are more susceptible to job displacement from automation.&lt;/p&gt;
&lt;p&gt;A year later, there are some things about my first visualization I would definitely change (title and axis label size, unnecessary corner labels, a potentially misleading geom_smooth line), but what I really want to work on now is bringing my project closer to the Bloomberg visualization by making it interactive. (I’ve actually already made an &lt;a href=&#34;https://public.tableau.com/profile/connor.rothschild#!/vizhome/JobAutomationRiskintheUnitedStates/Final&#34;&gt;interactive version&lt;/a&gt; of the visualization using Tableau, but I wanted to do it again in R to expand my skillset!)&lt;/p&gt;
&lt;p&gt;Enter Shiny, RStudio’s tool for creating interactive visualizations. By using Shiny with &lt;a href=&#34;https://ggvis.rstudio.com&#34;&gt;ggvis&lt;/a&gt; (ggplot2’s “successor” with interactive capabilities), I’m able to get pretty close to my initial inspiration.&lt;/p&gt;
&lt;p&gt;ggvis’s commands are pretty similar to ggplot2, and so the learning curve wasn’t that steep (with the exception of setting the default size parameter for my points, which I finally solved with &lt;a href=&#34;https://stackoverflow.com/questions/43466172/chang-size-of-points-depending-on-one-column-with-ggvis&#34;&gt;this fix&lt;/a&gt;). Shiny was a bit more difficult to learn, but RStudio’s &lt;a href=&#34;https://shiny.rstudio.com/tutorial/&#34;&gt;online video tutorials&lt;/a&gt; make it a lot less daunting. All in all, the project only took one night (~3 hours) to complete. Another example of R’s accessibility and ease of use!&lt;/p&gt;
&lt;div id=&#34;cleanprepare-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Clean/Prepare Data&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
library(ggthemes)
library(dplyr)
library(ggrepel)
library(tools)
library(readxl)
library(tidyverse)
library(knitr)

options(scipen=999)
theme_set(theme_minimal())

education &amp;lt;- read_excel(&amp;quot;data/education.xlsx&amp;quot;, skip=1)
salary &amp;lt;- read_excel(&amp;quot;data/national_M2017_dl.xlsx&amp;quot;)
automation &amp;lt;- read_excel(&amp;quot;data/raw_state_automation_data.xlsx&amp;quot;)

salary1 &amp;lt;- salary %&amp;gt;% 
group_by(OCC_TITLE) %&amp;gt;% 
mutate(natlwage = TOT_EMP * as.numeric(A_MEAN)) %&amp;gt;%
filter(!is.na(TOT_EMP)) %&amp;gt;%
filter(!is.na(A_MEAN)) %&amp;gt;%
filter(!is.na(A_MEDIAN))

salary1$A_MEDIAN = as.numeric(as.character(salary1$A_MEDIAN))
salary2 &amp;lt;- select(salary1, OCC_TITLE, TOT_EMP, A_MEDIAN, natlwage) %&amp;gt;% 
distinct()

library(plyr)
education1 &amp;lt;- education %&amp;gt;% select(-...2)

education1 &amp;lt;- rename(education1, c(&amp;quot;2016 National Employment Matrix title and code&amp;quot; = &amp;quot;occupation&amp;quot;,
                                   &amp;quot;Less than high school diploma&amp;quot; = &amp;quot;lessthanhs&amp;quot;, 
                                   &amp;quot;High school diploma or equivalent&amp;quot; = &amp;quot;hsdiploma&amp;quot;,
                                   &amp;quot;Some college, no degree&amp;quot; = &amp;quot;somecollege&amp;quot;,
                                   &amp;quot;Associate&amp;#39;s degree&amp;quot; = &amp;quot;associates&amp;quot;,
                                   &amp;quot;Bachelor&amp;#39;s degree&amp;quot; = &amp;quot;bachelors&amp;quot;,
                                   &amp;quot;Master&amp;#39;s degree&amp;quot; = &amp;quot;masters&amp;quot;,
                                   &amp;quot;Doctoral or professional degree&amp;quot; = &amp;quot;professional&amp;quot;))

education2 &amp;lt;- education1 %&amp;gt;% 
  group_by(occupation) %&amp;gt;%
  mutate(hsorless = lessthanhs + hsdiploma,
         somecollegeorassociates = somecollege + associates,
         postgrad = masters + professional)

education2 &amp;lt;- education2 %&amp;gt;% drop_na()

salary2 &amp;lt;- rename(salary2, c(&amp;quot;OCC_TITLE&amp;quot; = &amp;quot;occupation&amp;quot;))
salary2$occupation &amp;lt;- tolower(salary2$occupation)
education2$occupation &amp;lt;- tolower(education2$occupation)
edsal &amp;lt;- merge(as.data.frame(education2), as.data.frame(salary2), by=&amp;quot;occupation&amp;quot;) %&amp;gt;% drop_na()

  typicaleducation &amp;lt;- read_excel(&amp;quot;data/typicaleducation.xlsx&amp;quot;)
  typicaleducation2 &amp;lt;- typicaleducation %&amp;gt;% select(occupation,typicaled,workexp)
  typicaleducation2 &amp;lt;- typicaleducation2 %&amp;gt;% drop_na()
  typicaleducation2$occupation &amp;lt;- tolower(typicaleducation2$occupation)
  edsal2 &amp;lt;- merge(as.data.frame(edsal), as.data.frame(typicaleducation2), by=&amp;quot;occupation&amp;quot;)

  detach(package:plyr)
  edsal3 &amp;lt;- edsal2 %&amp;gt;% 
  group_by(typicaled) %&amp;gt;% 
  summarise(medianwage = mean(A_MEDIAN))
  
  automationwstates &amp;lt;- automation %&amp;gt;% select(-soc)
  automation1 &amp;lt;- automationwstates %&amp;gt;% select(occupation,probability,total)

  automation1$occupation &amp;lt;- str_replace_all(automation1$occupation, &amp;quot;;&amp;quot;, &amp;quot;,&amp;quot;)
  automation1$occupation &amp;lt;- tolower(automation$occupation)
  data &amp;lt;- merge(as.data.frame(edsal2), as.data.frame(automation1), by=&amp;quot;occupation&amp;quot;)

  data$occupation &amp;lt;- toTitleCase(data$occupation)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;bring-in-shiny&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bring in Shiny&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(shiny)

# Define UI for application 
ui &amp;lt;- pageWithSidebar(
  headerPanel(&amp;quot;Automation&amp;quot;),
  sidebarPanel(
    wellPanel(
      h4(&amp;quot;Filter&amp;quot;),
      sliderInput(&amp;quot;TOT_EMP&amp;quot;, &amp;quot;Number of Workers&amp;quot;,
                  0, 4450000, 4450000, step = 10000),
      sliderInput(&amp;quot;A_MEDIAN&amp;quot;, &amp;quot;Median Income&amp;quot;, 
                  0, 185150, 185150, step = 1000),
      sliderInput(&amp;quot;probability&amp;quot;, &amp;quot;Probability of Automation&amp;quot;,
                  0, 1, 1, step = .1),
      # sliderInput(&amp;quot;boxoffice&amp;quot;, &amp;quot;Dollars at Box Office (millions)&amp;quot;,
      #             0, 800, c(0, 800), step = 1),
      selectInput(&amp;quot;typicaled&amp;quot;, &amp;quot;Education Level&amp;quot;,
                  c(&amp;quot;All&amp;quot;, &amp;quot;Bachelor&amp;#39;s degree&amp;quot;, &amp;quot;High school diploma or equivalent&amp;quot;, &amp;quot;Associate&amp;#39;s degree&amp;quot;, &amp;quot;Postsecondary nondegree award&amp;quot;,
                    &amp;quot;No formal educational credential&amp;quot;, &amp;quot;Master&amp;#39;s degree&amp;quot;, &amp;quot;Doctoral or professional degree&amp;quot;, &amp;quot;Some college, no degree&amp;quot;)
      ))
      #textInput(&amp;quot;occupation&amp;quot;, &amp;quot;Occupation Name&amp;quot;))
  ),
  mainPanel(
    plotOutput(&amp;quot;plot&amp;quot;)
  )
)

server &amp;lt;- function(input, output) {
  
  # defaultColors &amp;lt;- c(&amp;quot;#3366cc&amp;quot;, &amp;quot;#dc3912&amp;quot;, &amp;quot;#ff9900&amp;quot;, &amp;quot;#109618&amp;quot;, &amp;quot;#990099&amp;quot;, &amp;quot;#0099c6&amp;quot;, &amp;quot;#dd4477&amp;quot;)
  # series &amp;lt;- structure(
  #   lapply(defaultColors, function(color) { list(color=color) }),
  #   names = levels(data$typicaled)
  # )
  
  
  dfInput &amp;lt;- reactive({
    if (input$typicaled!=&amp;quot;All&amp;quot;) {
    data %&amp;gt;% filter(TOT_EMP &amp;lt;= input$TOT_EMP,
                    A_MEDIAN &amp;lt;= input$A_MEDIAN,
                    probability &amp;lt;= input$probability,
                    typicaled %in% input$typicaled)
    #occupation == input$occupation)
      } else { 
    data %&amp;gt;% filter(TOT_EMP &amp;lt;= input$TOT_EMP,
                    A_MEDIAN &amp;lt;= input$A_MEDIAN,
                    probability &amp;lt;= input$probability)
      }
    })

  
  output$plot &amp;lt;- renderPlot({
    
    data1 &amp;lt;- dfInput()
    
    ggplot(data1) +
      geom_point(mapping = aes(x = A_MEDIAN, y = probability, size = TOT_EMP, alpha=0.05, col = typicaled)) +
      # #geom_smooth(aes(x=A_MEDIAN, y=probability), method=&amp;quot;lm&amp;quot;, se=FALSE) +
      scale_size_area(max_size = 20) +
      scale_alpha(guide = &amp;#39;none&amp;#39;) +
      guides(size = &amp;quot;none&amp;quot;) +
      theme(legend.position = &amp;quot;bottom&amp;quot;) +
      guides(colour = guide_legend(override.aes = list(alpha = 1))) +
      ylim(-.05,1.05) +
      xlim(25000,200000) +
      xlab(&amp;quot;Median Income&amp;quot;) +
      ylab(&amp;quot;Probability of Automation&amp;quot;) +
      ggtitle(&amp;quot;Likelihood of Job Automation vs Median Income&amp;quot;) +
      labs(size=&amp;quot;Total Employment&amp;quot;, col=&amp;quot;Education Level&amp;quot;)
  })
}

# shinyApp(ui = ui, server = server)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://connorrothschild.shinyapps.io/ggvis/&#34;&gt;You can find the Shiny app here&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Texas Vaccination Rates (How to Use Rayshader)</title>
      <link>/post/tx-vaccination-rates-rayshader/</link>
      <pubDate>Wed, 24 Jul 2019 00:00:00 +0000</pubDate>
      <guid>/post/tx-vaccination-rates-rayshader/</guid>
      <description>


&lt;p&gt;A brief exploration of Texas vaccination rates among kindergartners. Also an attempt to use &lt;code&gt;rayshader&lt;/code&gt; for the first time.&lt;/p&gt;
&lt;div id=&#34;load-packages&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Load Packages&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(readxl)
library(tidyverse)
library(stringr)
library(dplyr)
library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)
library(scales)
library(tpltheme)
library(knitr)
conflicted::conflict_prefer(&amp;quot;filter&amp;quot;, &amp;quot;dplyr&amp;quot;)

set_tpl_theme(font = &amp;quot;lato&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;read-in-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Read in Data&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tx_vac &amp;lt;- read_excel(&amp;quot;data/2018-2019 School Vaccination Coverage Levels - Kindergarten (XLS) .xlsx&amp;quot;, skip = 2)

kable(head(tx_vac))&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;Facility Number&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;School Type&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Facility Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Facility Address&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;County&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DTP/DTaP/DT/Td&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Hepatitis A&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Hepatitis B&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;MMR&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Polio&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Varicella&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;9057816000&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Public ISD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A W Brown Leadership Academy&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;5701 RED BIRD CTR DR, DALLAS, TX, 75237&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Dallas&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.8317308&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.9086538&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.9471154&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.8509615&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.8413462&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.8509615&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;9057829000&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Public ISD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A+ Academy&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8225 BRUTON RD, DALLAS, TX, 75217&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Dallas&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.0000000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.0000000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.0000000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.9909091&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.0000000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.0000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;9109901000&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Public ISD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Abbott ISD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;P O BOX 226, ABBOTT, TX, 76621&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Hill&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.0000000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.0000000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.0000000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.0000000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.0000000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.0000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;7101130101&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Private School&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Abercrombie Academy&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;17102 Theiss Mail Road, Spring, TX, 77379&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Harris&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.0000000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.0000000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.0000000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.7500000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.0000000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.7500000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;9095901000&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Public ISD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Abernathy ISD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;505 7TH ST, ABERNATHY, TX, 79311&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Hale&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.0000000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.0000000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.0000000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.0000000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.0000000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.0000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;7101220001&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Private School&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Abiding Word Lutheran School&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;17123 Red Oak Drive, Houston, TX, 77090&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Harris&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.7692308&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.7692308&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.7692308&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.7692308&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.6923077&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.7692308&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The data contains information on six different vaccines split up by school. The set also contains information on the county of each school, allowing us to aggregate on the county level. By finding the average of the six vaccines listed in this dataset, we can see average vaccination rate by county:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;grouped &amp;lt;- tx_vac %&amp;gt;% 
  mutate(avgvac = (`DTP/DTaP/DT/Td`+`Hepatitis A`+`Hepatitis B`+MMR+Polio+Varicella)/6) %&amp;gt;%
  group_by(County) %&amp;gt;%
  summarize(avgvac = mean(avgvac, na.rm = TRUE)) %&amp;gt;%
  mutate(County = tolower(County)) %&amp;gt;%
  # rename to subregion so that we can later join with ggplot map data
  rename(&amp;quot;subregion&amp;quot; = County) %&amp;gt;%
  filter(subregion != &amp;quot;king&amp;quot;)

kable(head(grouped))&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;subregion&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;avgvac&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;anderson&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.9676797&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;andrews&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.9715335&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;angelina&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.9693150&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;aransas&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.9735294&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;archer&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.9915167&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;armstrong&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.9677419&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Next, we read in the county-level data from &lt;code&gt;ggplot2&lt;/code&gt; and merge it with our vaccination data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;counties &amp;lt;- map_data(&amp;quot;county&amp;quot;)
tx_county &amp;lt;- subset(counties, region == &amp;quot;texas&amp;quot;)
merged &amp;lt;- left_join(tx_county, grouped, by = &amp;quot;subregion&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;plot&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Plot&lt;/h3&gt;
&lt;p&gt;Construct the plot using &lt;code&gt;geom_polygon()&lt;/code&gt;, and pay special attention to theme attributes (axes, panels, etc.).&lt;/p&gt;
&lt;p&gt;Unfortunately, &lt;code&gt;theme_nothing()&lt;/code&gt; led to some conflicts with &lt;code&gt;rayshader&lt;/code&gt;, so I essentially recreated it using &lt;code&gt;theme()&lt;/code&gt; attributes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tx &amp;lt;- ggplot(data = merged, mapping = aes(x = long, y = lat, group = group, fill = avgvac*100)) +
  coord_fixed(1.3) +
  geom_polygon(color = &amp;quot;black&amp;quot;) +
  labs(fill = &amp;quot;Vaccination Rate&amp;quot;) +
  #theme_nothing(legend = TRUE) +
  theme(legend.title = element_text(),
        #legend.key.width = unit(.1, &amp;quot;in&amp;quot;),
        panel.border = element_blank(), panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), axis.line = element_blank(), 
        axis.text.x = element_blank(), axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        panel.background = element_rect(fill = &amp;quot;white&amp;quot;),
        text = element_text(family = &amp;quot;Lato&amp;quot;),
        legend.position = &amp;quot;bottom&amp;quot;) +
   labs(x = element_blank(),
        y = element_blank(),
        title = &amp;quot;Texas Vaccination Rate by County&amp;quot;,
        subtitle = &amp;quot;Among Kindergartners&amp;quot;) + 
  tpltheme::scale_fill_continuous()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s what the plot looks like before animation:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/tx-vaccination-rates-rayshader/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;rayshader&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Rayshader&lt;/h3&gt;
&lt;p&gt;Load in &lt;code&gt;rayshader&lt;/code&gt; and &lt;code&gt;rgl&lt;/code&gt;. I’m not sure if &lt;code&gt;rgl&lt;/code&gt; is necessary for all R users, but I ran into a few errors on my system (Mac) prior to its installation.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#devtools::install_github(&amp;quot;tylermorganwall/rayshader&amp;quot;)
library(rgl)
options(rgl.useNULL = FALSE)
library(rayshader)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lastly, create the &lt;code&gt;plot_gg()&lt;/code&gt; object by following the comprehensive documentation on Wall’s &lt;a href=&#34;https://github.com/tylermorganwall/rayshader&#34;&gt;README&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mfrow = c(1,1))
rayshader::plot_gg(tx, width = 5, raytrace = TRUE, multicore = TRUE, height = 5, scale = 50)

# create custom rotation parameters here
phivechalf = 30 + 60 * 1/(1 + exp(seq(-7, 20, length.out = 180)/2))
phivecfull = c(phivechalf, rev(phivechalf))
thetavec = -90 + 60 * sin(seq(0,359,length.out = 360) * pi/180)
zoomvec = 0.45 + 0.2 * 1/(1 + exp(seq(-5, 20, length.out = 180)))
zoomvecfull = c(zoomvec, rev(zoomvec))

render_movie(filename = &amp;quot;outputs/tx_vac_vid&amp;quot;, type = &amp;quot;custom&amp;quot;, 
             frames = 360,  phi = phivecfull, zoom = zoomvecfull, theta = thetavec)&lt;/code&gt;&lt;/pre&gt;
&lt;div style=&#34;text-align:center&#34;&gt;
&lt;p&gt;&lt;video controls&gt;
&lt;source src=&#34;outputs/tx_vac_vid.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>My First Package! Introducing &#39;tpltheme&#39;</title>
      <link>/post/introducing-tpltheme/</link>
      <pubDate>Tue, 23 Jul 2019 00:00:00 +0000</pubDate>
      <guid>/post/introducing-tpltheme/</guid>
      <description>


&lt;p&gt;I’ve spent the majority of the summer as an &lt;a href=&#34;https://www.texaspolicylab.org/profile/connor-rothschild/&#34;&gt;intern&lt;/a&gt; with the Texas Policy Lab, working on primarily data science-related matters such as data cleaning and visualization. Most recently, I sought to create a custom theme in &lt;code&gt;ggplot2&lt;/code&gt; for TPL.&lt;/p&gt;
&lt;p&gt;The project was my first experience in developing my own R package. Prior to this project, the most familiarity I had with packages were from the &lt;code&gt;install.packages()&lt;/code&gt; and &lt;code&gt;library()&lt;/code&gt; commands.&lt;/p&gt;
&lt;p&gt;Hadley Wickham’s book &lt;strong&gt;&lt;a href=&#34;http://r-pkgs.had.co.nz/&#34;&gt;R Packages&lt;/a&gt;&lt;/strong&gt; was enormously helpful in introducing package development to me. I ran into (a lot of) issues in building the package, specifically encountering problems related to local file paths and logo placement on plots.&lt;/p&gt;
&lt;p&gt;Creating your own package is a great exercise in trial and error, and taught me a lot about programming in R that I wouldn’t have learned otherwise. I was also struck by how remarkably easy it was to create one’s own package (seriously, it requires the same amount of clicks as starting a new R project), and how thorough online resources were.&lt;/p&gt;
&lt;div id=&#34;inspiration&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Inspiration&lt;/h2&gt;
&lt;p&gt;The catalyst for creating this package was coming across the Urban Institute’s &lt;a href=&#34;https://github.com/UrbanInstitute/urbnthemes&#34;&gt;urbnthemes&lt;/a&gt; package on GitHub. I also gathered a lot of inspiration (and borrowed some code) from &lt;a href=&#34;https://github.com/jrnold/ggthemes&#34;&gt;ggthemes&lt;/a&gt; (Jeffrey Arnold), &lt;a href=&#34;https://github.com/bbc/bbplot&#34;&gt;bbplot&lt;/a&gt; (BBC News), and &lt;a href=&#34;https://github.com/hrbrmstr/hrbrthemes&#34;&gt;hrbrthemes&lt;/a&gt; (Bob Rudis). I was impressed by the fact that these organizations were able to use R to create publication-ready plots despite the fact that base ggplot figures can look rather ugly (if we’re being honest).&lt;/p&gt;
&lt;p&gt;Because the organization I intern with is still in its infancy, I thought it would be a perfect time to create a standardized theme for figures made in the future. So long as future employees adopt the theme, this package has the potential to create figures specific to our publications, lending TPL organizational credibility and creating cross-report consistency.&lt;/p&gt;
&lt;p&gt;I thought a lot about some basic tenets of design, such as font readability, text size, and color contrast. I learned a lot about visual and aesthetic design I wouldn’t know otherwise (Kieran Healy’s section on how graphs can deceive the reader–intentionally or not–opened my eyes to a lot of important visual concepts.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;overview&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;Here’s an overview of some of the packages key features:&lt;/p&gt;
&lt;div id=&#34;installation-and-usage&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Installation and Usage&lt;/h2&gt;
&lt;p&gt;You can install the package via GitHub:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
library(tidyverse)

#devtools::install_github(&amp;quot;connorrothschild/tpltheme&amp;quot;)
library(tpltheme)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Always load &lt;code&gt;library(tpltheme)&lt;/code&gt; &lt;strong&gt;after&lt;/strong&gt; &lt;code&gt;library(ggplot2)&lt;/code&gt; and/or &lt;code&gt;library(tidyverse)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The package creates a standardized formats for plots to be used in reports created by the Texas Policy Lab. It primarily relies on &lt;code&gt;set_tpl_theme()&lt;/code&gt;, which allows the user to specify whether the plot theme should align with a standard plot (&lt;code&gt;style = &amp;quot;print&amp;quot;&lt;/code&gt;), or one specially created for plotting geographical data (&lt;code&gt;style = &amp;quot;Texas&amp;quot;&lt;/code&gt;). Calling &lt;code&gt;set_tpl_theme()&lt;/code&gt; after &lt;code&gt;library(tpltheme)&lt;/code&gt; does most of the work for this package!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set_tpl_theme()

ggplot(iris, aes(x=Species, y=Sepal.Width, fill=Species)) +
    geom_bar(stat=&amp;quot;summary&amp;quot;, fun.y=&amp;quot;mean&amp;quot;, show.legend = FALSE) +
    scale_y_continuous(expand = expand_scale(mult = c(0, 0.001))) +
    labs(x=&amp;quot;Species&amp;quot;, y=&amp;quot;Mean Sepal Width (cm)&amp;quot;, fill=&amp;quot;Species&amp;quot;, title=&amp;quot;Iris Dataset&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introducing-tpltheme/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;fonts&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Fonts&lt;/h3&gt;
&lt;p&gt;The user is able to specify whether they want to use &lt;em&gt;Lato&lt;/em&gt; or &lt;em&gt;Adobe Caslon Pro&lt;/em&gt; in their figures.&lt;/p&gt;
&lt;p&gt;To ensure that these fonts are installed and registered, use &lt;code&gt;tpl_font_test()&lt;/code&gt;. If fonts are not properly installed, install both fonts online and then run &lt;code&gt;tpl_font_install()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tpl_font_test()
tpl_font_install()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here are some examples of sample TPL plots with different specifications for &lt;code&gt;style&lt;/code&gt; and &lt;code&gt;font&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set_tpl_theme(style = &amp;quot;print&amp;quot;, font = &amp;quot;lato&amp;quot;)

ggplot(iris, aes(x=jitter(Sepal.Width), y=jitter(Sepal.Length), col=Species, size = Petal.Length)) +
    geom_point() +
    labs(x=&amp;quot;Sepal Width (cm)&amp;quot;, y=&amp;quot;Sepal Length (cm)&amp;quot;, col=&amp;quot;Species&amp;quot;, size = &amp;quot;Petal Length&amp;quot;, title=&amp;quot;Iris Dataset&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introducing-tpltheme/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;By specifying &lt;code&gt;style = &amp;quot;Texas&amp;quot;&lt;/code&gt; within &lt;code&gt;set_tpl_theme&lt;/code&gt;, the user may also create Texas-specific plots.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tx_vac &amp;lt;- readr::read_csv(&amp;quot;https://raw.githubusercontent.com/connorrothschild/tpltheme/master/data/tx_vac_example.csv&amp;quot;)
set_tpl_theme(style = &amp;quot;Texas&amp;quot;, font = &amp;quot;adobe&amp;quot;)

ggplot(data = tx_vac, mapping = aes(x = long, y = lat, group = group, fill = avgvac*100)) +
  coord_fixed(1.3) +
  scale_fill_continuous(limits = c(78.3,100)) +
  geom_polygon(color = &amp;quot;black&amp;quot;) +
  labs(title = &amp;quot;Texas Vaccination Rate by County&amp;quot;,
       subtitle = &amp;quot;Among Kindergarteners&amp;quot;,
       fill = &amp;quot;Percent\nVaccinated&amp;quot;,
       caption = &amp;quot;Source: Texas DSHS&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introducing-tpltheme/index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And it also works for categorical variables:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set_tpl_theme(style = &amp;quot;Texas&amp;quot;, font = &amp;quot;lato&amp;quot;)

tx_vac %&amp;gt;% 
  dplyr::mutate(cat = factor(dplyr::case_when(avgvac*100 &amp;gt; 99 ~ &amp;quot;Great&amp;quot;,
                         avgvac*100 &amp;gt; 90 ~ &amp;quot;Average&amp;quot;,
                         avgvac*100 &amp;lt; 90 ~ &amp;quot;Bad&amp;quot;))) %&amp;gt;% 
  ggplot(mapping = aes(x = long, y = lat, group = group, fill = cat)) +
  coord_fixed(1.3) +
  geom_polygon(color = &amp;quot;black&amp;quot;) +
  labs(title = &amp;quot;Texas Vaccination Rate by County&amp;quot;,
       subtitle = &amp;quot;Among Kindergarteners&amp;quot;,
       fill = &amp;quot;Vaccination Rating&amp;quot;,
       caption = &amp;quot;Source: Texas DSHS&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introducing-tpltheme/index_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If the number of colors exceeds the number of colors in the TPL palette (9), the function &lt;code&gt;tpl_color_pal()&lt;/code&gt; will drop the TPL color palette and return the greatest number of unique colors possible within the RColorBrewer’s “Paired” palette (for more information on the use of RColorBrewer palettes, see &lt;a href=&#34;https://bookdown.org/rdpeng/exdata/plotting-and-color-in-r.html#using-the-rcolorbrewer-palettes&#34;&gt;this chapter&lt;/a&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tx_vac %&amp;gt;% 
  ggplot(mapping = aes(x = long, y = lat, group = group, fill = subregion)) +
  coord_fixed(1.3) +
  geom_polygon(color = &amp;quot;black&amp;quot;, show.legend = FALSE) +
  labs(title = &amp;quot;Texas Counties&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introducing-tpltheme/index_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# default to print afterwards
set_tpl_theme(style = &amp;quot;print&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;tpl-branding&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;TPL Branding&lt;/h3&gt;
&lt;div id=&#34;logo&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Logo&lt;/h4&gt;
&lt;p&gt;The user also has the option to include the TPL logo in single plots. This may be preferred for those reports being made especially public, or to serve as a pseudo-watermark in proprietary plots.&lt;/p&gt;
&lt;p&gt;The user can specify the &lt;code&gt;position&lt;/code&gt; of the logo as well as its &lt;code&gt;scale&lt;/code&gt;. The scale argument refers to the size of the logo object, with the specified number corresponding to a multiplication with the normal logo size. In other words, &lt;code&gt;scale = 2&lt;/code&gt; will &lt;em&gt;double&lt;/em&gt; the size of the logo. The logo defaults to 1/7th of the size of the plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot &amp;lt;- ggplot(iris, aes(x=Species, y=Sepal.Width, fill=Species)) +
    geom_bar(stat=&amp;quot;summary&amp;quot;, fun.y=&amp;quot;mean&amp;quot;, show.legend = FALSE) +
    scale_y_continuous(expand = expand_scale(mult = c(0, 0.001))) +
    labs(x=&amp;quot;Species&amp;quot;, y=&amp;quot;Mean Sepal Width (cm)&amp;quot;, fill=&amp;quot;Species&amp;quot;, title=&amp;quot;Iris Dataset&amp;quot;)

add_tpl_logo(plot, position = &amp;quot;top right&amp;quot;, scale = 1.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introducing-tpltheme/index_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;logo-text&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Logo Text&lt;/h4&gt;
&lt;p&gt;There may be some instances when an all-out logo is not warranted or preferred. If that is the case and the user would still like to watermark their figures, they can use the function &lt;code&gt;add_tpl_logo_text()&lt;/code&gt; to add text to an existing plot object:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot &amp;lt;- ggplot(iris, aes(x=jitter(Sepal.Width), y=jitter(Sepal.Length), col=Species, size = Petal.Length)) +
    geom_point() +
    labs(x=&amp;quot;Sepal Width (cm)&amp;quot;, y=&amp;quot;Sepal Length (cm)&amp;quot;, col=&amp;quot;Species&amp;quot;, size = &amp;quot;Petal Length&amp;quot;, title=&amp;quot;Iris Dataset&amp;quot;)
    
add_tpl_logo_text(plot)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introducing-tpltheme/index_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The user may also need to specify &lt;code&gt;align&lt;/code&gt;, which moves the plot horizontally across the bottom of the page.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot &amp;lt;- ggplot(iris, aes(x=Species, y=Sepal.Width, fill=Species)) +
    geom_boxplot(show.legend = FALSE) +
    labs(x=&amp;quot;Species&amp;quot;, y=&amp;quot;Sepal Width (cm)&amp;quot;, fill=&amp;quot;Species&amp;quot;, title=&amp;quot;Iris Dataset&amp;quot;, subtitle =&amp;quot;When specifying align = 1&amp;quot;)
    
add_tpl_logo_text(plot, align = 1)    &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introducing-tpltheme/index_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;additional-functions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Additional Functions&lt;/h3&gt;
&lt;div id=&#34;drop-axes&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Drop Axes&lt;/h4&gt;
&lt;p&gt;In the event that the user wishes to drop an axis, they may do so with &lt;code&gt;drop_axis()&lt;/code&gt;. The function may drop any combination of axes depending on the user’s input (&lt;code&gt;drop = &amp;quot;x&amp;quot;&lt;/code&gt;, &lt;code&gt;drop = &amp;quot;y&amp;quot;&lt;/code&gt;, &lt;code&gt;drop = &amp;quot;both&amp;quot;&lt;/code&gt;, &lt;code&gt;drop = &amp;quot;neither&amp;quot;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Unlike &lt;code&gt;add_tpl_logo()&lt;/code&gt;, &lt;code&gt;drop_axis()&lt;/code&gt; should be &lt;em&gt;added&lt;/em&gt; to an existing plot object:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(iris, aes(x=jitter(Sepal.Width), y=jitter(Sepal.Length), col=Species, size = Petal.Length)) +
    geom_point() +
    labs(x=&amp;quot;Sepal Width (cm)&amp;quot;, y=&amp;quot;Sepal Length (cm)&amp;quot;, col=&amp;quot;Species&amp;quot;, size = &amp;quot;Petal Length&amp;quot;, title=&amp;quot;Iris Dataset&amp;quot;) +
    drop_axis(axis = &amp;quot;y&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introducing-tpltheme/index_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;colors&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Colors&lt;/h3&gt;
&lt;p&gt;I also put a lot of time into creating a color palette which was both aesthetically pleasing and accessible to color-blind viewers. This was somewhat difficult because there are &lt;a href=&#34;https://nei.nih.gov/learn-about-eye-health/eye-conditions-and-diseases/color-blindness&#34;&gt;quite a few types of colorblindness&lt;/a&gt;. Thankfully, my boss is colorblind, making test cases a lot more accessible!&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;view_palette&lt;/code&gt; plots base color palettes included in &lt;code&gt;tpltheme&lt;/code&gt;. All TPL color palettes are led by the notation
&lt;code&gt;palette_tpl_*&lt;/code&gt; and therefore can be easily autocompleted within RStudio.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p1 &amp;lt;- view_palette(palette = palette_tpl_main) + ggtitle(&amp;quot;Categorical&amp;quot;)
p2 &amp;lt;- view_palette(palette = palette_tpl_diverging) + ggtitle(&amp;quot;Diverging&amp;quot;)
p3 &amp;lt;- view_palette(palette = palette_tpl_sequential) + ggtitle(&amp;quot;Sequential&amp;quot;)

gridExtra::grid.arrange(p1, p2, p3, nrow = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introducing-tpltheme/index_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;These palettes were created using &lt;a href=&#34;http://colorbrewer2.org&#34; class=&#34;uri&#34;&gt;http://colorbrewer2.org&lt;/a&gt; and &lt;a href=&#34;http://coloors.co&#34; class=&#34;uri&#34;&gt;http://coloors.co&lt;/a&gt; and are colorblind friendly.&lt;/p&gt;
&lt;p&gt;The diverging and sequential color palettes are from &lt;a href=&#34;http://colorbrewer2.org&#34; class=&#34;uri&#34;&gt;http://colorbrewer2.org&lt;/a&gt; and the categorical palette is composed of a variety of colors from &lt;a href=&#34;https://coolors.co/&#34; class=&#34;uri&#34;&gt;https://coolors.co/&lt;/a&gt; and the TPL website.&lt;/p&gt;
&lt;p&gt;In action, the color palette looks like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;normal &amp;lt;- diamonds %&amp;gt;% 
  group_by(clarity) %&amp;gt;% 
  summarise(price = mean(price)) %&amp;gt;% 
  mutate(clarity = forcats::fct_reorder(clarity, price)) %&amp;gt;% 
  ggplot() +
  geom_col(aes(x = clarity, y = price, fill = clarity), show.legend = FALSE) +
  labs(title = &amp;quot;TPL Color Palette&amp;quot;,
       subtitle = &amp;quot;in action&amp;quot;,
       x = &amp;quot;Clarity&amp;quot;,
       y = &amp;quot;Price&amp;quot;,
       fill = element_blank()) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  coord_flip() +
  scale_fill_discrete() +
  scale_y_continuous(expand = expand_scale(mult = c(0, 0.001))) +
  drop_axis(axis = &amp;quot;x&amp;quot;)

reversed &amp;lt;- normal +
  labs(subtitle = &amp;quot;(reversed)&amp;quot;) +
  scale_fill_discrete(reverse = TRUE)

gridExtra::grid.arrange(normal, reversed)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introducing-tpltheme/index_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The user may specify the color palette in the &lt;code&gt;scale_fill_*&lt;/code&gt; or &lt;code&gt;scale_color_*&lt;/code&gt; functions in a ggplot call. Specifically, the user can specify the &lt;code&gt;palette&lt;/code&gt; (categorical, diverging, sequential) and whether the palette should be reversed.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set_tpl_theme(style = &amp;quot;print&amp;quot;, font = &amp;quot;lato&amp;quot;)
normal &amp;lt;- ggplot(diamonds) +
  geom_bar(aes(x = cut, fill = clarity)) +
  labs(title = &amp;quot;TPL Color Palette&amp;quot;,
       subtitle = &amp;quot;On sample data&amp;quot;,
       x = &amp;quot;Cut&amp;quot;,
       y = &amp;quot;Count&amp;quot;,
       fill = &amp;quot;Clarity&amp;quot;) +
  scale_y_continuous(expand = expand_scale(mult = c(0, 0.001))) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

reversed &amp;lt;- normal +
  labs(subtitle = &amp;quot;(reversed)&amp;quot;) +
  scale_fill_discrete(reverse = TRUE)

gridExtra::grid.arrange(normal, reversed, nrow = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introducing-tpltheme/index_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- gapminder::gapminder %&amp;gt;% 
  dplyr::filter(gapminder::gapminder$country %in% c(&amp;quot;France&amp;quot;, &amp;quot;Germany&amp;quot;, &amp;quot;Ireland&amp;quot;, &amp;quot;Italy&amp;quot;, &amp;quot;Japan&amp;quot;, &amp;quot;Norway&amp;quot;, &amp;quot;Mexico&amp;quot;, &amp;quot;United States&amp;quot;)) %&amp;gt;%
  dplyr::mutate(year = as.Date(paste(year, &amp;quot;-01-01&amp;quot;, sep = &amp;quot;&amp;quot;, format=&amp;#39;%Y-%b-%d&amp;#39;)))

ggplot(data = data, aes(x = year, y = gdpPercap, fill = country)) +
  geom_area(alpha = 0.8) +
  scale_x_date(expand = c(0,0)) +
  scale_y_continuous(expand = c(0, 0), labels = scales::dollar) +
  labs(title = &amp;quot;GDP Per Capita Over Time&amp;quot;,
       subtitle = &amp;quot;Using the TPL Color Palette&amp;quot;,
       x = element_blank(),
       y = &amp;quot;GDP Per Capita&amp;quot;,
       fill = &amp;quot;Country&amp;quot;) + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introducing-tpltheme/index_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;restore-defaults&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Restore Defaults&lt;/h3&gt;
&lt;p&gt;By calling &lt;code&gt;undo_tpl_theme&lt;/code&gt;, you are able to remove TPL-specific theme settings and restores to ggplot defaults (but why would you want to do that?).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;undo_tpl_theme()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;All TPL defaults were removed and the tpltheme package has been effectively detached from the current environment. To restore TPL defaults, use set_tpl_theme().&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(iris, aes(x=jitter(Sepal.Width), y=jitter(Sepal.Length), col=Species, size = Petal.Length)) +
    geom_point() +
    labs(x=&amp;quot;Sepal Width (cm)&amp;quot;, y=&amp;quot;Sepal Length (cm)&amp;quot;, col=&amp;quot;Species&amp;quot;, size = &amp;quot;Petal Length&amp;quot;, title=&amp;quot;Iris Dataset&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introducing-tpltheme/index_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To restore the TPL theme, simply call &lt;code&gt;set_tpl_theme()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set_tpl_theme()
last_plot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introducing-tpltheme/index_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Bible Babies: Exploring Biblically-Inspired Baby Names over Time</title>
      <link>/post/bible-babies/</link>
      <pubDate>Wed, 12 Jun 2019 00:00:00 +0000</pubDate>
      <guid>/post/bible-babies/</guid>
      <description>


&lt;p&gt;The goal of this post is to explore how baby names have changed over time.&lt;/p&gt;
&lt;p&gt;More specifically, I’m focusing on the decision to name one’s baby after a Biblical figure. I’m curious if the popularity of Biblically-inspired baby names has changed over time. We’re able to explore this question using the &lt;a href=&#34;https://cran.r-project.org/web/packages/babynames/babynames.pdf&#34;&gt;&lt;em&gt;babynames&lt;/em&gt; package&lt;/a&gt; in R, which contains historical data from the U.S. Social Security Administration ranging back to 1880. It contains information on the number of babies born with a certain name in a given year, the sex of those babies, the year they were born, and their name (obviously).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(babynames)
library(knitr)
library(readxl)
library(tidyverse)
library(ggplot2)
library(cr)
conflicted::conflict_prefer(&amp;quot;filter&amp;quot;, &amp;quot;dplyr&amp;quot;)

set_cr_theme(font = &amp;quot;lato&amp;quot;)
kable(head(babynames))&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;sex&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;name&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;prop&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1880&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mary&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7065&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0723836&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1880&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Anna&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2604&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0266790&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1880&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Emma&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2003&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0205215&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1880&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Elizabeth&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0198658&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1880&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Minnie&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1746&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0178884&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1880&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Margaret&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1578&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0161672&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In order to determine the popularity of “Bible babies,” we need a list of names found in the Bible in order to search the &lt;em&gt;babynames&lt;/em&gt; dataset. I pulled a random list of Bible baby names from &lt;a href=&#34;https://www.babycentre.co.uk/a1025984/baby-names-from-the-bible&#34;&gt;babycentre.co.uk&lt;/a&gt;. The list likely doesn’t include &lt;em&gt;all&lt;/em&gt; names found in the Bible (only popular baby names), but that’s probably no big deal considering few, if any, parents name their child Athaliah.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;biblenames &amp;lt;- read_excel(&amp;quot;data/biblebabynames.xlsx&amp;quot;)

boybible &amp;lt;- biblenames %&amp;gt;% 
  select(boynames) %&amp;gt;% 
  rename(names = boynames)

girlbible &amp;lt;- biblenames %&amp;gt;% 
  filter(!is.na(girlnames)) %&amp;gt;% 
  select(girlnames) %&amp;gt;% 
  rename(names = girlnames)

biblenamesbind &amp;lt;- rbind(boybible, girlbible)

# use the %in% operator to match names with those in biblenamesbind
babynames &amp;lt;- babynames %&amp;gt;%
  mutate(biblepercent = ifelse(name %in% biblenamesbind$names, prop, 0)) &lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;popularity-of-biblical-baby-names-over-time&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Popularity of Biblical Baby Names over Time&lt;/h2&gt;
&lt;p&gt;One initial question is whether the popularity of “Bible babies” has declined over time. Given that &lt;a href=&#34;https://www.prri.org/research/american-religious-landscape-christian-religiously-unaffiliated/&#34;&gt;Christian identity&lt;/a&gt; and &lt;a href=&#34;https://religionnews.com/2014/01/27/great-decline-religion-united-states-one-graph/&#34;&gt;religiosity more generally&lt;/a&gt; have experienced declines in recent years, one may assume that the decision to name one’s baby after a Biblical figure has also become less popular.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;babynames %&amp;gt;% 
  group_by(year) %&amp;gt;% 
  summarise(sum = sum(biblepercent)) %&amp;gt;% 
  ggplot(aes(x=year, y=sum)) +
    geom_line() +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  labs(title = &amp;quot;Bible Babies over Time&amp;quot;,
       subtitle=&amp;quot;Percent of babies born with names found in the Bible&amp;quot;,
       x=&amp;quot;Year&amp;quot;,
       y=&amp;quot;Percent&amp;quot;,
       caption = &amp;quot;Source: U.S. Social Security Administration
       \n Design: www.connorrothschild.com&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/bible-babies/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Biblical names have become significantly less popular over time. We can split up the trend by sex to see if it is primarily driven by one group of babies.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;babynames %&amp;gt;% 
  group_by(year, sex) %&amp;gt;% 
  summarise(sum = sum(biblepercent)) %&amp;gt;% 
  ungroup %&amp;gt;% 
  group_by(sex) %&amp;gt;% 
  ggplot(aes(x=year, y=sum, col=sex)) +
  geom_line() +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  labs(title = &amp;quot;Bible Babies over Time&amp;quot;,
       subtitle=&amp;quot;Percent of babies born with names found in the Bible&amp;quot;,
       x=&amp;quot;Year&amp;quot;,
       y=&amp;quot;Percent&amp;quot;,
       color=&amp;quot;Sex&amp;quot;,
       caption = &amp;quot;Source: U.S. Social Security Administration
       \n Design: www.connorrothschild.com&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/bible-babies/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Indeed, much of the departure from Biblically-inspired baby names has been driven by girls. While 13% of boys born in 2017 shared a name with some biblical figure, the same was true of only 4% of girls.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;exploring-popular-names-over-time-using-gganimate&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Exploring Popular Names over Time Using gganimate&lt;/h2&gt;
&lt;p&gt;Finally, we can incorporate Thomas Lin Pedersen’s &lt;a href=&#34;https://github.com/thomasp85/gganimate&#34;&gt;&lt;em&gt;gganimate&lt;/em&gt; package&lt;/a&gt; to explore the popularity of &lt;em&gt;specific Bible names&lt;/em&gt; over time. This was inspired by Kieran Healy’s &lt;a href=&#34;https://kieranhealy.org/blog/archives/2019/05/13/baby-name-animation/&#34;&gt;similar visualization&lt;/a&gt; depicting changes in the structure of babies’ names over time. The below code creates a GIF showing the shifting popularity of boys’ names over time.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gganimate)

# make male rank variable
malebabynames &amp;lt;- babynames %&amp;gt;%
  filter(sex==&amp;quot;M&amp;quot;) %&amp;gt;% 
  group_by(year) %&amp;gt;%
  mutate(rank = min_rank(-biblepercent) * 1) %&amp;gt;%
  filter(rank &amp;lt;= 10) %&amp;gt;%
  ungroup()

# plot male animation
maleanimation &amp;lt;- malebabynames %&amp;gt;% 
  filter(sex==&amp;quot;M&amp;quot;) %&amp;gt;% 
  ggplot(aes(rank, group = name, 
                fill = as.factor(name), color = as.factor(name))) +
  geom_tile(aes(y = biblepercent/2,
                height = biblepercent,
                width = 0.9), alpha = 0.8, color = NA) +
  geom_text(aes(y = 0, label = paste(name, &amp;quot; &amp;quot;)), vjust = 0.2, hjust = 1) +
  coord_flip(clip = &amp;quot;off&amp;quot;, expand = FALSE) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  scale_x_reverse() +
  guides(color = FALSE, fill = FALSE) +
  labs(title=&amp;quot;Most Popular Biblical Baby Names for Males&amp;quot;, 
       subtitle=&amp;#39;in {closest_state}&amp;#39;, x = element_blank(), y = &amp;quot;Percent of Names&amp;quot;,
       caption = &amp;quot;Source: U.S. Social Security Administration
       \n Design: www.connorrothschild.com&amp;quot;) +
  theme(plot.title = element_text(hjust = 0, size = 22),
        plot.subtitle = element_text(hjust = 0, size = 16),
        axis.ticks.y = element_blank(), 
        axis.text.y  = element_blank(), 
        plot.margin = margin(1,1,1,4, &amp;quot;cm&amp;quot;)) +
  transition_states(year, transition_length = 4, state_length = 1) +
  ease_aes(&amp;#39;cubic-in-out&amp;#39;)

animate(maleanimation, fps = 25, nframes = 500, width = 800, height = 600)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/bible-babies/index_files/figure-html/unnamed-chunk-5-1.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;        #, renderer = gifski_renderer(&amp;quot;boybiblebabies.gif&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Replicating that code with minor tweaks creates the same animation for girls’ names:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# make rank variable
femalebabynames &amp;lt;- babynames %&amp;gt;%
  filter(sex==&amp;quot;F&amp;quot;) %&amp;gt;% 
  group_by(year) %&amp;gt;%
  mutate(rank = min_rank(-biblepercent) * 1) %&amp;gt;%
  filter(rank &amp;lt;= 10) %&amp;gt;%
  ungroup()

# plot animation
femaleanimation &amp;lt;- femalebabynames %&amp;gt;% 
  filter(sex==&amp;quot;F&amp;quot;) %&amp;gt;% 
  ggplot(aes(rank, group = name, 
             fill = as.factor(name), color = as.factor(name))) +
  geom_tile(aes(y = biblepercent/2,
                height = biblepercent,
                width = 0.9), alpha = 0.8, color = NA) +
  geom_text(aes(y = 0, label = paste(name, &amp;quot; &amp;quot;)), vjust = 0.2, hjust = 1) +
  coord_flip(clip = &amp;quot;off&amp;quot;, expand = FALSE) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  scale_x_reverse() +
  guides(color = FALSE, fill = FALSE) +
  labs(title=&amp;quot;Most Popular Biblical Baby Names for Females&amp;quot;, 
       subtitle=&amp;#39;in {closest_state}&amp;#39;, x = element_blank(), y = &amp;quot;Percent of Names&amp;quot;,
       caption = &amp;quot;Source: U.S. Social Security Administration\n Design: www.connorrothschild.com&amp;quot;) +
  theme(plot.title = element_text(hjust = 0, size = 22),
        plot.subtitle = element_text(hjust = 0, size = 16),
        axis.ticks.y = element_blank(),  
        axis.text.y  = element_blank(),  
        plot.margin = margin(1,1,1,4, &amp;quot;cm&amp;quot;)) +
  transition_states(year, transition_length = 4, state_length = 1) +
  ease_aes(&amp;#39;cubic-in-out&amp;#39;)

animate(femaleanimation, fps = 25, nframes = 500, width = 800, height = 600)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/bible-babies/index_files/figure-html/unnamed-chunk-6-1.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;        #, renderer = gifski_renderer(&amp;quot;girlbiblebabies.gif&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we can combine some of the insights from our earlier plot (depicting the popularity of Biblical names by sex) to show which boys’ names are responsible for their sex’s relative dominance over girls’ Biblically-inspired names.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# make rank variable
babynamesrank &amp;lt;- babynames %&amp;gt;%
  group_by(year) %&amp;gt;%
  mutate(rank = min_rank(-biblepercent) * 1) %&amp;gt;%
  filter(rank &amp;lt;= 10) %&amp;gt;%
  ungroup()

# plot animation
babyanimation &amp;lt;- babynamesrank %&amp;gt;% 
  ggplot(aes(rank, group = name, 
             fill = as.factor(sex), color = as.factor(sex))) +
  geom_tile(aes(y = biblepercent/2,
                height = biblepercent,
                width = 0.9), alpha = 0.8, color = NA) +
  geom_text(aes(y = 0, label = paste(name, &amp;quot; &amp;quot;)), vjust = 0.2, hjust = 1) +
  coord_flip(clip = &amp;quot;off&amp;quot;, expand = FALSE) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  scale_x_reverse() +
  guides(color = FALSE, fill = FALSE) +
  labs(title=&amp;quot;Most Popular Biblical Baby Names&amp;quot;, 
       subtitle=&amp;#39;in {closest_state}&amp;#39;, x = element_blank(), y = &amp;quot;Percent of Names&amp;quot;,
       caption = &amp;quot;Source: U.S. Social Security Administration
       \n Design: www.connorrothschild.com&amp;quot;) +
  theme(plot.title = element_text(hjust = 0, size = 22),
        plot.subtitle = element_text(hjust = 0, size = 16),
        axis.ticks.y = element_blank(),  
        axis.text.y  = element_blank(),  
        plot.margin = margin(1,1,1,4, &amp;quot;cm&amp;quot;)) +
  transition_states(year, transition_length = 4, state_length = 1) +
  ease_aes(&amp;#39;cubic-in-out&amp;#39;)

animate(babyanimation, fps = 25, nframes = 500, width = 800, height = 600)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/bible-babies/index_files/figure-html/unnamed-chunk-7-1.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;        #, renderer = gifski_renderer(&amp;quot;combinedbiblebabies.gif&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>The Race for Media Attention</title>
      <link>/post/media-mentions/</link>
      <pubDate>Thu, 30 May 2019 00:00:00 +0000</pubDate>
      <guid>/post/media-mentions/</guid>
      <description>


&lt;p&gt;In this post, I explore which presidential candidates are discussed most frequently in the American news media.&lt;/p&gt;
&lt;p&gt;Note: This post has become somewhat outdated since it’s &lt;a href=&#34;https://connorrothschild.github.io/media-mentions/&#34;&gt;original publication&lt;/a&gt; because the dataset (linked via FiveThirtyEight’s GitHub) has changed variable names and some of the data has changed.&lt;/p&gt;
&lt;p&gt;You can find a less technical version of this post without code &lt;a href=&#34;https://www.connorrothschild.com/single-post/2019/05/30/The-Race-for-Media-Attention&#34;&gt;on my blog&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;overview&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;In this post, I explore which presidential candidates are discussed most frequently in the American news media. I do so using the &lt;a href=&#34;https://blog.gdeltproject.org/gdelt-2-0-television-api-debuts/&#34;&gt;GDELT Television API&lt;/a&gt;, which pulls data from the &lt;a href=&#34;https://archive.org/details/tv&#34;&gt;TV News Archive&lt;/a&gt;. For sake of convenience, I use an existing dataset found on FiveThirtyEight’s &lt;a href=&#34;https://github.com/fivethirtyeight/data/tree/master/media-mentions-2020&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;load-libraries-and-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Load Libraries and Data&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(httr)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(ggridges)
library(ggrepel)
library(viridis)
library(lubridate)
library(RColorBrewer)
library(devtools)
library(knitr)
library(cr)

set_cr_theme(font = &amp;quot;lato&amp;quot;)

data &amp;lt;- read.csv(&amp;quot;data/mentions.csv&amp;quot;, header = T)
  #read.csv((&amp;quot;https://raw.githubusercontent.com/fivethirtyeight/data/master/media-mentions-2020/cable_weekly.csv&amp;quot;), header=T)

data &amp;lt;- data %&amp;gt;% 
  mutate(date = as.Date(date, &amp;quot;%m/%d/%y&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The dataset contains information on 22 presidential candidates, recording weekly the number of clips which mention a presidential candidate (&lt;em&gt;matched_clips&lt;/em&gt;) and dividing them by the total number of clips that week (&lt;em&gt;total_clips&lt;/em&gt;) to reveal the percent (&lt;em&gt;pct_of_all_candidate_clips&lt;/em&gt;) of clips which mention that candidate.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;date&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;pct_of_all_candidate_clips&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;matched_clips&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;total_clips&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;John Delaney&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2018-12-30&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0039432&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;76029&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;John Delaney&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2019-01-06&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0019589&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;82964&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;John Delaney&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2019-01-13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0081566&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;82521&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;John Delaney&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2019-01-20&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0020182&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;83649&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;John Delaney&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2019-01-27&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0015723&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80994&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;John Delaney&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2019-02-03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0006901&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;79183&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Of interest to us is the &lt;em&gt;name&lt;/em&gt; of each candidate and the percent (&lt;em&gt;pct_of_all_candidate_clips&lt;/em&gt;) of media mentions they receive on a weekly basis.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;analysis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;p&gt;We can begin with a simple analysis of which candidates are discussed most frequently by the media by averaging their weekly proportion of mentions in the media.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data %&amp;gt;% 
  group_by(name) %&amp;gt;% 
  summarise(pct_of_all_candidate_clips = mean(pct_of_all_candidate_clips)*100) %&amp;gt;% 
  top_n(12, wt = pct_of_all_candidate_clips) %&amp;gt;% 
  ggplot(aes(x=reorder(name,pct_of_all_candidate_clips),y=pct_of_all_candidate_clips)) +
  geom_col(show.legend=FALSE) +
  coord_flip() +
  fix_bars() +
  labs(x=element_blank(),
       y=&amp;quot;Percent of Media Mentions&amp;quot;,
       title=&amp;quot;Average Proportion of Media Coverage on a Weekly Basis&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/media-mentions/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Somewhat unsurprisingly. Joe Biden and Bernie Sanders lead the pack in media attention. Joe Biden tends to receive significantly more media attention than the average candidate (a weekly average of 0.9% of overall media content compared to 0.14% for the average candidate).&lt;/p&gt;
&lt;p&gt;How has that coverage changed over time?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data %&amp;gt;% 
  group_by(name) %&amp;gt;% 
  filter(mean(pct_of_all_candidate_clips) &amp;gt; .06) %&amp;gt;% # filter out unpopular candidates for plot clarity
  ggplot(aes(x=as.Date(date),y=pct_of_all_candidate_clips*100,group=name, color=name)) +
  geom_point() +
  geom_smooth(se = FALSE, show.legend = FALSE) +
  # geom_text(data = subset(data, as.numeric(date) == 21 &amp;amp; mean(pct_of_all_candidate_clips) &amp;gt; .05), 
  #           aes(x = 21, label = name, color = &amp;quot;#000000&amp;quot;), hjust = -.05, 
  #           show.legend = FALSE) + 
  geom_label_repel(data=subset(data, pct_of_all_candidate_clips&amp;gt;.6),
          label = &amp;quot;Lucy Flores accuses Biden of \n inappropriate touching&amp;quot;,
                   nudge_x = -25, nudge_y=-5,
                   show.legend = FALSE,
                   color=&amp;quot;black&amp;quot;) + 
  geom_label_repel(data=subset(data, pct_of_all_candidate_clips &amp;gt; .58 &amp;amp; pct_of_all_candidate_clips &amp;lt;.6),
          label = &amp;quot;Joe Biden announces candidacy&amp;quot;,
           nudge_x = -5, nudge_y=-7,
           show.legend = FALSE,
           color=&amp;quot;black&amp;quot;) +
  # theme(axis.text.x = element_text(angle = 65, hjust = 1)) +
  # coord_cartesian(clip = &amp;#39;off&amp;#39;) +
  # # scale_x_discrete(breaks = c(&amp;quot;1/20/19&amp;quot;, &amp;quot;2/10/19&amp;quot;,&amp;quot;3/10/19&amp;quot;,&amp;quot;3/31/19&amp;quot;,&amp;quot;4/28/19&amp;quot;),
  # #                  labels = c(&amp;quot;January&amp;quot;, &amp;quot;February&amp;quot;, &amp;quot;March&amp;quot;, &amp;quot;April&amp;quot;, &amp;quot;May&amp;quot;)) +
  # # theme(plot.margin = margin(5.5, 100, 5.5, 5.5)) +
  labs(x=element_blank(),
       y=&amp;quot;Percent of Media Mentions&amp;quot;,
       title=&amp;quot;Media Mentions of Candidates Over Time&amp;quot;) + 
  scale_color_discrete(name=&amp;quot;Candidate&amp;quot;, 
                       limits = c(&amp;quot;Joe Biden&amp;quot;, &amp;quot;Bernie Sanders&amp;quot;, &amp;quot;Elizabeth Warren&amp;quot;, 
                                  &amp;quot;Kamala Harris&amp;quot;, &amp;quot;Beto O&amp;#39;Rourke&amp;quot;, &amp;quot;Cory Booker&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/media-mentions/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Evidently, much of Joe Biden’s popularity in the media can be explained by a few large spikes in weekly media mentions. We can explore the distribution of weekly media mentions using a visualization known as a &lt;a href=&#34;https://cran.r-project.org/web/packages/ggridges/vignettes/introduction.html&#34;&gt;density ridge plot&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data %&amp;gt;% 
  group_by(name) %&amp;gt;% 
  filter(mean(pct_of_all_candidate_clips) &amp;gt; 0.1) %&amp;gt;% 
  ungroup() %&amp;gt;% 
ggplot(aes(x = pct_of_all_candidate_clips*100, y = reorder(name,pct_of_all_candidate_clips))) +
  geom_density_ridges(aes(point_colour=name), 
                      show.legend = FALSE, 
                      alpha = .2, 
                      point_alpha = 1, 
                      jittered_points = TRUE) +
  labs(x = &amp;quot;Percent of Media Mentions&amp;quot;,
       y=element_blank(),
       title=&amp;quot;Media Mentions of Each Candidate&amp;quot;,
       subtitle=&amp;quot;With density ridges depicting average mentions on a weekly basis&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/media-mentions/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This plot illustrates that most candidates enjoy the same levels of media coverage from one week to another. Joe Biden, however, often has weeks in which he receives much more attention than usual, as evidenced by his small peaks throughout the plot. Bernie Sanders, Kamala Harris, and Beto O’Rourke also experienced a few jumps in attention, likely when they announced their candidacy for the presidency.&lt;/p&gt;
&lt;p&gt;This raises an interesting question: when did candidates experience the most drastic changes in media attention? For example, were there any weeks in which a candidate who normally enjoys nearly no media attention began to get a lot of it?&lt;/p&gt;
&lt;p&gt;We can answer this question by calculating the difference between one week’s coverage and the prior week’s coverage (using the &lt;a href=&#34;https://www.rdocumentation.org/packages/stats/versions/3.6.0/topics/lag&#34;&gt;lag&lt;/a&gt; function).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data %&amp;gt;% 
  group_by(name) %&amp;gt;% 
  mutate(change = (pct_of_all_candidate_clips-(dplyr::lag(pct_of_all_candidate_clips, n=1, default=NA)))) %&amp;gt;% 
  filter(change &amp;gt;.2 | change &amp;lt; -.2) %&amp;gt;% 
  ggplot(aes(x=reorder(as.factor(date),change),y=change*100, fill=name)) +
  geom_col() +
  scale_fill_discrete(name=&amp;quot;Candidate&amp;quot;) +
  theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
  labs(x=element_blank(),
       y=&amp;quot;Percent Change&amp;quot;,
       title=&amp;quot;Largest Differences in Weekly Media Mentions&amp;quot;,
       subtitle=&amp;quot;Subtracting a given week&amp;#39;s % mentions from the week prior&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/media-mentions/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Unsurprisingly, the bars tend to mirror one another. If a candidate enjoys a steep increase in media attention one week, they are likely to see a correlated drop in the following week (if that week were really a spike in attention). The plot suggests that Joe Biden’s announcement (on April 25th) led to the most dramatic change in media attention in the 2020 cycle so far. Bernie Sanders also witnessed a spike in attention in the week following his announcement on February 19th. The same is true for the other candidates included in this plot.&lt;/p&gt;
&lt;p&gt;Finally, I am interested in who is “winning” the race for media attention. Although a previous plot has shown media attention over time, this data can be somewhat hard to digest and interpret as so many candidates crowd the lower bound of the data (as they receive little media attention compared to Joe Biden).&lt;/p&gt;
&lt;p&gt;By constructing a &lt;a href=&#34;https://learnr.wordpress.com/2009/05/06/ggplot2-bump-chart/&#34;&gt;bump chart&lt;/a&gt;, I am able to depict the rank of each candidate in terms of their media attention in a given week. This type of visualization assigns each candidate a categorical rank and makes their progress throughout the campaign easier to visualize.&lt;/p&gt;
&lt;p&gt;As an added benefit, this plot was difficult to construct and so it was rewarding to finally finish.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create extended color palette for 22 candidates
nb.cols &amp;lt;- 22
mycolors &amp;lt;- colorRampPalette(brewer.pal(8, &amp;quot;RdYlBu&amp;quot;))(nb.cols)
show.top.n &amp;lt;- 10

# give each candidate a ranking for each week
data &amp;lt;- data %&amp;gt;% 
  group_by(date) %&amp;gt;% 
  arrange(date, desc(pct_of_all_candidate_clips), name) %&amp;gt;%  
  mutate(rank = row_number()) %&amp;gt;% 
  ungroup()

# filter most recent data so as to make the plot more digestible
recentdata &amp;lt;- data %&amp;gt;% 
  mutate(date = as.Date(date, &amp;quot;%m/%d/%y&amp;quot;)) %&amp;gt;% 
  filter(date &amp;gt; &amp;quot;2019-03-01&amp;quot;)

# for axis labels, create ranking at the start and end of the analysis
finranking &amp;lt;- recentdata %&amp;gt;% 
  filter(date==&amp;quot;2019-05-19&amp;quot;) %&amp;gt;% 
  select(date,name,rank) 

startranking &amp;lt;- recentdata %&amp;gt;% 
  filter(date==&amp;quot;2019-03-03&amp;quot;) %&amp;gt;% 
  select(date,name,rank) 

# and plot!
recentdata %&amp;gt;% 
  ggplot(aes(x=date, y=rank, group=name, label=name)) +
  geom_line(aes(color=name, alpha = 1), size = 2) +
  geom_point(aes(color = name, alpha = 1), size = 4) +
    geom_point(color = &amp;quot;#FFFFFF&amp;quot;, size = 1) +
  scale_fill_manual(values = mycolors) +
  scale_y_reverse(breaks = 1:show.top.n) +
  scale_x_date(expand = c(0,29)) +
  coord_cartesian(ylim = c(1,show.top.n)) +
  geom_text(data = subset(startranking), size=3, 
            aes(x = date, hjust = 1.2)) +
  geom_text(data = subset(finranking), size=3, 
            aes(x = date, hjust = -.2)) +
  # scale_color_brewer(palette = &amp;quot;Paired&amp;quot;) +
  theme(line = element_blank(), rect = element_blank(), axis.text = element_blank(), 
        axis.title = element_blank(),
        axis.ticks.length = unit(0, &amp;quot;pt&amp;quot;), axis.ticks.length.x = NULL, 
        axis.ticks.length.x.top = NULL, axis.ticks.length.x.bottom = NULL, 
        axis.ticks.length.y = NULL, axis.ticks.length.y.left = NULL, 
        axis.ticks.length.y.right = NULL, legend.box = NULL, legend.position = &amp;quot;none&amp;quot;) +
  labs(x = element_blank(),
       y = &amp;quot;Rank&amp;quot;,
       title = &amp;quot;The Race for Media Attention&amp;quot;,
       subtitle = &amp;quot;Candidates ranked by weekly media mentions&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/media-mentions/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let’s focus on the meteoric rise of Pete Buttigieg:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;petedata &amp;lt;- recentdata %&amp;gt;% 
  mutate(pete = ifelse(name == &amp;quot;Pete Buttigieg&amp;quot;, 1, 0))

petedata %&amp;gt;% 
  ggplot(aes(x=date, y=rank, group=name, label=name)) +
  # pete&amp;#39;s line
  geom_line(aes(color = &amp;quot;#1089FF&amp;quot;),
                data = subset (petedata, pete == 1), 
            size = 2, show.legend = FALSE) +
  # everyone else&amp;#39;s line
  geom_line(aes(alpha = 1), 
            data = subset(petedata, pete != 1),
            size = .5, show.legend = FALSE) +
  geom_point(aes(fill = &amp;quot;grey80&amp;quot;, alpha = 1), 
             data = subset(petedata, pete == 1), size = 4) +
  geom_point(aes(alpha = 1), 
             data = subset(petedata, pete != 1), size = 2) +
  geom_point(color = &amp;quot;#FFFFFF&amp;quot;, size = 1) +
  # scale_fill_manual(values = mycolors) +
  scale_y_reverse(breaks = 1:show.top.n) +
  scale_x_date(expand = c(0,29)) +
  coord_cartesian(ylim = c(show.top.n, 1)) +
  geom_text(data = subset(startranking), size=3, 
            aes(x = date, hjust = 1.2)) +
  geom_text(data = subset(finranking), size=3, 
            aes(x = date, hjust = -.2)) +
  # scale_fill_brewer(palette = &amp;quot;Dark2&amp;quot;) +
  theme(line = element_blank(), rect = element_blank(), axis.text = element_blank(), 
        axis.title = element_blank(),
        axis.ticks.length = unit(0, &amp;quot;pt&amp;quot;), axis.ticks.length.x = NULL, 
        axis.ticks.length.x.top = NULL, axis.ticks.length.x.bottom = NULL, 
        axis.ticks.length.y = NULL, axis.ticks.length.y.left = NULL, 
        axis.ticks.length.y.right = NULL, legend.box = NULL, legend.position = &amp;quot;none&amp;quot;) +
  labs(x = element_blank(),
       y = &amp;quot;Rank&amp;quot;,
       title = &amp;quot;Out of Nowhere&amp;quot;,
       subtitle = &amp;quot;Pete Buttigieg&amp;#39;s Rapid Rise in Media Mentions&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/media-mentions/index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Some takeaways:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Bernie Sanders and Joe Biden consistently receive the most attention from the media.&lt;/li&gt;
&lt;li&gt;The most stark increase in media mentions can be seen in the rise of Pete Buttigieg, who began not even in the top 10 but now receives the third most media mentions of any candidate.&lt;/li&gt;
&lt;li&gt;Cory Booker and John Hickenlooper have all but disappeared from the media, while most other candidates remain in a place similar to where they began.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;next-steps&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;Future work could capitalize upon this analysis by looking at the &lt;em&gt;content&lt;/em&gt; of media coverage of candidates. In similar &lt;a href=&#34;https://www.connorrothschild.com/single-post/2019/05/21/following-the-race&#34;&gt;work&lt;/a&gt;, I have performed preliminary sentiment analysis on the Tweets of presidential candidates. Other researchers have &lt;a href=&#34;http://www.storybench.org/watching-the-watchdog-analyzing-initial-coverage-of-2020-candidates/&#34;&gt;shown&lt;/a&gt; that media coverage of female presidential candidates tends to be more negative than coverage of male candidates. Continuing this work with a larger dataset could reveal interesting insights about the relationship between media, politics, and sexism.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>STEMigration: Leaving and Entering STEM Fields During College</title>
      <link>/post/stem-igration/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      <guid>/post/stem-igration/</guid>
      <description>


&lt;p&gt;The goal of this project is to explore trends in STEM enrollment for different populations. Specifically, it asks: &lt;strong&gt;Are traditionally underrepresented groups more likely to migrate into or out of STEM majors? What discrepancies are present between different demographic groups?&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(readxl)
library(tidyverse)
library(tidyr)
library(knitr)
library(cr)
conflicted::conflict_prefer(&amp;quot;filter&amp;quot;, &amp;quot;dplyr&amp;quot;)

set_cr_theme(font = &amp;quot;lato&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;the-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The Data&lt;/h3&gt;
&lt;p&gt;The dataset for this project comes from &lt;a href=&#34;https://data.world/womens-history-month/womens-history-month-week-2/workspace/file?agentid=nsf&amp;amp;datasetid=undergraduate-enrollment-in-engineering-programs&amp;amp;filename=tab2-9.xlsx&#34;&gt;data.world&lt;/a&gt; and contains the enrollment numbers for undergraduates nationwide.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;undergradenrollment &amp;lt;- read_excel(&amp;quot;data/undergradenrollment.xlsx&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I modified that data in Excel to make it more suitable for this project. The head of that data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(undergradenrollment) %&amp;gt;% kable()&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;undergrads&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;female&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;male&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;white&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;asian&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;black&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;hispanic&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;nativeamerican&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;pacificislander&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;multiracial&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;foreignnational&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;firstyearundergrads&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;firstyearfemale&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;firstyearmale&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;firstyearwhite&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;firstyearasian&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;firstyearblack&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;firstyearhispanic&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;firstyearnativeamerican&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;firstyearpacificislander&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;firstyearmultiracial&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;firstyearforeignnational&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Class of 2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;405489&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;69869&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;335620&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;277921&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;43902&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23414&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;36389&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2598&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21265&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;100228&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17047&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;86787&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;72471&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10421&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7619&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8403&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;642&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4278&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Class of 2007&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;431910&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;74258&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;357652&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;295358&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47059&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24074&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39448&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2523&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23448&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;110558&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16896&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;86465&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;72547&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10145&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7374&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8268&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;696&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4331&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Class of 2008&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;442952&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;77671&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;365281&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;301483&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47738&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41919&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2629&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24412&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;111006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16238&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;84173&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;70732&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9281&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7212&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8338&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;623&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4225&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Class of 2009&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;468139&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;83988&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;384151&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;315240&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50293&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25189&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47219&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2850&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27348&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;114704&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16751&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;83477&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;69369&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9796&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7112&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8773&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;715&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4463&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Class of 2010&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;488435&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;88063&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;400372&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;321558&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51057&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25996&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50051&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2665&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;737&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;5961&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;30410&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;119144&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18617&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;91941&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;76071&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11200&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7224&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9452&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;729&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5882&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Class of 2011&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;511306&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;93633&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;417673&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;329348&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;54403&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26989&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;54245&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2554&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1093&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8819&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;33855&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;121766&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19342&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;91664&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;75508&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11106&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7338&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10282&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;765&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6007&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The following command collapses the “&lt;strong&gt;undergradenrollment&lt;/strong&gt;” file into a few summary statistics:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The proportion of a class that is of a certain demographic (female, Black, Hispanic)&lt;/li&gt;
&lt;li&gt;The change in that proportion between that class’s first year (matriculation) and their final year (graduation)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It then uses the gather function to make that data easier to analyze.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- undergradenrollment %&amp;gt;%
  mutate(propfemale = female/undergrads*100, firstyearpropfemale = firstyearfemale/firstyearundergrads*100) %&amp;gt;% 
  mutate(femalegrowth = propfemale-firstyearpropfemale) %&amp;gt;% 
  mutate(prophispanic = hispanic/undergrads*100, firstyearprophispanic = firstyearhispanic/firstyearundergrads*100) %&amp;gt;% 
  mutate(hispanicgrowth = prophispanic-firstyearprophispanic) %&amp;gt;% 
  mutate(propblack = black/undergrads*100, firstyearpropblack = firstyearblack/firstyearundergrads*100) %&amp;gt;% 
  mutate(blackgrowth = propblack-firstyearpropblack) %&amp;gt;% 
  select(year,femalegrowth,blackgrowth,hispanicgrowth,propfemale,prophispanic,propblack)  %&amp;gt;% 
  gather(&amp;quot;type&amp;quot;, &amp;quot;growth&amp;quot;, 2:4) %&amp;gt;% 
  gather(&amp;quot;proportiontype&amp;quot;,&amp;quot;proportion&amp;quot;,2:4)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The structure of that new dataset:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(data) %&amp;gt;% kable()&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;type&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;growth&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;proportiontype&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;proportion&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Class of 2006&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;femalegrowth&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.2225791&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;propfemale&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17.23080&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Class of 2007&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;femalegrowth&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.9104575&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;propfemale&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17.19293&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Class of 2008&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;femalegrowth&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.9068189&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;propfemale&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17.53486&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Class of 2009&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;femalegrowth&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.3371497&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;propfemale&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17.94083&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Class of 2010&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;femalegrowth&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.4039957&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;propfemale&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.02963&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Class of 2011&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;femalegrowth&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.4279519&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;propfemale&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.31252&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(data) %&amp;gt;% kable()&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;type&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;growth&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;proportiontype&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;proportion&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Length:72&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Length:72&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Min. :-1.8274&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Length:72&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Min. : 5.014&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Class :character&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Class :character&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1st Qu.:-0.7427&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Class :character&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1st Qu.: 5.588&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Mode :character&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Mode :character&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Median : 1.7827&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mode :character&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Median :10.167&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Mean : 1.0458&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Mean :11.150&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3rd Qu.: 2.3560&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3rd Qu.:17.307&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Max. : 3.3371&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Max. :19.205&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;plots-and-analysis&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Plots and Analysis&lt;/h3&gt;
&lt;p&gt;I am first curious how enrollment has changed for each group in my analysis. The following plots enrollment for different underrepresented groups as a proportion of overall enrollment in STEM majors at the undergraduate level.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data=data, mapping = aes(x=year,y=proportion, colour=proportiontype, group=proportiontype)) +
  geom_point() +
  geom_line() +
  ggtitle(&amp;quot;Demographic Proportion of Overall Enrollment in STEM Majors&amp;quot;, subtitle=&amp;quot;Over time&amp;quot;) +
  xlab(&amp;quot;Class&amp;quot;) +
  ylab(&amp;quot;Percent of Overall Class&amp;quot;) +
  theme_minimal() +
  scale_color_discrete(name=&amp;quot;Demographic&amp;quot;,
                      breaks=c(&amp;quot;propblack&amp;quot;,&amp;quot;propfemale&amp;quot;,&amp;quot;prophispanic&amp;quot;),
                      label=c(&amp;quot;Black&amp;quot;,&amp;quot;Female&amp;quot;,&amp;quot;Hispanic&amp;quot;)) +
  theme(axis.text.x = element_text(angle = 90))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/stem-igration/index_files/figure-html/plot2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Of the traditionally underrepresented groups, women fare the best in STEM. But even at their peak, they only held 19% of seats in STEM classrooms.&lt;/p&gt;
&lt;p&gt;Next, I am curious how these shifts vary from one graduation class to another. In other words, &lt;strong&gt;which classes experience the greatest shifts in representation throughout their time in university?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I explore this by mutating the data to include a new variable: &lt;em&gt;growth&lt;/em&gt;.
This variable (which may be more accurately be named “change”) examines the difference between the underrepresented proportion of STEM enrollment at the &lt;strong&gt;time of graduation&lt;/strong&gt; and the &lt;strong&gt;time of matriculation&lt;/strong&gt;.
If women were 19% of their class’s STEM majors at time of matriculation in 2015 and 17% of their class’s STEM majors at time of graduation, &lt;em&gt;growth&lt;/em&gt; would be 2% (19%-17%).&lt;/p&gt;
&lt;p&gt;We can explore these changes by graduation year:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data %&amp;gt;% distinct(year,type,.keep_all=TRUE) %&amp;gt;% 
ggplot(aes(fill=type, y=growth, x=year)) + 
  geom_bar(position=&amp;quot;dodge&amp;quot;, stat=&amp;quot;identity&amp;quot;) +
  xlab(&amp;quot;Class&amp;quot;) +
  ylab(&amp;quot;Percent Change&amp;quot;) +
  theme_minimal() +
  ggtitle(&amp;quot;Percent Change in Proportion of Overall STEM Class&amp;quot;, subtitle=&amp;quot;Between time of matriculation and time of graduation&amp;quot;) +
  scale_fill_discrete(name=&amp;quot;Demographic&amp;quot;,
                      label=c(&amp;quot;Black&amp;quot;,&amp;quot;Female&amp;quot;,&amp;quot;Hispanic&amp;quot;)) +
  theme(axis.text.x = element_text(angle = 90))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/stem-igration/index_files/figure-html/plot3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It seems as if women experience the greatest growth in STEM enrollment during their time as undergraduates, while Black students tend to migrate &lt;em&gt;out&lt;/em&gt; of STEM majors.&lt;/p&gt;
&lt;p&gt;We can break that down group-by-group.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data %&amp;gt;% distinct(year,type,.keep_all=TRUE) %&amp;gt;% 
  filter(type==&amp;quot;blackgrowth&amp;quot;) %&amp;gt;% 
  ggplot(mapping=aes(x=year,y=growth)) +
  geom_col(aes(fill=growth)) + 
  scale_fill_gradient() +
  ylab(&amp;quot;Percent Attrition&amp;quot;) +
  xlab(&amp;quot;Class&amp;quot;) +
  ggtitle(&amp;quot;Percent Change in Black STEM Undergrads&amp;quot;, subtitle = &amp;quot;Between time of matriculation and time of graduation&amp;quot;) +
  labs(fill=&amp;quot;Attrition&amp;quot;) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/stem-igration/index_files/figure-html/plot4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data %&amp;gt;% distinct(year,type,.keep_all=TRUE) %&amp;gt;% 
  filter(type==&amp;quot;femalegrowth&amp;quot;) %&amp;gt;% 
  ggplot(mapping=aes(x=year,y=growth)) +
  geom_col(aes(fill=growth)) +
  scale_fill_gradient() +
  ylab(&amp;quot;Percent Growth&amp;quot;) +
  xlab(&amp;quot;Class&amp;quot;) +
  ggtitle(&amp;quot;Percent Change in Female STEM Undergrads&amp;quot;, subtitle = &amp;quot;Between time of matriculation and time of graduation&amp;quot;) +
  labs(fill=&amp;quot;Growth&amp;quot;) +
  theme(axis.text.x = element_text(angle = 90))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/stem-igration/index_files/figure-html/plot5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data %&amp;gt;% distinct(year,type,.keep_all=TRUE) %&amp;gt;% 
  filter(type==&amp;quot;hispanicgrowth&amp;quot;) %&amp;gt;% 
  ggplot(mapping=aes(x=year,y=growth)) +
  geom_col(aes(fill=growth)) +
  scale_fill_gradient() +
  ylab(&amp;quot;Percent Growth&amp;quot;) +
  xlab(&amp;quot;Class&amp;quot;) +
  ggtitle(&amp;quot;Percent Change in Hispanic STEM Undergrads&amp;quot;, subtitle = &amp;quot;Between time of matriculation and time of graduation&amp;quot;) +
  labs(fill=&amp;quot;Growth&amp;quot;) +
  theme(axis.text.x = element_text(angle = 90))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/stem-igration/index_files/figure-html/plot-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here are the previous graphs, faceted:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;labels &amp;lt;- c(blackgrowth = &amp;quot;Black&amp;quot;, femalegrowth = &amp;quot;Female&amp;quot;, hispanicgrowth=&amp;quot;Hispanic&amp;quot;) 
data %&amp;gt;% distinct(year,type,.keep_all=TRUE) %&amp;gt;% 
  ggplot(mapping=aes(x=year,y=growth)) +
  geom_col(aes(fill=growth)) +
  ylab(&amp;quot;Percent Change&amp;quot;) +
  xlab(&amp;quot;Class&amp;quot;) +
  ggtitle(&amp;quot;Percent Change in Proportion of STEM Undergrads&amp;quot;, subtitle = &amp;quot;Between time of matriculation and time of graduation&amp;quot;) +
  labs(fill=&amp;quot;Percent\nChange&amp;quot;) +
  facet_grid(. ~ type, labeller=labeller(type = labels)) +
  scale_x_discrete(labels = c(&amp;quot;Class of 2006&amp;quot; = &amp;quot;2006&amp;quot;, &amp;quot;Class of 2007&amp;quot; = &amp;quot;2007&amp;quot;, &amp;quot;Class of 2008&amp;quot; = &amp;quot;2008&amp;quot;, &amp;quot;Class of 2009&amp;quot; = &amp;quot;2009&amp;quot;, &amp;quot;Class of 2010&amp;quot; = &amp;quot;2010&amp;quot;, &amp;quot;Class of 2011&amp;quot; = &amp;quot;2011&amp;quot;, &amp;quot;Class of 2012&amp;quot; = &amp;quot;2012&amp;quot;, &amp;quot;Class of 2013&amp;quot; = &amp;quot;2013&amp;quot;)) +
  theme(axis.text.x = element_text(angle = 90))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/stem-igration/index_files/figure-html/plot6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;summaries-and-takeaways&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Summaries and Takeaways&lt;/h3&gt;
&lt;p&gt;The decision to migrate into or out of STEM majors is both an individual choice and one shaped by institutional factors. In the face of demographic discrepancies, universities may or may not make changes to make STEM fields more accessible to underrepresented groups.&lt;/p&gt;
&lt;p&gt;The data paint a neutral picture of trends in STEM. This analysis may suggest something about individual choices; it may also suggest that universities are not doing enough to make STEM majors accessible to Black students. However, it is promising that women and Hispanic students are able to, and often choose to, migrate into STEM majors.&lt;/p&gt;
&lt;p&gt;There does not seem to be a temporal dynamic to these decisions. Although some classes (the Class of 2009) were more than others likely to migrate into STEM majors, no trend makes itself apparent year-by-year.&lt;/p&gt;
&lt;p&gt;This analysis may suggest that more can be done to bring women and racial minorities into STEM, or it may simply present the product of individual decisions on the part of underrepresented groups.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Automation and Its Impact on Jobs</title>
      <link>/post/automation/</link>
      <pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate>
      <guid>/post/automation/</guid>
      <description>


&lt;p&gt;The goal of this project is to understand the relationship between income, education, and automation. It asks the following: &lt;strong&gt;Is a given job’s income correlated to its likelihood of automation? Are jobs which are predominantly less educated more or less likely to be automated? How many workers are in the industries that will be automated?&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
library(ggthemes)
library(dplyr)
library(ggrepel)
library(tools)
library(readxl)
library(tidyverse)
library(knitr)
library(cr)
conflicted::conflict_prefer(&amp;quot;filter&amp;quot;, &amp;quot;dplyr&amp;quot;)

options(scipen=999)
set_cr_theme(font = &amp;quot;lato&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;load-datasets&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Load datasets:&lt;/h3&gt;
&lt;p&gt;There are three datasets for this project.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Educational attainment broke down by occupation, provided by BLS &lt;a href=&#34;https://www.bls.gov/emp/ep_education_training_system.htm&#34;&gt;here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Salaries, median hourly/annual wages broke down by occupation, provided by BLS &lt;a href=&#34;https://www.bls.gov/oes/current/oes_nat.htm#11-0000&#34;&gt;here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Risk of automation broken down by occupation, provided by Carl Benedikt Frey and Michael A. Osborne (but compiled &lt;a href=&#34;https://data.world/wnedds/occupations-by-state-and-likelihood-of-automation&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;education &amp;lt;- read_excel(&amp;quot;data/education.xlsx&amp;quot;, skip=1)
salary &amp;lt;- read_excel(&amp;quot;data/national_M2017_dl.xlsx&amp;quot;)
automation &amp;lt;- read_excel(&amp;quot;data/raw_state_automation_data.xlsx&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;analysis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;p&gt;I’ll begin by finding which occupations contribute most to the American economy (in USD).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;salary1 &amp;lt;- salary %&amp;gt;% 
  group_by(OCC_TITLE) %&amp;gt;% 
  mutate(natlwage = TOT_EMP * as.numeric(A_MEAN)) %&amp;gt;%
  filter(!is.na(TOT_EMP)) %&amp;gt;%
  filter(!is.na(A_MEAN)) %&amp;gt;%
  filter(!is.na(A_MEDIAN))
  
salary1$A_MEDIAN = as.numeric(as.character(salary1$A_MEDIAN))
salary2 &amp;lt;- select(salary1, OCC_TITLE, TOT_EMP, A_MEDIAN, natlwage) %&amp;gt;% 
  distinct()

options(scipen=999)
salary2 %&amp;gt;%
  arrange(desc(natlwage)) %&amp;gt;% 
  head() %&amp;gt;% kable()&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;OCC_TITLE&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;TOT_EMP&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;A_MEDIAN&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;natlwage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;All Occupations&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;142549250&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;37690&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7215843035000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Management Occupations&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7280330&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;102590&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;872984370300&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Office and Administrative Support Occupations&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21965480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;34740&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;833589966000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Healthcare Practitioners and Technical Occupations&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8506740&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;64770&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;687004322400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Sales and Related Occupations&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14522580&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27020&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;590778554400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Business and Financial Operations Occupations&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7472750&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;67710&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;570395007500&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Management occupations contribute the most, followed by office and administrative support, healthcare practictioners and technical occupations.&lt;/p&gt;
&lt;p&gt;This is a quick vizualization which represents the relationship between a job’s median wage and the number of Americans which have that job.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;salary2 %&amp;gt;% filter(TOT_EMP &amp;lt; 15000000) %&amp;gt;%
  ggplot(mapping=aes(x=TOT_EMP, y=A_MEDIAN)) +
  geom_point(alpha=1/3, col=&amp;quot;red&amp;quot;) +
  theme_bw() +
  ggtitle(&amp;quot;Median Wage vs Total Employment&amp;quot;) +
  xlab(&amp;quot;Number of Americans in a Given Job&amp;quot;) +
  ylab(&amp;quot;Median Wage of a Given Job&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/automation/index_files/figure-html/wagevsemployment-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We now have three data points:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;The name of an occupation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The annual median wage of that occupation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The amount it contributes to the American economy (or, more specifically, the amount workers are paid as an entire occupation for their work, annually)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Next, I want to cross-reference the salary data with the education data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;education1 &amp;lt;- education %&amp;gt;% select(-...2)
  
education1 &amp;lt;- plyr::rename(education1, c(&amp;quot;2016 National Employment Matrix title and code&amp;quot; = &amp;quot;occupation&amp;quot;,
                     &amp;quot;Less than high school diploma&amp;quot; = &amp;quot;lessthanhs&amp;quot;, 
                     &amp;quot;High school diploma or equivalent&amp;quot; = &amp;quot;hsdiploma&amp;quot;,
                     &amp;quot;Some college, no degree&amp;quot; = &amp;quot;somecollege&amp;quot;,
                     &amp;quot;Associate&amp;#39;s degree&amp;quot; = &amp;quot;associates&amp;quot;,
                     &amp;quot;Bachelor&amp;#39;s degree&amp;quot; = &amp;quot;bachelors&amp;quot;,
                     &amp;quot;Master&amp;#39;s degree&amp;quot; = &amp;quot;masters&amp;quot;,
                     &amp;quot;Doctoral or professional degree&amp;quot; = &amp;quot;professional&amp;quot;))

education2 &amp;lt;- education1 %&amp;gt;% 
  group_by(occupation) %&amp;gt;%
  mutate(hsorless = lessthanhs + hsdiploma,
         somecollegeorassociates = somecollege + associates,
         postgrad = masters + professional)

education2 &amp;lt;- education2 %&amp;gt;% drop_na()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, I want to join education2 and salary2 to start analysis of education’s effect on salary.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;salary2 &amp;lt;- plyr::rename(salary2, c(&amp;quot;OCC_TITLE&amp;quot; = &amp;quot;occupation&amp;quot;))
salary2$occupation &amp;lt;- tolower(salary2$occupation)
education2$occupation &amp;lt;- tolower(education2$occupation)
edsal &amp;lt;- merge(as.data.frame(education2), as.data.frame(salary2), by=&amp;quot;occupation&amp;quot;) %&amp;gt;% drop_na()

head(edsal) %&amp;gt;% kable()&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;occupation&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lessthanhs&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;hsdiploma&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;somecollege&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;associates&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;bachelors&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;masters&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;professional&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;hsorless&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;somecollegeorassociates&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;postgrad&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;TOT_EMP&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;A_MEDIAN&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;natlwage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;accountants and auditors&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;55.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1241000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;69350&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;96698720000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;actuaries&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;62.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;35.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19210&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;101560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2206268500&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;adhesive bonding machine operators and tenders&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;70.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15860&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;32710&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;549231800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;administrative law judges, adjudicators, and hearing officers&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;88.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;93.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;94790&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1423094400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;administrative services managers&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;38.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;270100&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;94020&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27922938000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;adult basic and secondary education and literacy teachers and instructors&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;35.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;60670&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52100&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3446056000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;At this point I’m realizing that having the educational breakdown (# of Bachelor’s degrees, PhD’s, etc.) per job is interesting but may not be able to reveal a lot of key insights.&lt;/p&gt;
&lt;p&gt;So, I’m going to introduce a fourth dataset: the &lt;em&gt;typical&lt;/em&gt; education of a worker in a given occupation, also provided by BLS and found &lt;a href=&#34;https://www.bls.gov/emp/tables/education-and-training-by-occupation.htm&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;typicaleducation &amp;lt;- read_excel(&amp;quot;data/typicaleducation.xlsx&amp;quot;)
typicaleducation2 &amp;lt;- typicaleducation %&amp;gt;% select(occupation,typicaled,workexp)
typicaleducation2 &amp;lt;- typicaleducation2 %&amp;gt;% drop_na()
typicaleducation2$occupation &amp;lt;- tolower(typicaleducation2$occupation)
edsal2 &amp;lt;- merge(as.data.frame(edsal), as.data.frame(typicaleducation2), by=&amp;quot;occupation&amp;quot;)

head(edsal2) %&amp;gt;% kable()&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;occupation&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lessthanhs&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;hsdiploma&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;somecollege&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;associates&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;bachelors&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;masters&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;professional&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;hsorless&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;somecollegeorassociates&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;postgrad&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;TOT_EMP&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;A_MEDIAN&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;natlwage&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;typicaled&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;workexp&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;accountants and auditors&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;55.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1241000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;69350&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;96698720000&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Bachelor’s degree&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;actuaries&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;62.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;35.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19210&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;101560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2206268500&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Bachelor’s degree&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;adhesive bonding machine operators and tenders&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;70.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15860&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;32710&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;549231800&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;High school diploma or equivalent&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;administrative law judges, adjudicators, and hearing officers&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;88.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;93.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;94790&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1423094400&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Doctoral or professional degree&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;5 years or more&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;administrative services managers&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;38.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;270100&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;94020&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27922938000&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Bachelor’s degree&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Less than 5 years&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;adult basic and secondary education and literacy teachers and instructors&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;35.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;60670&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52100&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3446056000&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Bachelor’s degree&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This data allows us to ask: &lt;strong&gt;What is the median wage for each typical level of education?&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;edsal3 &amp;lt;- edsal2 %&amp;gt;% 
  group_by(typicaled) %&amp;gt;% 
  summarise(medianwage = mean(A_MEDIAN))

legend_ord &amp;lt;- levels(with(edsal3, reorder(typicaled, medianwage)))

ggplot(data=edsal3, aes(x = reorder(typicaled, medianwage), y = medianwage)) +
  geom_col(aes(fill=typicaled)) +
  ggtitle(&amp;quot;Median Annual Income by Education Level&amp;quot;) +
  xlab(&amp;quot;Education Level&amp;quot;)+
  ylab(&amp;quot;Median Annual Income&amp;quot;) +
  labs(fill=&amp;quot;Education Level&amp;quot;) +
  scale_fill_discrete(breaks=legend_ord) +
  theme_minimal() +
  theme(axis.text.x=element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/automation/index_files/figure-html/wagebyedu-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The results are unsurpising: more educated people on average earn more.&lt;/p&gt;
&lt;p&gt;Lastly, I bring in the automation data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;automationwstates &amp;lt;- automation %&amp;gt;% select(-soc)
automation1 &amp;lt;- automationwstates %&amp;gt;% select(occupation,probability,total)
head(automation) %&amp;gt;% kable()&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;soc&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;occupation&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;probability&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;alabama&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;alaska&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;arizona&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;arkansas&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;california&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;colorado&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;connecticut&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;delaware&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;district_of_columbia&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;florida&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;georgia&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;hawaii&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;idaho&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;illinois&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;indiana&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;iowa&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;kansas&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;kentucky&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;louisiana&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;maine&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;maryland&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;massachusetts&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;michigan&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;minnesota&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mississippi&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;missouri&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;montana&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;nebraska&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;nevada&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;new_hampshire&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;new_jersey&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;new_mexico&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;new_york&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;north_carolina&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;north_dakota&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;ohio&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;oklahoma&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;oregon&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;pennsylvania&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;rhode_island&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;south_carolina&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;south_dakota&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;tennessee&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;texas&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;utah&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;vermont&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;virginia&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;washington&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;west_virginia&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;wisconsin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;wyoming&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;total&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;11-1011&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Chief Executives&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1030&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;760&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5750&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2710&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;31150&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;880&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1410&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;340&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2840&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6750&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1840&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1400&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17440&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4950&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2050&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4410&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3440&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1010&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;920&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1800&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11020&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6260&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7490&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;940&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5180&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;600&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;690&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1410&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;940&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;700&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;70&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15410&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4310&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;920&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5340&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6370&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2650&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9230&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;390&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3400&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5460&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5890&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3650&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;280&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6320&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5910&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;980&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3740&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;160&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;223270&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;11-1021&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;General and Operations Managers&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.160&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26930&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6490&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;43300&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20680&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;261780&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41540&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;33280&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4080&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26610&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;77340&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;90520&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11070&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12250&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;121040&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49210&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25900&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19620&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26190&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29920&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12360&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47850&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;71880&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;58040&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24110&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41440&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4490&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14420&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11030&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;44800&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15550&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;162870&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53770&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7010&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;64710&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27400&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;32350&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;70430&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6640&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;31780&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3730&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;44400&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;168610&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;36200&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2760&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52380&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;43760&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10200&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;32350&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4840&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2188870&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2011-11-01&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Advertising and Promotions Managers&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.039&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;470&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;110&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3760&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;300&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;220&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;750&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;820&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;200&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;160&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3670&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;290&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;230&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;230&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;270&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;320&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;130&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;460&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1290&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;650&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;610&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;150&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;390&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;30&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;280&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;150&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;630&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;190&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5130&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;450&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;70&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;460&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;200&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;570&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;270&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;670&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1210&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;380&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;240&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;640&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;200&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28080&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2021-11-01&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Marketing Managers&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.014&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;530&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;200&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4790&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;33390&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3060&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4970&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;590&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1280&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7600&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7140&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;540&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;860&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14030&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2870&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1920&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1470&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1490&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;920&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;810&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2980&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11790&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3870&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7800&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;470&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2590&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;130&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1060&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1640&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1170&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11260&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;350&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16500&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5650&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;310&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5350&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1420&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4830&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6250&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;550&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1710&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;60&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3400&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9570&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2320&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;380&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3840&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5830&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;260&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2980&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;30&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;205900&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2022-11-01&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Sales Managers&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.013&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2510&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;400&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10650&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2650&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;69180&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4570&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7040&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;860&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1180&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15460&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2470&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2200&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24150&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5770&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3350&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3250&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3420&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;980&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5230&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14860&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10090&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12590&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1460&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;190&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1930&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3350&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1750&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12840&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20170&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6750&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;710&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11410&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3890&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6220&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8930&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;850&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3540&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;300&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8890&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22310&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3360&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5360&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7390&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;600&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5730&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;180&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;365250&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2031-11-01&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Public Relations and Fundraising Managers&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;400&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;150&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1240&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;300&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7010&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;960&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;980&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;210&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4360&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1710&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1470&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;360&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;200&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3830&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;870&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;960&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;630&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;310&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;420&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1350&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4200&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1300&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1880&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;270&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1020&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;140&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;580&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;470&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;470&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1900&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;180&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6040&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;170&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1790&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;720&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1470&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1640&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;260&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;520&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;870&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3680&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;380&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;210&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1250&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2100&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;130&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1010&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;63950&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Next, I visualize the probability of automation vs total employment:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;automation1 %&amp;gt;%
  ggplot(mapping=aes(x=total, y=probability)) +
  geom_point(alpha=1/3, col=&amp;quot;blue&amp;quot;) +
  theme_bw() +
  ggtitle(&amp;quot;Probability of Automation vs Total Employment&amp;quot;) +
  xlab(&amp;quot;Number of Americans in a Given Job&amp;quot;) +
  ylab(&amp;quot;Probability of Automation&amp;quot;) +
  geom_label_repel(data=subset(automation1, total &amp;gt; 4000000),
                   aes(total, probability,label=occupation), label.size=.5, label.r=.05, size=2.5, nudge_y = .05, nudge_x= -10000)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/automation/index_files/figure-html/autoviz-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There doesn’t seem to be a huge relationship between automation and number of employees, however there is some concentration at each of the poles.&lt;/p&gt;
&lt;p&gt;Some final data cleaning, and the merge of the final dataset:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;automation1$occupation &amp;lt;- str_replace_all(automation1$occupation, &amp;quot;;&amp;quot;, &amp;quot;,&amp;quot;)
automation1$occupation &amp;lt;- tolower(automation$occupation)
data &amp;lt;- merge(as.data.frame(edsal2), as.data.frame(automation1), by=&amp;quot;occupation&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can create an initial visualization of the relationship between automation risk and education level.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;autovsedu &amp;lt;- data %&amp;gt;% 
  group_by(typicaled) %&amp;gt;% 
  summarise(medianwage = mean(A_MEDIAN),
            averageprobability = mean(probability))

legend_ord2 &amp;lt;- levels(with(autovsedu, reorder(typicaled, -averageprobability)))

ggplot(data=autovsedu, aes(x = reorder(typicaled, -averageprobability), y = averageprobability)) +
  geom_col(aes(fill=typicaled)) +
  ggtitle(&amp;quot;Likelihood of Job Automation by Education Level&amp;quot;) +
  xlab(&amp;quot;Education Level&amp;quot;)+
  ylab(&amp;quot;Likelihood of Job Automation&amp;quot;) +
  labs(fill=&amp;quot;Education Level&amp;quot;) +
  scale_fill_discrete(breaks=legend_ord2) +
  theme_minimal() +
  theme(axis.text.x=element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/automation/index_files/figure-html/firstlook-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There is a rather clear correlation between level of education and automation risk: those who are more educated are better protected from automation.&lt;/p&gt;
&lt;p&gt;We can then visualize this relationship by individual occupation:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data=data) +
  geom_point(mapping=aes(x=A_MEDIAN, y=probability, size=TOT_EMP, alpha=1/10, col=typicaled))+
  scale_size(range = c(1, 20)) +
  ylim(-.01,1) +
  xlab(&amp;quot;Median Income&amp;quot;) +
  ylab(&amp;quot;Probability of Automation&amp;quot;) +
  ggtitle(&amp;quot;Likelihood of Job Automation vs Median Income&amp;quot;) +
  labs(size=&amp;quot;Total Employment&amp;quot;, col=&amp;quot;Education Level&amp;quot;) +
  labs(alpha=NULL) +
  guides(alpha=FALSE) +
  theme(legend.text = element_text(colour=&amp;quot;black&amp;quot;, size = 10)) +
  guides(col = guide_legend(override.aes = list(size=5))) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/automation/index_files/figure-html/viz2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;With labels, a final look:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data$occupation &amp;lt;- toTitleCase(data$occupation)

ggplot(data=data) +
  geom_point(mapping=aes(x=A_MEDIAN, y=probability, size=TOT_EMP, alpha=0.05, col=typicaled))+
  geom_smooth(aes(x=A_MEDIAN, y=probability), method=&amp;quot;lm&amp;quot;, se=FALSE) +
  scale_size(range = c(1, 20)) +
  ylim(-.05,1.05) +
  xlim(25000,200000) +
  xlab(&amp;quot;Median Income&amp;quot;) +
  ylab(&amp;quot;Probability of Automation&amp;quot;) +
  ggtitle(&amp;quot;Likelihood of Job Automation vs Median Income&amp;quot;) +
  labs(size=&amp;quot;Total Employment&amp;quot;, col=&amp;quot;Typical Education Level&amp;quot;) +
  labs(alpha=NULL) +
  guides(alpha=FALSE) +
  theme(legend.text = element_text(colour=&amp;quot;black&amp;quot;, size = 10)) +
  guides(col = guide_legend(override.aes = list(size=5))) +
  theme_minimal() +
  geom_label_repel(aes(A_MEDIAN,probability,label=occupation),subset(data, A_MEDIAN &amp;gt; 175000 &amp;amp; probability &amp;lt; .05), label.size=.5, label.r=.05, size=2.5, nudge_y = .05, nudge_x= -10000) +
  geom_label_repel(aes(A_MEDIAN,probability,label=occupation),subset(data, A_MEDIAN == 21030), label.size=.1, label.r=.01, size=1, nudge_y = 0,nudge_x=0) +
  geom_label_repel(aes(A_MEDIAN,probability,label=occupation),subset(data, A_MEDIAN == 24540), label.size=.1, label.r=.01, size=1, nudge_y = 0,nudge_x=0) +
  geom_label_repel(aes(A_MEDIAN,probability,label=occupation),subset(data, A_MEDIAN &amp;gt; 100000 &amp;amp; probability &amp;gt; .90), label.size=.5, label.r=.05, size=2.5, nudge_y = -.05,nudge_x=10000) +
  annotate(&amp;quot;text&amp;quot;, x = 165000, y = 1.03, label = &amp;quot;Highest salary,\n highest automation risk&amp;quot;, size=3, fontface=2) +
  annotate(&amp;quot;text&amp;quot;, x = 165000, y = -0.035, label = &amp;quot;Highest salary,\n lowest automation risk&amp;quot;, size=3, fontface=2) +
  annotate(&amp;quot;text&amp;quot;, x = 45000, y = -0.035, label = &amp;quot;Lowest salary,\n lowest automation risk&amp;quot;, size=3, fontface=2) +
  annotate(&amp;quot;text&amp;quot;, x = 45000, y = 1.03, label = &amp;quot;Lowest salary,\n highest automation risk&amp;quot;, size=3, fontface=2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/automation/index_files/figure-html/finalviz-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;conclusions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Conclusions&lt;/h3&gt;
&lt;p&gt;Using the dataset I’ve used in this project, researchers Carl Frey and Michael Osborne &lt;a href=&#34;https://www.oxfordmartin.ox.ac.uk/downloads/academic/The_Future_of_Employment.pdf&#34;&gt;predicted&lt;/a&gt; that 47% of jobs are at risk of automation over the next couple decades.&lt;/p&gt;
&lt;p&gt;The visuals above suggest that the ills of automation may not be evenly distributed across jobs.&lt;/p&gt;
&lt;p&gt;Less educated workers are more likely to face job loss as a product of automation. Those with high school diplomas or less (green bubbles) find themself concentrated near the top of the y-axis, while those with Bachelor’s degrees or higher on average face a lower risk of automation.&lt;/p&gt;
&lt;p&gt;A job’s salary is also predictive of automation probability. As the median income of a profession increases, the likelihood of automation displacing its workers decreases.&lt;/p&gt;
&lt;p&gt;Automation’s impact on work necessitates a policy response. The fact that automation will differentially impact different industries reminds us that this public policy will have to be strategic and thoughtful.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
