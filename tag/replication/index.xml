<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>replication | Connor Rothschild</title>
    <link>https://connorrothschild.github.io/v2/tag/replication/</link>
      <atom:link href="https://connorrothschild.github.io/v2/tag/replication/index.xml" rel="self" type="application/rss+xml" />
    <description>replication</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Connor Rothschild, 2021</copyright><lastBuildDate>Mon, 18 May 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://connorrothschild.github.io/v2/img/social.png</url>
      <title>replication</title>
      <link>https://connorrothschild.github.io/v2/tag/replication/</link>
    </image>
    
    <item>
      <title>Recreating a Table by The Economist Using Reactable</title>
      <link>https://connorrothschild.github.io/v2/post/economist-table-replication-using-reactable/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      <guid>https://connorrothschild.github.io/v2/post/economist-table-replication-using-reactable/</guid>
      <description>
&lt;script src=&#34;https://connorrothschild.github.io/v2/v2/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://connorrothschild.github.io/v2/v2/rmarkdown-libs/anchor-sections/anchor-sections.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://connorrothschild.github.io/v2/v2/rmarkdown-libs/anchor-sections/anchor-sections.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://connorrothschild.github.io/v2/v2/rmarkdown-libs/core-js/shim.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://connorrothschild.github.io/v2/v2/rmarkdown-libs/react/react.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://connorrothschild.github.io/v2/v2/rmarkdown-libs/react/react-dom.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://connorrothschild.github.io/v2/v2/rmarkdown-libs/reactwidget/react-tools.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://connorrothschild.github.io/v2/v2/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://connorrothschild.github.io/v2/v2/rmarkdown-libs/reactable-binding/reactable.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;em&gt;The Economist&lt;/em&gt; recently released a series of country-level &lt;a href=&#34;https://twitter.com/J_CD_T/status/1261625814854045696&#34;&gt;datasets&lt;/a&gt; on ‘excess mortality’, a term used to &lt;a href=&#34;https://www.economist.com/graphic-detail/2020/04/16/tracking-covid-19-excess-deaths-across-countries&#34;&gt;describe&lt;/a&gt; ‘the gap between the total number of people who died from any cause, and the historical average for the same place and time of year.’ In simpler terms, the measure captures how many deaths &lt;em&gt;are&lt;/em&gt; happening that &lt;em&gt;shouldn’t be&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In the (free!) articles accompanying that data, I came across the following table:&lt;/p&gt;
&lt;div style=&#34;text-align:center&#34;&gt;
&lt;p&gt;&lt;img width = 100% src = img/econ-table.png&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I thought the table was clean and sent a clear message. The addition of inline barcharts is not intrusive but still helps the reader takeaway insights about the data. It’s a rather pretty table. Having recently &lt;a href=&#34;https://twitter.com/dataandme/status/1196552930167599106&#34;&gt;come across&lt;/a&gt; Greg Lin’s package &lt;a href=&#34;https://glin.github.io/reactable/index.html&#34;&gt;&lt;code&gt;reactable&lt;/code&gt;&lt;/a&gt;, I thought this could be a good opportunity to try my hand at recreating the above.&lt;/p&gt;
&lt;p&gt;(Coincidentally, while I was working on this project, Malcolm Barrett released a similar &lt;a href=&#34;https://malco.io/2020/05/16/replicating-an-nyt-table-of-swedish-covid-deaths-with-gt/&#34;&gt;blog post&lt;/a&gt; documenting his recreation of a NYT table using &lt;code&gt;gt&lt;/code&gt;. Check it out!)&lt;/p&gt;
&lt;div id=&#34;loading-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Loading packages&lt;/h2&gt;
&lt;p&gt;Our process uses standard packages: &lt;code&gt;reactable&lt;/code&gt; (obviously), &lt;code&gt;htmltools&lt;/code&gt; as its buddy, &lt;code&gt;lubridate&lt;/code&gt; for days and times, &lt;code&gt;hrbrthemes&lt;/code&gt; for &lt;em&gt;The Economist’s&lt;/em&gt; font, and &lt;code&gt;tidyverse&lt;/code&gt; for general purpose data wrangling.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(reactable)
library(htmltools)
library(lubridate)
library(hrbrthemes)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;gather-the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Gather the data&lt;/h2&gt;
&lt;p&gt;You can definitely skip this step if you’re not interested in the data collection and cleaning process.&lt;/p&gt;
&lt;p&gt;Unfortunately, one of the more time-consuming steps of this project was getting the data in the same format &lt;em&gt;The Economist&lt;/em&gt; used in their article. The data they released comes in the form of a series of &lt;a href=&#34;https://github.com/TheEconomist/covid-19-excess-deaths-tracker/tree/master/output-data/excess-deaths&#34;&gt;country-level CSVs&lt;/a&gt;; although helpful for country-level analysis, this meant that we have to modify the data into a joined format in order to create a table.&lt;/p&gt;
&lt;p&gt;Let’s begin by creating a function which reads in &lt;strong&gt;each individual CSV&lt;/strong&gt;, selects relevant columns, and stores that specific dataframe in the global environment.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create_dataframe &amp;lt;- function(country) {
  ## for URL (below)
  country &amp;lt;- str_replace(country, &amp;quot; &amp;quot;, &amp;quot;_&amp;quot;)
  
  ## read in CSV, given country parameter
  data &amp;lt;-
    readr::read_csv(
      paste0(
        &amp;#39;https://raw.githubusercontent.com/TheEconomist/covid-19-excess-deaths-tracker/master/output-data/excess-deaths/&amp;#39;, country, &amp;#39;_excess_deaths.csv&amp;#39;
      )
    )
  
  ## select relevant columns
  data &amp;lt;- data %&amp;gt;%
    select(
      country,
      region,
      start_date,
      end_date,
      population,
      total_deaths,
      covid_deaths,
      expected_deaths,
      excess_deaths,
      non_covid_deaths
    )
  
  assign(country, rbind(data), envir = .GlobalEnv)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that function created, we then want to loop it with each country &lt;em&gt;The Economist&lt;/em&gt; has included.&lt;/p&gt;
&lt;p&gt;To do so, we grab their list of sources from GitHub and pull each country into a list:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;country_names &amp;lt;-
  readr::read_csv(
    &amp;#39;https://raw.githubusercontent.com/TheEconomist/covid-19-excess-deaths-tracker/master/source-data/list_of_sources.csv&amp;#39;
  ) %&amp;gt;%
  select(country) %&amp;gt;%
  distinct() %&amp;gt;%
  mutate(country = stringr::str_to_lower(country)) %&amp;gt;%
  filter(country != &amp;#39;all&amp;#39;) %&amp;gt;%
  pull()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we loop!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;for (country in country_names) {
  tryCatch({create_dataframe(country)},
           error = function(e) {
             return(NULL)
           })
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we have a list of dataframes, with each containing one country’s data on excess mortality.&lt;/p&gt;
&lt;p&gt;Finally, we merge each of these new dataframes into one master dataset. Here, we are defining in &lt;code&gt;dfs&lt;/code&gt; a list of all objects in the global environment that are of the structure data frame. Then, we &lt;code&gt;rbind&lt;/code&gt; them all together!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dfs = sapply(.GlobalEnv, is.data.frame)

data &amp;lt;- do.call(rbind, mget(names(dfs)[dfs]))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But unfortunately, that’s not all. We need to filter our data to only include the places that are in &lt;em&gt;The Economist’s&lt;/em&gt; table. To make matters more difficult, the table’s identifying row is titled ‘Region/Country’, and includes data from two &lt;em&gt;separate&lt;/em&gt; rows in the CSVs.&lt;/p&gt;
&lt;p&gt;Let’s begin by manually defining and filtering according to the countries and regions that &lt;em&gt;The Economist&lt;/em&gt; includes. (This selection does not seem to have an order to it; as such, it has to be manual).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;good_countries &amp;lt;-
  c(&amp;quot;Britain&amp;quot;,
    &amp;quot;Spain&amp;quot;,
    &amp;quot;Italy&amp;quot;,
    &amp;quot;France&amp;quot;,
    &amp;quot;Netherlands&amp;quot;,
    &amp;quot;Belgium&amp;quot;,
    &amp;quot;Sweden&amp;quot;,
    &amp;quot;Austria&amp;quot;)

good_regions &amp;lt;- c(&amp;quot;New York City&amp;quot;, &amp;quot;Istanbul&amp;quot;, &amp;quot;Jakarta&amp;quot;)

data_filtered_countries &amp;lt;- data %&amp;gt;%
  filter(country %in% good_countries) %&amp;gt;%
  filter(country == region)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because the table only has one row for country/region, and groups them accordingly, we can go ahead and replace the &lt;code&gt;country&lt;/code&gt; variable in the &lt;code&gt;data_filtered_regions&lt;/code&gt; dataframe with &lt;code&gt;region&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_filtered_regions &amp;lt;- data %&amp;gt;%
  filter(region %in% good_regions) %&amp;gt;%
  # replace for the sake of the table
  mutate(country = region)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And merge:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_filtered &amp;lt;-
  rbind(data_filtered_countries, data_filtered_regions)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we notice that the table title says ‘Excess mortality &lt;em&gt;since region/country’s first 50 covid deaths&lt;/em&gt;.’ This means we need to exclude counts of excess deaths &lt;em&gt;before&lt;/em&gt; a region had 50 COVID deaths.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_filtered &amp;lt;- data_filtered %&amp;gt;%
  group_by(country) %&amp;gt;%
  mutate(csum = cumsum(covid_deaths))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point (after only selecting our relevant columns), our data looks like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_filtered %&amp;gt;% 
  select(country, start_date, end_date, covid_deaths, excess_deaths, covid_deaths, csum) %&amp;gt;% 
  reactable()&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;country&#34;:[&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Belgium&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Britain&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Sweden&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Netherlands&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;Spain&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;France&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Austria&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;Italy&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;New York City&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Istanbul&#34;,&#34;Jakarta&#34;,&#34;Jakarta&#34;,&#34;Jakarta&#34;,&#34;Jakarta&#34;,&#34;Jakarta&#34;],&#34;start_date&#34;:[&#34;2019-12-30&#34;,&#34;2020-01-06&#34;,&#34;2020-01-13&#34;,&#34;2020-01-20&#34;,&#34;2020-01-27&#34;,&#34;2020-02-03&#34;,&#34;2020-02-10&#34;,&#34;2020-02-17&#34;,&#34;2020-02-24&#34;,&#34;2020-03-02&#34;,&#34;2020-03-09&#34;,&#34;2020-03-16&#34;,&#34;2020-03-23&#34;,&#34;2020-03-30&#34;,&#34;2020-04-06&#34;,&#34;2020-04-13&#34;,&#34;2020-04-20&#34;,&#34;2020-04-27&#34;,&#34;2020-05-04&#34;,&#34;2020-05-11&#34;,&#34;2020-05-18&#34;,&#34;2020-05-25&#34;,&#34;2020-06-01&#34;,&#34;2020-06-08&#34;,&#34;2020-06-15&#34;,&#34;2020-06-22&#34;,&#34;2020-06-29&#34;,&#34;2020-07-06&#34;,&#34;2020-07-13&#34;,&#34;2020-07-20&#34;,&#34;2020-07-27&#34;,&#34;2020-08-03&#34;,&#34;2020-08-10&#34;,&#34;2020-08-17&#34;,&#34;2020-08-24&#34;,&#34;2020-08-31&#34;,&#34;2020-09-07&#34;,&#34;2020-09-14&#34;,&#34;2020-09-21&#34;,&#34;2020-09-28&#34;,&#34;2020-10-05&#34;,&#34;2020-10-12&#34;,&#34;2020-10-19&#34;,&#34;2020-10-26&#34;,&#34;2020-11-02&#34;,&#34;2020-11-09&#34;,&#34;2020-11-16&#34;,&#34;2020-11-23&#34;,&#34;2020-11-30&#34;,&#34;2020-12-07&#34;,&#34;2020-12-14&#34;,&#34;2020-12-21&#34;,&#34;2019-12-28&#34;,&#34;2020-01-04&#34;,&#34;2020-01-11&#34;,&#34;2020-01-18&#34;,&#34;2020-01-25&#34;,&#34;2020-02-01&#34;,&#34;2020-02-08&#34;,&#34;2020-02-15&#34;,&#34;2020-02-22&#34;,&#34;2020-02-29&#34;,&#34;2020-03-07&#34;,&#34;2020-03-14&#34;,&#34;2020-03-21&#34;,&#34;2020-03-28&#34;,&#34;2020-04-04&#34;,&#34;2020-04-11&#34;,&#34;2020-04-18&#34;,&#34;2020-04-25&#34;,&#34;2020-05-02&#34;,&#34;2020-05-09&#34;,&#34;2020-05-16&#34;,&#34;2020-05-23&#34;,&#34;2020-05-30&#34;,&#34;2020-06-06&#34;,&#34;2020-06-13&#34;,&#34;2020-06-20&#34;,&#34;2020-06-27&#34;,&#34;2020-07-04&#34;,&#34;2020-07-11&#34;,&#34;2020-07-18&#34;,&#34;2020-07-25&#34;,&#34;2020-08-01&#34;,&#34;2020-08-08&#34;,&#34;2020-08-15&#34;,&#34;2020-08-22&#34;,&#34;2020-08-29&#34;,&#34;2020-09-05&#34;,&#34;2020-09-12&#34;,&#34;2020-09-19&#34;,&#34;2020-09-26&#34;,&#34;2020-10-03&#34;,&#34;2020-10-10&#34;,&#34;2020-10-17&#34;,&#34;2020-10-24&#34;,&#34;2020-10-31&#34;,&#34;2020-11-07&#34;,&#34;2020-11-14&#34;,&#34;2020-11-21&#34;,&#34;2020-11-28&#34;,&#34;2020-12-05&#34;,&#34;2020-12-12&#34;,&#34;2020-12-19&#34;,&#34;2020-12-26&#34;,&#34;2021-01-02&#34;,&#34;2019-12-30&#34;,&#34;2020-01-06&#34;,&#34;2020-01-13&#34;,&#34;2020-01-20&#34;,&#34;2020-01-27&#34;,&#34;2020-02-03&#34;,&#34;2020-02-10&#34;,&#34;2020-02-17&#34;,&#34;2020-02-24&#34;,&#34;2020-03-02&#34;,&#34;2020-03-09&#34;,&#34;2020-03-16&#34;,&#34;2020-03-23&#34;,&#34;2020-03-30&#34;,&#34;2020-04-06&#34;,&#34;2020-04-13&#34;,&#34;2020-04-20&#34;,&#34;2020-04-27&#34;,&#34;2020-05-04&#34;,&#34;2020-05-11&#34;,&#34;2020-05-18&#34;,&#34;2020-05-25&#34;,&#34;2020-06-01&#34;,&#34;2020-06-08&#34;,&#34;2020-06-15&#34;,&#34;2020-06-22&#34;,&#34;2020-06-29&#34;,&#34;2020-07-06&#34;,&#34;2020-07-13&#34;,&#34;2020-07-20&#34;,&#34;2020-07-27&#34;,&#34;2020-08-03&#34;,&#34;2020-08-10&#34;,&#34;2020-08-17&#34;,&#34;2020-08-24&#34;,&#34;2020-08-31&#34;,&#34;2020-09-07&#34;,&#34;2020-09-14&#34;,&#34;2020-09-21&#34;,&#34;2020-09-28&#34;,&#34;2020-10-05&#34;,&#34;2020-10-12&#34;,&#34;2020-10-19&#34;,&#34;2020-10-26&#34;,&#34;2020-11-02&#34;,&#34;2020-11-09&#34;,&#34;2020-11-16&#34;,&#34;2020-11-23&#34;,&#34;2020-11-30&#34;,&#34;2020-12-07&#34;,&#34;2020-12-14&#34;,&#34;2020-12-21&#34;,&#34;2019-12-30&#34;,&#34;2020-01-06&#34;,&#34;2020-01-13&#34;,&#34;2020-01-20&#34;,&#34;2020-01-27&#34;,&#34;2020-02-03&#34;,&#34;2020-02-10&#34;,&#34;2020-02-17&#34;,&#34;2020-02-24&#34;,&#34;2020-03-02&#34;,&#34;2020-03-09&#34;,&#34;2020-03-16&#34;,&#34;2020-03-23&#34;,&#34;2020-03-30&#34;,&#34;2020-04-06&#34;,&#34;2020-04-13&#34;,&#34;2020-04-20&#34;,&#34;2020-04-27&#34;,&#34;2020-05-04&#34;,&#34;2020-05-11&#34;,&#34;2020-05-18&#34;,&#34;2020-05-25&#34;,&#34;2020-06-01&#34;,&#34;2020-06-08&#34;,&#34;2020-06-15&#34;,&#34;2020-06-22&#34;,&#34;2020-06-29&#34;,&#34;2020-07-06&#34;,&#34;2020-07-13&#34;,&#34;2020-07-20&#34;,&#34;2020-07-27&#34;,&#34;2020-08-03&#34;,&#34;2020-08-10&#34;,&#34;2020-08-17&#34;,&#34;2020-08-24&#34;,&#34;2020-08-31&#34;,&#34;2020-09-07&#34;,&#34;2020-09-14&#34;,&#34;2020-09-21&#34;,&#34;2020-09-28&#34;,&#34;2020-10-05&#34;,&#34;2020-10-12&#34;,&#34;2020-10-19&#34;,&#34;2020-10-26&#34;,&#34;2020-11-02&#34;,&#34;2020-11-09&#34;,&#34;2020-11-16&#34;,&#34;2020-11-23&#34;,&#34;2020-11-30&#34;,&#34;2020-12-07&#34;,&#34;2020-12-14&#34;,&#34;2020-12-21&#34;,&#34;2020-12-28&#34;,&#34;2021-01-04&#34;,&#34;2020-01-01&#34;,&#34;2020-01-08&#34;,&#34;2020-01-15&#34;,&#34;2020-01-22&#34;,&#34;2020-01-29&#34;,&#34;2020-02-05&#34;,&#34;2020-02-12&#34;,&#34;2020-02-19&#34;,&#34;2020-02-26&#34;,&#34;2020-03-04&#34;,&#34;2020-03-11&#34;,&#34;2020-03-18&#34;,&#34;2020-03-25&#34;,&#34;2020-04-01&#34;,&#34;2020-04-08&#34;,&#34;2020-04-15&#34;,&#34;2020-04-22&#34;,&#34;2020-04-29&#34;,&#34;2020-05-06&#34;,&#34;2020-05-13&#34;,&#34;2020-05-20&#34;,&#34;2020-05-27&#34;,&#34;2020-06-03&#34;,&#34;2020-06-10&#34;,&#34;2020-06-17&#34;,&#34;2020-06-24&#34;,&#34;2020-07-01&#34;,&#34;2020-07-08&#34;,&#34;2020-07-15&#34;,&#34;2020-07-22&#34;,&#34;2020-07-29&#34;,&#34;2020-08-05&#34;,&#34;2020-08-12&#34;,&#34;2020-08-19&#34;,&#34;2020-08-26&#34;,&#34;2020-09-02&#34;,&#34;2020-09-09&#34;,&#34;2020-09-16&#34;,&#34;2020-09-23&#34;,&#34;2020-09-30&#34;,&#34;2020-10-07&#34;,&#34;2020-10-14&#34;,&#34;2020-10-21&#34;,&#34;2020-10-28&#34;,&#34;2020-11-04&#34;,&#34;2020-11-11&#34;,&#34;2020-11-18&#34;,&#34;2020-11-25&#34;,&#34;2020-12-02&#34;,&#34;2020-12-09&#34;,&#34;2020-12-16&#34;,&#34;2020-12-23&#34;,&#34;2020-12-30&#34;,&#34;2021-01-01&#34;,&#34;2021-01-08&#34;,&#34;2020-01-01&#34;,&#34;2020-01-08&#34;,&#34;2020-01-15&#34;,&#34;2020-01-22&#34;,&#34;2020-01-29&#34;,&#34;2020-02-05&#34;,&#34;2020-02-12&#34;,&#34;2020-02-19&#34;,&#34;2020-02-26&#34;,&#34;2020-03-04&#34;,&#34;2020-03-11&#34;,&#34;2020-03-18&#34;,&#34;2020-03-25&#34;,&#34;2020-04-01&#34;,&#34;2020-04-08&#34;,&#34;2020-04-15&#34;,&#34;2020-04-22&#34;,&#34;2020-04-29&#34;,&#34;2020-05-06&#34;,&#34;2020-05-13&#34;,&#34;2020-05-20&#34;,&#34;2020-05-27&#34;,&#34;2020-06-03&#34;,&#34;2020-06-10&#34;,&#34;2020-06-17&#34;,&#34;2020-06-24&#34;,&#34;2020-07-01&#34;,&#34;2020-07-08&#34;,&#34;2020-07-15&#34;,&#34;2020-07-22&#34;,&#34;2020-07-29&#34;,&#34;2020-08-05&#34;,&#34;2020-08-12&#34;,&#34;2020-08-19&#34;,&#34;2020-08-26&#34;,&#34;2020-09-02&#34;,&#34;2020-09-09&#34;,&#34;2020-09-16&#34;,&#34;2020-09-23&#34;,&#34;2020-09-30&#34;,&#34;2020-10-07&#34;,&#34;2020-10-14&#34;,&#34;2020-10-21&#34;,&#34;2020-10-28&#34;,&#34;2020-11-04&#34;,&#34;2020-11-11&#34;,&#34;2020-11-18&#34;,&#34;2020-11-25&#34;,&#34;2019-12-30&#34;,&#34;2020-01-06&#34;,&#34;2020-01-13&#34;,&#34;2020-01-20&#34;,&#34;2020-01-27&#34;,&#34;2020-02-03&#34;,&#34;2020-02-10&#34;,&#34;2020-02-17&#34;,&#34;2020-02-24&#34;,&#34;2020-03-02&#34;,&#34;2020-03-09&#34;,&#34;2020-03-16&#34;,&#34;2020-03-23&#34;,&#34;2020-03-30&#34;,&#34;2020-04-06&#34;,&#34;2020-04-13&#34;,&#34;2020-04-20&#34;,&#34;2020-04-27&#34;,&#34;2020-05-04&#34;,&#34;2020-05-11&#34;,&#34;2020-05-18&#34;,&#34;2020-05-25&#34;,&#34;2020-06-01&#34;,&#34;2020-06-08&#34;,&#34;2020-06-15&#34;,&#34;2020-06-22&#34;,&#34;2020-06-29&#34;,&#34;2020-07-06&#34;,&#34;2020-07-13&#34;,&#34;2020-07-20&#34;,&#34;2020-07-27&#34;,&#34;2020-08-03&#34;,&#34;2020-08-10&#34;,&#34;2020-08-17&#34;,&#34;2020-08-24&#34;,&#34;2020-08-31&#34;,&#34;2020-09-07&#34;,&#34;2020-09-14&#34;,&#34;2020-09-21&#34;,&#34;2020-09-28&#34;,&#34;2020-10-05&#34;,&#34;2020-10-12&#34;,&#34;2020-10-19&#34;,&#34;2020-10-26&#34;,&#34;2020-11-02&#34;,&#34;2020-11-09&#34;,&#34;2020-11-16&#34;,&#34;2020-11-23&#34;,&#34;2020-11-30&#34;,&#34;2020-12-07&#34;,&#34;2020-12-14&#34;,&#34;2020-12-21&#34;,&#34;2020-12-28&#34;,&#34;2020-01-01&#34;,&#34;2020-01-08&#34;,&#34;2020-01-15&#34;,&#34;2020-01-22&#34;,&#34;2020-01-29&#34;,&#34;2020-02-05&#34;,&#34;2020-02-12&#34;,&#34;2020-02-19&#34;,&#34;2020-02-26&#34;,&#34;2020-03-04&#34;,&#34;2020-03-11&#34;,&#34;2020-03-18&#34;,&#34;2020-03-25&#34;,&#34;2020-04-01&#34;,&#34;2020-04-08&#34;,&#34;2020-04-15&#34;,&#34;2020-04-22&#34;,&#34;2020-04-29&#34;,&#34;2020-05-06&#34;,&#34;2020-05-13&#34;,&#34;2020-05-20&#34;,&#34;2020-05-27&#34;,&#34;2020-06-03&#34;,&#34;2020-06-10&#34;,&#34;2020-06-17&#34;,&#34;2020-06-24&#34;,&#34;2020-07-01&#34;,&#34;2020-07-08&#34;,&#34;2020-07-15&#34;,&#34;2020-07-22&#34;,&#34;2020-07-29&#34;,&#34;2020-08-05&#34;,&#34;2020-08-12&#34;,&#34;2020-08-19&#34;,&#34;2020-08-26&#34;,&#34;2020-09-02&#34;,&#34;2020-09-09&#34;,&#34;2020-09-16&#34;,&#34;2020-09-23&#34;,&#34;2020-09-30&#34;,&#34;2020-10-07&#34;,&#34;2020-10-14&#34;,&#34;2020-10-21&#34;,&#34;2019-12-29&#34;,&#34;2020-01-05&#34;,&#34;2020-01-12&#34;,&#34;2020-01-19&#34;,&#34;2020-01-26&#34;,&#34;2020-02-02&#34;,&#34;2020-02-09&#34;,&#34;2020-02-16&#34;,&#34;2020-02-23&#34;,&#34;2020-03-01&#34;,&#34;2020-03-08&#34;,&#34;2020-03-15&#34;,&#34;2020-03-22&#34;,&#34;2020-03-29&#34;,&#34;2020-04-05&#34;,&#34;2020-04-12&#34;,&#34;2020-04-19&#34;,&#34;2020-04-26&#34;,&#34;2020-05-03&#34;,&#34;2020-05-10&#34;,&#34;2020-05-17&#34;,&#34;2020-05-24&#34;,&#34;2020-05-31&#34;,&#34;2020-06-07&#34;,&#34;2020-06-14&#34;,&#34;2020-06-21&#34;,&#34;2020-06-28&#34;,&#34;2020-07-05&#34;,&#34;2020-07-12&#34;,&#34;2020-07-19&#34;,&#34;2020-07-26&#34;,&#34;2020-08-02&#34;,&#34;2020-08-09&#34;,&#34;2020-08-16&#34;,&#34;2020-08-23&#34;,&#34;2020-08-30&#34;,&#34;2020-09-06&#34;,&#34;2020-09-13&#34;,&#34;2020-09-20&#34;,&#34;2020-09-27&#34;,&#34;2020-10-04&#34;,&#34;2020-10-11&#34;,&#34;2020-10-18&#34;,&#34;2020-10-25&#34;,&#34;2020-11-01&#34;,&#34;2020-11-08&#34;,&#34;2020-11-15&#34;,&#34;2020-11-22&#34;,&#34;2020-11-29&#34;,&#34;2020-12-06&#34;,&#34;2020-12-13&#34;,&#34;2020-12-20&#34;,&#34;2020-12-27&#34;,&#34;2020-01-01&#34;,&#34;2020-01-08&#34;,&#34;2020-01-15&#34;,&#34;2020-01-22&#34;,&#34;2020-01-29&#34;,&#34;2020-02-05&#34;,&#34;2020-02-12&#34;,&#34;2020-02-19&#34;,&#34;2020-02-26&#34;,&#34;2020-03-04&#34;,&#34;2020-03-11&#34;,&#34;2020-03-18&#34;,&#34;2020-03-25&#34;,&#34;2020-04-01&#34;,&#34;2020-04-08&#34;,&#34;2020-04-15&#34;,&#34;2020-04-22&#34;,&#34;2020-04-29&#34;,&#34;2020-05-06&#34;,&#34;2020-05-13&#34;,&#34;2020-05-20&#34;,&#34;2020-05-27&#34;,&#34;2020-06-03&#34;,&#34;2020-06-10&#34;,&#34;2020-06-17&#34;,&#34;2020-06-24&#34;,&#34;2020-07-01&#34;,&#34;2020-07-08&#34;,&#34;2020-07-15&#34;,&#34;2020-07-22&#34;,&#34;2020-07-29&#34;,&#34;2020-08-05&#34;,&#34;2020-08-12&#34;,&#34;2020-08-19&#34;,&#34;2020-08-26&#34;,&#34;2020-09-02&#34;,&#34;2020-09-09&#34;,&#34;2020-09-16&#34;,&#34;2020-09-23&#34;,&#34;2020-09-30&#34;,&#34;2020-10-07&#34;,&#34;2020-10-14&#34;,&#34;2020-10-21&#34;,&#34;2020-10-28&#34;,&#34;2020-11-04&#34;,&#34;2020-11-11&#34;,&#34;2020-01-01&#34;,&#34;2020-02-01&#34;,&#34;2020-03-01&#34;,&#34;2020-04-01&#34;,&#34;2020-05-01&#34;],&#34;end_date&#34;:[&#34;2020-01-05&#34;,&#34;2020-01-12&#34;,&#34;2020-01-19&#34;,&#34;2020-01-26&#34;,&#34;2020-02-02&#34;,&#34;2020-02-09&#34;,&#34;2020-02-16&#34;,&#34;2020-02-23&#34;,&#34;2020-03-01&#34;,&#34;2020-03-08&#34;,&#34;2020-03-15&#34;,&#34;2020-03-22&#34;,&#34;2020-03-29&#34;,&#34;2020-04-05&#34;,&#34;2020-04-12&#34;,&#34;2020-04-19&#34;,&#34;2020-04-26&#34;,&#34;2020-05-03&#34;,&#34;2020-05-10&#34;,&#34;2020-05-17&#34;,&#34;2020-05-24&#34;,&#34;2020-05-31&#34;,&#34;2020-06-07&#34;,&#34;2020-06-14&#34;,&#34;2020-06-21&#34;,&#34;2020-06-28&#34;,&#34;2020-07-05&#34;,&#34;2020-07-12&#34;,&#34;2020-07-19&#34;,&#34;2020-07-26&#34;,&#34;2020-08-02&#34;,&#34;2020-08-09&#34;,&#34;2020-08-16&#34;,&#34;2020-08-23&#34;,&#34;2020-08-30&#34;,&#34;2020-09-06&#34;,&#34;2020-09-13&#34;,&#34;2020-09-20&#34;,&#34;2020-09-27&#34;,&#34;2020-10-04&#34;,&#34;2020-10-11&#34;,&#34;2020-10-18&#34;,&#34;2020-10-25&#34;,&#34;2020-11-01&#34;,&#34;2020-11-08&#34;,&#34;2020-11-15&#34;,&#34;2020-11-22&#34;,&#34;2020-11-29&#34;,&#34;2020-12-06&#34;,&#34;2020-12-13&#34;,&#34;2020-12-20&#34;,&#34;2020-12-27&#34;,&#34;2020-01-03&#34;,&#34;2020-01-10&#34;,&#34;2020-01-17&#34;,&#34;2020-01-24&#34;,&#34;2020-01-31&#34;,&#34;2020-02-07&#34;,&#34;2020-02-14&#34;,&#34;2020-02-21&#34;,&#34;2020-02-28&#34;,&#34;2020-03-06&#34;,&#34;2020-03-13&#34;,&#34;2020-03-20&#34;,&#34;2020-03-27&#34;,&#34;2020-04-03&#34;,&#34;2020-04-10&#34;,&#34;2020-04-17&#34;,&#34;2020-04-24&#34;,&#34;2020-05-01&#34;,&#34;2020-05-08&#34;,&#34;2020-05-15&#34;,&#34;2020-05-22&#34;,&#34;2020-05-29&#34;,&#34;2020-06-05&#34;,&#34;2020-06-12&#34;,&#34;2020-06-19&#34;,&#34;2020-06-26&#34;,&#34;2020-07-03&#34;,&#34;2020-07-10&#34;,&#34;2020-07-17&#34;,&#34;2020-07-24&#34;,&#34;2020-07-31&#34;,&#34;2020-08-07&#34;,&#34;2020-08-14&#34;,&#34;2020-08-21&#34;,&#34;2020-08-28&#34;,&#34;2020-09-04&#34;,&#34;2020-09-11&#34;,&#34;2020-09-18&#34;,&#34;2020-09-25&#34;,&#34;2020-10-02&#34;,&#34;2020-10-09&#34;,&#34;2020-10-16&#34;,&#34;2020-10-23&#34;,&#34;2020-10-30&#34;,&#34;2020-11-06&#34;,&#34;2020-11-13&#34;,&#34;2020-11-20&#34;,&#34;2020-11-27&#34;,&#34;2020-12-04&#34;,&#34;2020-12-11&#34;,&#34;2020-12-18&#34;,&#34;2020-12-25&#34;,&#34;2021-01-01&#34;,&#34;2021-01-08&#34;,&#34;2020-01-05&#34;,&#34;2020-01-12&#34;,&#34;2020-01-19&#34;,&#34;2020-01-26&#34;,&#34;2020-02-02&#34;,&#34;2020-02-09&#34;,&#34;2020-02-16&#34;,&#34;2020-02-23&#34;,&#34;2020-03-01&#34;,&#34;2020-03-08&#34;,&#34;2020-03-15&#34;,&#34;2020-03-22&#34;,&#34;2020-03-29&#34;,&#34;2020-04-05&#34;,&#34;2020-04-12&#34;,&#34;2020-04-19&#34;,&#34;2020-04-26&#34;,&#34;2020-05-03&#34;,&#34;2020-05-10&#34;,&#34;2020-05-17&#34;,&#34;2020-05-24&#34;,&#34;2020-05-31&#34;,&#34;2020-06-07&#34;,&#34;2020-06-14&#34;,&#34;2020-06-21&#34;,&#34;2020-06-28&#34;,&#34;2020-07-05&#34;,&#34;2020-07-12&#34;,&#34;2020-07-19&#34;,&#34;2020-07-26&#34;,&#34;2020-08-02&#34;,&#34;2020-08-09&#34;,&#34;2020-08-16&#34;,&#34;2020-08-23&#34;,&#34;2020-08-30&#34;,&#34;2020-09-06&#34;,&#34;2020-09-13&#34;,&#34;2020-09-20&#34;,&#34;2020-09-27&#34;,&#34;2020-10-04&#34;,&#34;2020-10-11&#34;,&#34;2020-10-18&#34;,&#34;2020-10-25&#34;,&#34;2020-11-01&#34;,&#34;2020-11-08&#34;,&#34;2020-11-15&#34;,&#34;2020-11-22&#34;,&#34;2020-11-29&#34;,&#34;2020-12-06&#34;,&#34;2020-12-13&#34;,&#34;2020-12-20&#34;,&#34;2020-12-27&#34;,&#34;2020-01-05&#34;,&#34;2020-01-12&#34;,&#34;2020-01-19&#34;,&#34;2020-01-26&#34;,&#34;2020-02-02&#34;,&#34;2020-02-09&#34;,&#34;2020-02-16&#34;,&#34;2020-02-23&#34;,&#34;2020-03-01&#34;,&#34;2020-03-08&#34;,&#34;2020-03-15&#34;,&#34;2020-03-22&#34;,&#34;2020-03-29&#34;,&#34;2020-04-05&#34;,&#34;2020-04-12&#34;,&#34;2020-04-19&#34;,&#34;2020-04-26&#34;,&#34;2020-05-03&#34;,&#34;2020-05-10&#34;,&#34;2020-05-17&#34;,&#34;2020-05-24&#34;,&#34;2020-05-31&#34;,&#34;2020-06-07&#34;,&#34;2020-06-14&#34;,&#34;2020-06-21&#34;,&#34;2020-06-28&#34;,&#34;2020-07-05&#34;,&#34;2020-07-12&#34;,&#34;2020-07-19&#34;,&#34;2020-07-26&#34;,&#34;2020-08-02&#34;,&#34;2020-08-09&#34;,&#34;2020-08-16&#34;,&#34;2020-08-23&#34;,&#34;2020-08-30&#34;,&#34;2020-09-06&#34;,&#34;2020-09-13&#34;,&#34;2020-09-20&#34;,&#34;2020-09-27&#34;,&#34;2020-10-04&#34;,&#34;2020-10-11&#34;,&#34;2020-10-18&#34;,&#34;2020-10-25&#34;,&#34;2020-11-01&#34;,&#34;2020-11-08&#34;,&#34;2020-11-15&#34;,&#34;2020-11-22&#34;,&#34;2020-11-29&#34;,&#34;2020-12-06&#34;,&#34;2020-12-13&#34;,&#34;2020-12-20&#34;,&#34;2020-12-27&#34;,&#34;2021-01-03&#34;,&#34;2021-01-10&#34;,&#34;2020-01-07&#34;,&#34;2020-01-14&#34;,&#34;2020-01-21&#34;,&#34;2020-01-28&#34;,&#34;2020-02-04&#34;,&#34;2020-02-11&#34;,&#34;2020-02-18&#34;,&#34;2020-02-25&#34;,&#34;2020-03-03&#34;,&#34;2020-03-10&#34;,&#34;2020-03-17&#34;,&#34;2020-03-24&#34;,&#34;2020-03-31&#34;,&#34;2020-04-07&#34;,&#34;2020-04-14&#34;,&#34;2020-04-21&#34;,&#34;2020-04-28&#34;,&#34;2020-05-05&#34;,&#34;2020-05-12&#34;,&#34;2020-05-19&#34;,&#34;2020-05-26&#34;,&#34;2020-06-02&#34;,&#34;2020-06-09&#34;,&#34;2020-06-16&#34;,&#34;2020-06-23&#34;,&#34;2020-06-30&#34;,&#34;2020-07-07&#34;,&#34;2020-07-14&#34;,&#34;2020-07-21&#34;,&#34;2020-07-28&#34;,&#34;2020-08-04&#34;,&#34;2020-08-11&#34;,&#34;2020-08-18&#34;,&#34;2020-08-25&#34;,&#34;2020-09-01&#34;,&#34;2020-09-08&#34;,&#34;2020-09-15&#34;,&#34;2020-09-22&#34;,&#34;2020-09-29&#34;,&#34;2020-10-06&#34;,&#34;2020-10-13&#34;,&#34;2020-10-20&#34;,&#34;2020-10-27&#34;,&#34;2020-11-03&#34;,&#34;2020-11-10&#34;,&#34;2020-11-17&#34;,&#34;2020-11-24&#34;,&#34;2020-12-01&#34;,&#34;2020-12-08&#34;,&#34;2020-12-15&#34;,&#34;2020-12-22&#34;,&#34;2020-12-29&#34;,&#34;2020-12-31&#34;,&#34;2021-01-07&#34;,&#34;2021-01-14&#34;,&#34;2020-01-07&#34;,&#34;2020-01-14&#34;,&#34;2020-01-21&#34;,&#34;2020-01-28&#34;,&#34;2020-02-04&#34;,&#34;2020-02-11&#34;,&#34;2020-02-18&#34;,&#34;2020-02-25&#34;,&#34;2020-03-03&#34;,&#34;2020-03-10&#34;,&#34;2020-03-17&#34;,&#34;2020-03-24&#34;,&#34;2020-03-31&#34;,&#34;2020-04-07&#34;,&#34;2020-04-14&#34;,&#34;2020-04-21&#34;,&#34;2020-04-28&#34;,&#34;2020-05-05&#34;,&#34;2020-05-12&#34;,&#34;2020-05-19&#34;,&#34;2020-05-26&#34;,&#34;2020-06-02&#34;,&#34;2020-06-09&#34;,&#34;2020-06-16&#34;,&#34;2020-06-23&#34;,&#34;2020-06-30&#34;,&#34;2020-07-07&#34;,&#34;2020-07-14&#34;,&#34;2020-07-21&#34;,&#34;2020-07-28&#34;,&#34;2020-08-04&#34;,&#34;2020-08-11&#34;,&#34;2020-08-18&#34;,&#34;2020-08-25&#34;,&#34;2020-09-01&#34;,&#34;2020-09-08&#34;,&#34;2020-09-15&#34;,&#34;2020-09-22&#34;,&#34;2020-09-29&#34;,&#34;2020-10-06&#34;,&#34;2020-10-13&#34;,&#34;2020-10-20&#34;,&#34;2020-10-27&#34;,&#34;2020-11-03&#34;,&#34;2020-11-10&#34;,&#34;2020-11-17&#34;,&#34;2020-11-24&#34;,&#34;2020-12-01&#34;,&#34;2020-01-05&#34;,&#34;2020-01-12&#34;,&#34;2020-01-19&#34;,&#34;2020-01-26&#34;,&#34;2020-02-02&#34;,&#34;2020-02-09&#34;,&#34;2020-02-16&#34;,&#34;2020-02-23&#34;,&#34;2020-03-01&#34;,&#34;2020-03-08&#34;,&#34;2020-03-15&#34;,&#34;2020-03-22&#34;,&#34;2020-03-29&#34;,&#34;2020-04-05&#34;,&#34;2020-04-12&#34;,&#34;2020-04-19&#34;,&#34;2020-04-26&#34;,&#34;2020-05-03&#34;,&#34;2020-05-10&#34;,&#34;2020-05-17&#34;,&#34;2020-05-24&#34;,&#34;2020-05-31&#34;,&#34;2020-06-07&#34;,&#34;2020-06-14&#34;,&#34;2020-06-21&#34;,&#34;2020-06-28&#34;,&#34;2020-07-05&#34;,&#34;2020-07-12&#34;,&#34;2020-07-19&#34;,&#34;2020-07-26&#34;,&#34;2020-08-02&#34;,&#34;2020-08-09&#34;,&#34;2020-08-16&#34;,&#34;2020-08-23&#34;,&#34;2020-08-30&#34;,&#34;2020-09-06&#34;,&#34;2020-09-13&#34;,&#34;2020-09-20&#34;,&#34;2020-09-27&#34;,&#34;2020-10-04&#34;,&#34;2020-10-11&#34;,&#34;2020-10-18&#34;,&#34;2020-10-25&#34;,&#34;2020-11-01&#34;,&#34;2020-11-08&#34;,&#34;2020-11-15&#34;,&#34;2020-11-22&#34;,&#34;2020-11-29&#34;,&#34;2020-12-06&#34;,&#34;2020-12-13&#34;,&#34;2020-12-20&#34;,&#34;2020-12-27&#34;,&#34;2021-01-03&#34;,&#34;2020-01-07&#34;,&#34;2020-01-14&#34;,&#34;2020-01-21&#34;,&#34;2020-01-28&#34;,&#34;2020-02-04&#34;,&#34;2020-02-11&#34;,&#34;2020-02-18&#34;,&#34;2020-02-25&#34;,&#34;2020-03-03&#34;,&#34;2020-03-10&#34;,&#34;2020-03-17&#34;,&#34;2020-03-24&#34;,&#34;2020-03-31&#34;,&#34;2020-04-07&#34;,&#34;2020-04-14&#34;,&#34;2020-04-21&#34;,&#34;2020-04-28&#34;,&#34;2020-05-05&#34;,&#34;2020-05-12&#34;,&#34;2020-05-19&#34;,&#34;2020-05-26&#34;,&#34;2020-06-02&#34;,&#34;2020-06-09&#34;,&#34;2020-06-16&#34;,&#34;2020-06-23&#34;,&#34;2020-06-30&#34;,&#34;2020-07-07&#34;,&#34;2020-07-14&#34;,&#34;2020-07-21&#34;,&#34;2020-07-28&#34;,&#34;2020-08-04&#34;,&#34;2020-08-11&#34;,&#34;2020-08-18&#34;,&#34;2020-08-25&#34;,&#34;2020-09-01&#34;,&#34;2020-09-08&#34;,&#34;2020-09-15&#34;,&#34;2020-09-22&#34;,&#34;2020-09-29&#34;,&#34;2020-10-06&#34;,&#34;2020-10-13&#34;,&#34;2020-10-20&#34;,&#34;2020-10-27&#34;,&#34;2020-01-04&#34;,&#34;2020-01-11&#34;,&#34;2020-01-18&#34;,&#34;2020-01-25&#34;,&#34;2020-02-01&#34;,&#34;2020-02-08&#34;,&#34;2020-02-15&#34;,&#34;2020-02-22&#34;,&#34;2020-02-29&#34;,&#34;2020-03-07&#34;,&#34;2020-03-14&#34;,&#34;2020-03-21&#34;,&#34;2020-03-28&#34;,&#34;2020-04-04&#34;,&#34;2020-04-11&#34;,&#34;2020-04-18&#34;,&#34;2020-04-25&#34;,&#34;2020-05-02&#34;,&#34;2020-05-09&#34;,&#34;2020-05-16&#34;,&#34;2020-05-23&#34;,&#34;2020-05-30&#34;,&#34;2020-06-06&#34;,&#34;2020-06-13&#34;,&#34;2020-06-20&#34;,&#34;2020-06-27&#34;,&#34;2020-07-04&#34;,&#34;2020-07-11&#34;,&#34;2020-07-18&#34;,&#34;2020-07-25&#34;,&#34;2020-08-01&#34;,&#34;2020-08-08&#34;,&#34;2020-08-15&#34;,&#34;2020-08-22&#34;,&#34;2020-08-29&#34;,&#34;2020-09-05&#34;,&#34;2020-09-12&#34;,&#34;2020-09-19&#34;,&#34;2020-09-26&#34;,&#34;2020-10-03&#34;,&#34;2020-10-10&#34;,&#34;2020-10-17&#34;,&#34;2020-10-24&#34;,&#34;2020-10-31&#34;,&#34;2020-11-07&#34;,&#34;2020-11-14&#34;,&#34;2020-11-21&#34;,&#34;2020-11-28&#34;,&#34;2020-12-05&#34;,&#34;2020-12-12&#34;,&#34;2020-12-19&#34;,&#34;2020-12-26&#34;,&#34;2021-01-02&#34;,&#34;2020-01-08&#34;,&#34;2020-01-15&#34;,&#34;2020-01-22&#34;,&#34;2020-01-29&#34;,&#34;2020-02-05&#34;,&#34;2020-02-12&#34;,&#34;2020-02-19&#34;,&#34;2020-02-26&#34;,&#34;2020-03-04&#34;,&#34;2020-03-11&#34;,&#34;2020-03-18&#34;,&#34;2020-03-25&#34;,&#34;2020-04-01&#34;,&#34;2020-04-08&#34;,&#34;2020-04-15&#34;,&#34;2020-04-22&#34;,&#34;2020-04-29&#34;,&#34;2020-05-06&#34;,&#34;2020-05-13&#34;,&#34;2020-05-20&#34;,&#34;2020-05-27&#34;,&#34;2020-06-03&#34;,&#34;2020-06-10&#34;,&#34;2020-06-17&#34;,&#34;2020-06-24&#34;,&#34;2020-07-01&#34;,&#34;2020-07-08&#34;,&#34;2020-07-15&#34;,&#34;2020-07-22&#34;,&#34;2020-07-29&#34;,&#34;2020-08-05&#34;,&#34;2020-08-12&#34;,&#34;2020-08-19&#34;,&#34;2020-08-26&#34;,&#34;2020-09-02&#34;,&#34;2020-09-09&#34;,&#34;2020-09-16&#34;,&#34;2020-09-23&#34;,&#34;2020-09-30&#34;,&#34;2020-10-07&#34;,&#34;2020-10-14&#34;,&#34;2020-10-21&#34;,&#34;2020-10-28&#34;,&#34;2020-11-04&#34;,&#34;2020-11-11&#34;,&#34;2020-11-18&#34;,&#34;2020-01-31&#34;,&#34;2020-02-29&#34;,&#34;2020-03-31&#34;,&#34;2020-04-30&#34;,&#34;2020-05-31&#34;],&#34;covid_deaths&#34;:[0,0,0,0,0,0,0,0,0,0,4,71,356,1016,2153,2083,1411,750,812,396,228,187,128,60,41,36,39,11,18,21,24,27,67,53,-98,13,18,23,32,84,127,222,397,927,1318,1366,1197,929,773,631,675,574,0,0,0,0,0,0,0,0,0,0,5,115,610,3812,6898,9509,9026,6686,4429,4220,2872,2002,1697,1204,849,653,561,388,303,232,201,162,146,150,112,83,111,158,234,343,474,762,1126,1598,2226,2841,3043,3373,3165,3069,3276,3200,3425,6593,0,0,0,0,0,0,0,0,0,0,7,53,224,117,498,641,654,485,546,454,319,397,264,215,179,227,140,106,93,78,46,20,20,27,11,14,11,19,15,15,-1,24,15,5,84,142,242,275,386,447,479,286,0,0,0,0,0,0,0,0,0,3,17,160,592,999,976,950,794,581,387,240,142,134,57,46,31,15,22,10,-1,23,-9,9,16,31,27,25,15,32,99,85,134,169,297,390,574,487,408,459,342,366,444,512,617,754,0,0,0,0,0,0,1,0,1,68,787,3475,6097,5568,4489,3212,2098,1418,951,519,441,293,202,144,98,64,30,20,30,49,83,157,202,309,391,518,698,798,897,872,937,1034,1386,1705,2051,2062,1801,1536,1196,1106,960,950,289,1016,1163,0,0,0,0,0,0,1,0,3,29,116,953,2424,6804,5382,5057,2865,1903,1457,1031,573,345,358,252,169,124,90,101,132,58,73,58,98,97,120,100,240,417,468,488,569,957,1655,3198,3516,4069,3972,3274,0,0,0,0,0,0,0,0,0,0,1,15,70,118,146,102,90,56,20,11,11,28,4,5,13,12,4,2,3,1,6,3,7,4,1,3,20,10,21,26,38,42,86,151,281,418,559,717,735,633,878,530,443,0,0,0,0,0,0,0,10,69,552,1857,4238,5462,4521,3834,3478,2654,1921,1580,1247,780,573,511,361,269,153,132,85,89,50,48,44,190,40,46,72,70,105,136,155,210,450,981,0,0,0,0,0,0,0,0,0,0,4,175,1205,3807,5315,4237,2849,1865,1164,711,494,349,276,216,133,129,88,65,74,59,45,32,30,28,33,29,25,30,29,39,28,49,32,45,80,61,77,94,153,187,245,293,327,0,0,0,0,0,0,0,0,0,0,0.5,21.5,85,255.5,339,428,366.5,264,187,152.5,99,94,72,56.5,79.5,65,64.5,71,62,59.5,60,54,71.5,73.5,127,182.5,202,226.5,245.5,211.5,202,244,252.5,265.5,289,322.5,0,0,84,297,139],&#34;excess_deaths&#34;:[-113.76240636715,-9.76240636708098,-67.429073033747,-158.762406367081,-97.5957397004149,-241.262406367081,-154.762406367082,-128.262406367081,-267.914887640492,-203.914887640492,-76.7148876404931,267.685112359507,989.085112359507,1924.28511235951,2212.68511235951,1670.48511235951,1023.68511235951,423.685112359509,371.685112359508,79.6851123595088,121.685112359507,67.4851123595067,-65.1148876404932,53.2851123595069,-88.7148876404949,82.8851123595075,-239.314887640492,-162.914887640494,-38.9148876404904,-173.914887640492,77.4851123595067,179.485112359508,1037.68511235951,318.08511235951,-21.1148876404932,53.8851123595082,-34.5148876404933,127.085112359508,13.2851123595085,-38.1148876404925,48.8851123595077,159.885112359508,643.085112359508,1300.48511235951,1679.28511235951,1383.88511235951,1075.08511235951,787.685112359508,522.285112359507,554.885112359508,458.285112359508,320.485112359508,49.5691169724359,312.235783639129,-234.430883027691,-853.597549694136,-592.930883027662,-784.9308830275,-634.430883027135,-693.597549693932,-269.430883027613,-649.517059632846,-119.517059633001,119.682940367109,987.282940366724,6883.28294036692,9065.28294036689,12846.2829403668,12486.6829403668,8767.88294036698,3546.88294036679,4885.0829403666,2570.68294036695,1846.28294036712,818.882940367215,610.082940366901,18.6829403668326,-296.717059632927,-43.9170596334425,-548.517059633365,-236.917059633459,-140.117059633389,-14.1170596330612,-90.51705963327,256.682940366883,585.082940366541,912.682940366796,-1377.51705963325,593.482940366637,278.882940366713,207.682940366671,603.282940366727,216.082940366774,738.882940366688,1247.88294036671,1311.88294036668,1726.28294036672,2234.88294036682,2485.68294036676,2367.68294036682,1849.2829403667,1641.08294036675,1533.28294036676,3778.68294036678,2423.64771151861,6328.06343042785,-86.3876404496259,-12.3876404494627,-58.8876404494622,-119.05430711613,7.61235955053644,-94.5543071161292,-44.7209737827964,-138.05430711613,-150.265168539345,-40.2651685393455,-121.065168539346,115.734831460657,268.134831460654,627.934831460655,870.734831460655,812.534831460655,621.334831460654,638.734831460656,593.534831460656,464.734831460657,404.334831460655,142.734831460654,262.734831460655,244.734831460654,181.334831460653,162.134831460655,33.3348314606549,53.1348314606537,-10.8651685393436,27.1348314606548,12.334831460654,90.1348314606553,38.1348314606544,87.9348314606561,-53.8651685393456,-5.86516853934518,24.1348314606539,-9.06516853934454,18.334831460656,-44.4651685393453,-61.0651685393448,33.5348314606551,-53.6651685393454,42.3348314606549,57.7348314606543,225.934831460655,365.534831460655,262.934831460655,396.734831460655,397.134831460655,496.134831460655,310.934831460655,-195.753511235732,-36.7535112359151,-157.086844569248,-288.586844569249,-169.086844569249,-126.753511235915,-158.920177902582,-404.586844569249,-267.304213483111,-289.104213483111,-28.3042134831121,491.495786516891,1360.49578651689,2116.49578651689,2077.89578651689,1418.89578651689,1055.29578651689,592.295786516891,147.09578651689,-3.5042134831092,-5.10421348311093,-38.3042134831121,-18.7042134831117,5.6957865168888,22.0957865168862,-56.1042134831118,-156.104213483111,-71.5042134831133,-185.504213483109,-70.504213483111,12.2957865168878,-44.10421348311,580.695786516887,197.295786516891,73.4957865168881,66.495786516889,39.4957865168876,37.2957865168901,141.09578651689,222.095786516889,149.495786516889,405.895786516889,591.495786516889,830.095786516889,688.695786516888,666.895786516889,366.295786516889,441.295786516889,497.095786516888,468.495786516889,768.695786516889,754.895786516889,1002.82865168543,636.745084269875,-616.5,-40,200,363.75,397.25,-436.5,-616,-604,-435.75,-185,1479.25,6098.75,11501.25,10674.75,7092.5,4136.5,1966.25,1113.75,392.75,-147.25,236.75,133.75,-483.25,-368.5,-200.5,8.75,92.25,140,220.5,463,1218.25,995.5,639.75,767.5,611,766.5,1172.5,1090.25,857.5,893,1176.5,1443.5,1829.5,2067.25,2407,1943,1496.75,1212,1243.25,1158.75,496,339,191.25,173,1249.5,-505.472916666806,-560.472916666762,-690.639583333379,-693.306250000114,-594.63958333345,-853.639583333423,-787.472916666748,-1080.97291666678,-797.967500000064,-422.967500000106,862.632499999883,2317.83249999986,5594.63249999989,7286.63249999988,5557.63249999983,3385.83249999987,1467.2324999999,228.2324999999,35.032499999852,371.032499999888,269.832499999902,-62.5675000000265,27.2324999999128,223.032499999876,134.232499999878,110.03249999989,-642.167500000118,-13.5675000001102,-343.967499999992,33.0324999998866,337.032499999847,1070.43249999989,1089.83249999986,135.832499999882,-63.3675000001385,582.232499999907,978.432499999839,810.232499999876,307.032499999872,906.432499999872,603.432499999883,1328.63249999989,2639.43249999989,3782.8324999999,4376.83249999989,3877.23249999988,3339.4324999999,2755.43249999986,-173.571629213423,-137.738295880124,0.261704119877095,18.0950374532099,98.4283707865429,-138.40496254679,-85.0716292134573,-95.238295880124,-57.8859550561506,-19.8859550561513,-3.68595505615144,227.71404494385,108.914044943849,232.314044943849,236.51404494385,170.314044943849,107.514044943849,5.11404494385033,70.3140449438501,15.7140449438502,49.114044943849,-6.68595505615144,67.3140449438488,7.31404494384878,-4.8859550561524,26.9140449438487,115.51404494385,-4.6859550561519,-37.0859550561497,-47.0859550561506,11.9140449438487,-3.48595505615026,136.114044943849,32.9140449438505,60.9140449438485,135.51404494385,132.914044943848,135.71404494385,50.1140449438499,63.3140449438492,94.7140449438493,102.514044943849,257.714044943849,371.714044943849,485.314044943849,722.314044943849,860.714044943849,874.51404494385,926.714044943849,839.914044943849,586.114044943849,368.51404494385,250.404494382054,-1378.99319727916,-1401.99319727921,-1190.65986394581,-625.159863945832,-945.493197279171,-709.15986394581,-534.826530612478,-194.65986394581,-55.1918367349244,2123.00816326494,5946.00816326503,9938.40816326495,10311.6081632651,7745.40816326497,6199.20816326515,4139.20816326502,2526.60816326508,1257.80816326516,854.40816326508,782.008163265056,56.4081632650286,-221.991836734936,-309.79183673497,-411.991836734909,429.208163265021,876.608163265133,535.808163265005,-399.391836734907,-428.191836734917,-241.391836734954,1502.40816326509,-246.591836734895,1152.00816326503,756.408163265027,551.008163265025,680.608163265038,1057.40816326508,813.80816326507,246.008163265067,849.408163265032,488.008163265029,1314.60816326509,2826.20816326507,-59.4260808928029,-37.0927475588328,-28.5927475599021,-3.42608089255737,23.5739191068901,-15.0927475596063,-6.92608089265605,-17.5927475595215,1.57391910704473,20.8887029285156,36.8887029284717,351.088702928393,1755.48870292846,5244.88870292856,6790.48870292861,4875.88870292876,3046.88870292847,1851.48870292833,1074.08870292856,602.888702928624,289.888702928943,201.888702928574,142.688702928356,130.488702928604,-2.31129707171294,102.488702928747,-5.71129707127398,53.0887029287928,-6.71129707145656,55.2887029286996,5.688702928628,6.28870292865531,-15.9112970714262,7.28870292878207,49.6887029287209,8.08870292853726,2.28870292879151,48.2887029286215,15.4887029287393,-66.111297071363,-4.31129707139962,2.08870292869096,10.0887029286484,34.2887029286726,127.488702928733,47.4887029287595,82.0887029284947,12.4887029286622,118.488702928673,174.088702928732,276.288702928689,294.488702928703,270.488702928459,-63.2950000000019,-30.2949999999562,-0.294999999956417,7.20500000004313,-28.0449999999564,-6.29499999995687,-1.04499999995619,-75.7949999999562,-70.0599999999367,-61.0599999999367,71.2733333333981,271.606666666729,432.940000000064,792.273333333396,778.940000000062,603.273333333396,465.273333333397,346.940000000063,290.273333333397,86.2733333333967,20.9400000000642,44.2733333333979,85.2733333333963,115.940000000063,43.9400000000639,-64.3933333332711,73.2733333333972,-22.0599999999358,-5.72666666660348,5.60666666673069,39.6066666667302,166.273333333397,74.60666666673,85.2733333333967,142.273333333397,128.606666666731,84.6066666667296,201.940000000063,130.940000000063,107.273333333397,153.940000000064,160.60666666673,481.60666666673,579.273333333397,947.273333333397,1235.60666666673,351.66021711342,-121.189981225617,1317.49032567027,1526.36160548736,1448.99032567027],&#34;csum&#34;:[0,0,0,0,0,0,0,0,0,0,4,75,431,1447,3600,5683,7094,7844,8656,9052,9280,9467,9595,9655,9696,9732,9771,9782,9800,9821,9845,9872,9939,9992,9894,9907,9925,9948,9980,10064,10191,10413,10810,11737,13055,14421,15618,16547,17320,17951,18626,19200,0,0,0,0,0,0,0,0,0,0,5,120,730,4542,11440,20949,29975,36661,41090,45310,48182,50184,51881,53085,53934,54587,55148,55536,55839,56071,56272,56434,56580,56730,56842,56925,57036,57194,57428,57771,58245,59007,60133,61731,63957,66798,69841,73214,76379,79448,82724,85924,89349,95942,0,0,0,0,0,0,0,0,0,0,7,60,284,401,899,1540,2194,2679,3225,3679,3998,4395,4659,4874,5053,5280,5420,5526,5619,5697,5743,5763,5783,5810,5821,5835,5846,5865,5880,5895,5894,5918,5933,5938,6022,6164,6406,6681,7067,7514,7993,8279,0,0,0,0,0,0,0,0,0,3,20,180,772,1771,2747,3697,4491,5072,5459,5699,5841,5975,6032,6078,6109,6124,6146,6156,6155,6178,6169,6178,6194,6225,6252,6277,6292,6324,6423,6508,6642,6811,7108,7498,8072,8559,8967,9426,9768,10134,10578,11090,11707,12461,0,0,0,0,0,0,1,1,2,70,857,4332,10429,15997,20486,23698,25796,27214,28165,28684,29125,29418,29620,29764,29862,29926,29956,29976,30006,30055,30138,30295,30497,30806,31197,31715,32413,33211,34108,34980,35917,36951,38337,40042,42093,44155,45956,47492,48688,49794,50754,51704,51993,53009,54172,0,0,0,0,0,0,1,1,4,33,149,1102,3526,10330,15712,20769,23634,25537,26994,28025,28598,28943,29301,29553,29722,29846,29936,30037,30169,30227,30300,30358,30456,30553,30673,30773,31013,31430,31898,32386,32955,33912,35567,38765,42281,46350,50322,53596,0,0,0,0,0,0,0,0,0,0,1,16,86,204,350,452,542,598,618,629,640,668,672,677,690,702,706,708,711,712,718,721,728,732,733,736,756,766,787,813,851,893,979,1130,1411,1829,2388,3105,3840,4473,5351,5881,6324,0,0,0,0,0,0,0,10,79,631,2488,6726,12188,16709,20543,24021,26675,28596,30176,31423,32203,32776,33287,33648,33917,34070,34202,34287,34376,34426,34474,34518,34708,34748,34794,34866,34936,35041,35177,35332,35542,35992,36973,0,0,0,0,0,0,0,0,0,0,4,179,1384,5191,10506,14743,17592,19457,20621,21332,21826,22175,22451,22667,22800,22929,23017,23082,23156,23215,23260,23292,23322,23350,23383,23412,23437,23467,23496,23535,23563,23612,23644,23689,23769,23830,23907,24001,24154,24341,24586,24879,25206,0,0,0,0,0,0,0,0,0,0,0.5,22,107,362.5,701.5,1129.5,1496,1760,1947,2099.5,2198.5,2292.5,2364.5,2421,2500.5,2565.5,2630,2701,2763,2822.5,2882.5,2936.5,3008,3081.5,3208.5,3391,3593,3819.5,4065,4276.5,4478.5,4722.5,4975,5240.5,5529.5,5852,0,0,84,381,520]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;country&#34;,&#34;name&#34;:&#34;country&#34;,&#34;type&#34;:&#34;character&#34;},{&#34;accessor&#34;:&#34;start_date&#34;,&#34;name&#34;:&#34;start_date&#34;,&#34;type&#34;:&#34;Date&#34;},{&#34;accessor&#34;:&#34;end_date&#34;,&#34;name&#34;:&#34;end_date&#34;,&#34;type&#34;:&#34;Date&#34;},{&#34;accessor&#34;:&#34;covid_deaths&#34;,&#34;name&#34;:&#34;covid_deaths&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;excess_deaths&#34;,&#34;name&#34;:&#34;excess_deaths&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;csum&#34;,&#34;name&#34;:&#34;csum&#34;,&#34;type&#34;:&#34;numeric&#34;}],&#34;defaultPageSize&#34;:10,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:1,&#34;dataKey&#34;:&#34;eeb24540f9ee5cc1286bfadba1968cd4&#34;,&#34;key&#34;:&#34;eeb24540f9ee5cc1286bfadba1968cd4&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;We need to group each country according to its total deaths related to COVID-19, and excess deaths. Then, using those two numbers, we calculate the percentage of excess deaths attributable to COVID-19. This can be used as a metric for underreporting of COVID-19 cases in a country.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_for_table &amp;lt;- data_filtered %&amp;gt;%
  filter(excess_deaths &amp;gt; 0) %&amp;gt;%
  group_by(country) %&amp;gt;%
  summarise(
    excess_deaths = round(sum(excess_deaths)),
    covid_deaths = round(sum(covid_deaths)),
    perc = covid_deaths / excess_deaths
  ) %&amp;gt;%
  select(country, covid_deaths, excess_deaths, perc)

reactable(data_for_table, pagination = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-2&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;country&#34;:[&#34;Austria&#34;,&#34;Belgium&#34;,&#34;Britain&#34;,&#34;France&#34;,&#34;Istanbul&#34;,&#34;Italy&#34;,&#34;Jakarta&#34;,&#34;Netherlands&#34;,&#34;New York City&#34;,&#34;Spain&#34;,&#34;Sweden&#34;],&#34;covid_deaths&#34;:[6273,18934,93354,52775,5654,35181,520,11790,24814,53139,8106],&#34;excess_deaths&#34;:[9058,20030,99136,56825,9255,65960,4645,18927,28245,74150,9393],&#34;perc&#34;:[0.692536983881652,0.945282076884673,0.941676081342802,0.928728552573691,0.610913019989195,0.533368708308065,0.11194833153929,0.622919638611507,0.878527172950965,0.71664194200944,0.862983072500798]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;country&#34;,&#34;name&#34;:&#34;country&#34;,&#34;type&#34;:&#34;character&#34;},{&#34;accessor&#34;:&#34;covid_deaths&#34;,&#34;name&#34;:&#34;covid_deaths&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;excess_deaths&#34;,&#34;name&#34;:&#34;excess_deaths&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;perc&#34;,&#34;name&#34;:&#34;perc&#34;,&#34;type&#34;:&#34;numeric&#34;}],&#34;defaultPageSize&#34;:11,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:1,&#34;dataKey&#34;:&#34;81b66942872ae326803a1f9782fab0fa&#34;,&#34;key&#34;:&#34;81b66942872ae326803a1f9782fab0fa&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;The only thing missing at this point is the date range. In order to find and display the dates, we need to find the &lt;em&gt;first date after a given country/region hit 50 COVID-19 cases&lt;/em&gt; and the &lt;em&gt;last date in the data&lt;/em&gt; for that country/region.&lt;/p&gt;
&lt;p&gt;How do we do this? First, we’ll create a &lt;a href=&#34;https://stackoverflow.com/questions/40039903/r-add-th-rd-and-nd-to-dates&#34;&gt;function&lt;/a&gt; called &lt;code&gt;append_date_suffix&lt;/code&gt; which, according to a given day, appends the appropriate suffix.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;append_date_suffix &amp;lt;- function(dates) {
  suff &amp;lt;- case_when(
    dates %in% c(11, 12, 13) ~ &amp;quot;th&amp;quot;,
    dates %% 10 == 1 ~ &amp;#39;st&amp;#39;,
    dates %% 10 == 2 ~ &amp;#39;nd&amp;#39;,
    dates %% 10 == 3 ~ &amp;#39;rd&amp;#39;,
    TRUE ~ &amp;quot;th&amp;quot;
  )
  paste0(dates, suff)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ll then group by the &lt;code&gt;country&lt;/code&gt; variable and find the min and max date (with the minimum only appearing after a country has seen 50 COVID deaths). Then, we do a lot of formatting of individual days and months, and append them all together with dashes in &lt;em&gt;The Economist’s&lt;/em&gt; style. Sorry, there’s a lot going on here.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dates_data &amp;lt;-
  data_filtered %&amp;gt;%
  # only looking at date ranges starting post-50 deaths
  filter(csum &amp;gt; 50) %&amp;gt;%
  group_by(country) %&amp;gt;%
  summarise(start_date = min(start_date),
            end_date = max(end_date)) %&amp;gt;%
  mutate(
    clean_start_day = format(start_date, &amp;quot;%d&amp;quot;),
    clean_start_day = append_date_suffix(as.numeric(clean_start_day)),
    clean_start_month = format(start_date, &amp;quot;%b&amp;quot;),
    clean_end_day = format(end_date, &amp;quot;%d&amp;quot;),
    clean_end_day = append_date_suffix(as.numeric(clean_end_day)),
    clean_end_month = format(end_date, &amp;quot;%b&amp;quot;)
  ) %&amp;gt;%
  mutate(
    clean_range = paste0(
      clean_start_month,&amp;quot; &amp;quot;, ## Mar
      clean_start_day, &amp;quot;-&amp;quot;, ## 6-
      clean_end_month, &amp;quot; &amp;quot;, ## May
      clean_end_day ## 18
    )
  ) %&amp;gt;%
  select(country, clean_range)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates date ranges that look like this:&lt;/p&gt;
&lt;div id=&#34;htmlwidget-3&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-3&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;country&#34;:[&#34;Austria&#34;,&#34;Belgium&#34;,&#34;Britain&#34;,&#34;France&#34;,&#34;Istanbul&#34;,&#34;Italy&#34;,&#34;Jakarta&#34;,&#34;Netherlands&#34;,&#34;New York City&#34;,&#34;Spain&#34;,&#34;Sweden&#34;],&#34;clean_range&#34;:[&#34;Mar 23rd-Jan 3rd&#34;,&#34;Mar 16th-Dec 27th&#34;,&#34;Mar 14th-Jan 8th&#34;,&#34;Mar 11th-Dec 1st&#34;,&#34;Mar 25th-Nov 18th&#34;,&#34;Feb 26th-Oct 27th&#34;,&#34;Mar 1st-May 31st&#34;,&#34;Mar 16th-Jan 10th&#34;,&#34;Mar 15th-Jan 2nd&#34;,&#34;Mar 4th-Jan 14th&#34;,&#34;Mar 16th-Dec 27th&#34;]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;country&#34;,&#34;name&#34;:&#34;country&#34;,&#34;type&#34;:&#34;character&#34;},{&#34;accessor&#34;:&#34;clean_range&#34;,&#34;name&#34;:&#34;clean_range&#34;,&#34;type&#34;:&#34;character&#34;}],&#34;defaultPageSize&#34;:11,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:1,&#34;dataKey&#34;:&#34;6873b3c55836ebac382f994a57af4ab0&#34;,&#34;key&#34;:&#34;6873b3c55836ebac382f994a57af4ab0&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Join these dates with our existing data…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_for_table &amp;lt;- data_filtered %&amp;gt;%
  filter(excess_deaths &amp;gt; 0) %&amp;gt;%
  group_by(country) %&amp;gt;%
  summarise(
    excess_deaths = round(sum(excess_deaths)),
    covid_deaths = round(sum(covid_deaths)),
    perc = covid_deaths / excess_deaths
  ) %&amp;gt;%
  left_join(dates_data, by = &amp;#39;country&amp;#39;) %&amp;gt;%
  select(country, clean_range, covid_deaths, excess_deaths, perc)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and we get our finalized dataset:&lt;/p&gt;
&lt;div id=&#34;htmlwidget-4&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-4&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;country&#34;:[&#34;Austria&#34;,&#34;Belgium&#34;,&#34;Britain&#34;,&#34;France&#34;,&#34;Istanbul&#34;,&#34;Italy&#34;,&#34;Jakarta&#34;,&#34;Netherlands&#34;,&#34;New York City&#34;,&#34;Spain&#34;,&#34;Sweden&#34;],&#34;clean_range&#34;:[&#34;Mar 23rd-Jan 3rd&#34;,&#34;Mar 16th-Dec 27th&#34;,&#34;Mar 14th-Jan 8th&#34;,&#34;Mar 11th-Dec 1st&#34;,&#34;Mar 25th-Nov 18th&#34;,&#34;Feb 26th-Oct 27th&#34;,&#34;Mar 1st-May 31st&#34;,&#34;Mar 16th-Jan 10th&#34;,&#34;Mar 15th-Jan 2nd&#34;,&#34;Mar 4th-Jan 14th&#34;,&#34;Mar 16th-Dec 27th&#34;],&#34;covid_deaths&#34;:[6273,18934,93354,52775,5654,35181,520,11790,24814,53139,8106],&#34;excess_deaths&#34;:[9058,20030,99136,56825,9255,65960,4645,18927,28245,74150,9393],&#34;perc&#34;:[0.692536983881652,0.945282076884673,0.941676081342802,0.928728552573691,0.610913019989195,0.533368708308065,0.11194833153929,0.622919638611507,0.878527172950965,0.71664194200944,0.862983072500798]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;country&#34;,&#34;name&#34;:&#34;country&#34;,&#34;type&#34;:&#34;character&#34;},{&#34;accessor&#34;:&#34;clean_range&#34;,&#34;name&#34;:&#34;clean_range&#34;,&#34;type&#34;:&#34;character&#34;},{&#34;accessor&#34;:&#34;covid_deaths&#34;,&#34;name&#34;:&#34;covid_deaths&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;excess_deaths&#34;,&#34;name&#34;:&#34;excess_deaths&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;perc&#34;,&#34;name&#34;:&#34;perc&#34;,&#34;type&#34;:&#34;numeric&#34;}],&#34;defaultPageSize&#34;:11,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:1,&#34;dataKey&#34;:&#34;ab0c19bfeb234c2b35e183ee1c9ca924&#34;,&#34;key&#34;:&#34;ab0c19bfeb234c2b35e183ee1c9ca924&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-the-table&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Creating the table&lt;/h2&gt;
&lt;p&gt;Finally, we’re ready to take that dataset and create our table. We can begin by defining some parameters that make the table easier to use and more aesthetically pleasing. Here, we sort according to excess deaths (but don’t include an arrow), make it compact, and show all results on one page.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reactable(
  data_for_table,
  defaultSortOrder = &amp;#39;desc&amp;#39;,
  defaultSorted = &amp;#39;excess_deaths&amp;#39;,
  showSortIcon = FALSE,
  compact = TRUE,
  pagination = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-5&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-5&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;country&#34;:[&#34;Austria&#34;,&#34;Belgium&#34;,&#34;Britain&#34;,&#34;France&#34;,&#34;Istanbul&#34;,&#34;Italy&#34;,&#34;Jakarta&#34;,&#34;Netherlands&#34;,&#34;New York City&#34;,&#34;Spain&#34;,&#34;Sweden&#34;],&#34;clean_range&#34;:[&#34;Mar 23rd-Jan 3rd&#34;,&#34;Mar 16th-Dec 27th&#34;,&#34;Mar 14th-Jan 8th&#34;,&#34;Mar 11th-Dec 1st&#34;,&#34;Mar 25th-Nov 18th&#34;,&#34;Feb 26th-Oct 27th&#34;,&#34;Mar 1st-May 31st&#34;,&#34;Mar 16th-Jan 10th&#34;,&#34;Mar 15th-Jan 2nd&#34;,&#34;Mar 4th-Jan 14th&#34;,&#34;Mar 16th-Dec 27th&#34;],&#34;covid_deaths&#34;:[6273,18934,93354,52775,5654,35181,520,11790,24814,53139,8106],&#34;excess_deaths&#34;:[9058,20030,99136,56825,9255,65960,4645,18927,28245,74150,9393],&#34;perc&#34;:[0.692536983881652,0.945282076884673,0.941676081342802,0.928728552573691,0.610913019989195,0.533368708308065,0.11194833153929,0.622919638611507,0.878527172950965,0.71664194200944,0.862983072500798]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;country&#34;,&#34;name&#34;:&#34;country&#34;,&#34;type&#34;:&#34;character&#34;},{&#34;accessor&#34;:&#34;clean_range&#34;,&#34;name&#34;:&#34;clean_range&#34;,&#34;type&#34;:&#34;character&#34;},{&#34;accessor&#34;:&#34;covid_deaths&#34;,&#34;name&#34;:&#34;covid_deaths&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;excess_deaths&#34;,&#34;name&#34;:&#34;excess_deaths&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;perc&#34;,&#34;name&#34;:&#34;perc&#34;,&#34;type&#34;:&#34;numeric&#34;}],&#34;defaultSortDesc&#34;:true,&#34;defaultSorted&#34;:[{&#34;id&#34;:&#34;excess_deaths&#34;,&#34;desc&#34;:true}],&#34;defaultPageSize&#34;:11,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:1,&#34;compact&#34;:true,&#34;showSortIcon&#34;:false,&#34;dataKey&#34;:&#34;ab0c19bfeb234c2b35e183ee1c9ca924&#34;,&#34;key&#34;:&#34;ab0c19bfeb234c2b35e183ee1c9ca924&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;div id=&#34;style-headers&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Style headers&lt;/h3&gt;
&lt;p&gt;Next, let’s make the column headers stylistically similar to &lt;em&gt;The Economist&lt;/em&gt;. We do so with reactable’s &lt;code&gt;defaultColDef&lt;/code&gt;, where we define a &lt;code&gt;colDef&lt;/code&gt; with styles for the header and regular cells. Here, we can include CSS (which you can find by inspecting the table at hand). Throughout this post, you’ll notice my constant references to &lt;code&gt;font_es&lt;/code&gt;. This is from &lt;a href=&#34;https://github.com/hrbrmstr/hrbrthemes&#34;&gt;Bob Rudis’s &lt;code&gt;hrbrthemes&lt;/code&gt;&lt;/a&gt;. It contains the font name for Economist Sans Condensed, which is the font that &lt;em&gt;The Economist&lt;/em&gt; uses!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reactable(
  data_for_table,
  defaultSortOrder = &amp;#39;desc&amp;#39;,
  defaultSorted = &amp;#39;excess_deaths&amp;#39;,
  showSortIcon = FALSE,
  compact = TRUE,
  pagination = FALSE,
  ######## NEW ########
  defaultColDef = colDef(
    ### define header styling
    headerStyle = list(
      textAlign = &amp;quot;left&amp;quot;,
      fontSize = &amp;quot;11px&amp;quot;,
      lineHeight = &amp;quot;14px&amp;quot;,
      textTransform = &amp;quot;uppercase&amp;quot;,
      color = &amp;quot;#0c0c0c&amp;quot;,
      fontWeight = &amp;quot;500&amp;quot;,
      borderBottom = &amp;quot;2px solid #e9edf0&amp;quot;,
      paddingBottom = &amp;quot;3px&amp;quot;,
      verticalAlign = &amp;quot;bottom&amp;quot;,
      fontFamily = font_es
    ),
    ### define default column styling
    style = list(
      fontFamily = font_es,
      fontSize = &amp;quot;14px&amp;quot;,
      verticalAlign = &amp;quot;center&amp;quot;,
      align = &amp;quot;left&amp;quot;
    )
  )
)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-6&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-6&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;country&#34;:[&#34;Austria&#34;,&#34;Belgium&#34;,&#34;Britain&#34;,&#34;France&#34;,&#34;Istanbul&#34;,&#34;Italy&#34;,&#34;Jakarta&#34;,&#34;Netherlands&#34;,&#34;New York City&#34;,&#34;Spain&#34;,&#34;Sweden&#34;],&#34;clean_range&#34;:[&#34;Mar 23rd-Jan 3rd&#34;,&#34;Mar 16th-Dec 27th&#34;,&#34;Mar 14th-Jan 8th&#34;,&#34;Mar 11th-Dec 1st&#34;,&#34;Mar 25th-Nov 18th&#34;,&#34;Feb 26th-Oct 27th&#34;,&#34;Mar 1st-May 31st&#34;,&#34;Mar 16th-Jan 10th&#34;,&#34;Mar 15th-Jan 2nd&#34;,&#34;Mar 4th-Jan 14th&#34;,&#34;Mar 16th-Dec 27th&#34;],&#34;covid_deaths&#34;:[6273,18934,93354,52775,5654,35181,520,11790,24814,53139,8106],&#34;excess_deaths&#34;:[9058,20030,99136,56825,9255,65960,4645,18927,28245,74150,9393],&#34;perc&#34;:[0.692536983881652,0.945282076884673,0.941676081342802,0.928728552573691,0.610913019989195,0.533368708308065,0.11194833153929,0.622919638611507,0.878527172950965,0.71664194200944,0.862983072500798]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;country&#34;,&#34;name&#34;:&#34;country&#34;,&#34;type&#34;:&#34;character&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontSize&#34;:&#34;14px&#34;,&#34;verticalAlign&#34;:&#34;center&#34;,&#34;align&#34;:&#34;left&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;clean_range&#34;,&#34;name&#34;:&#34;clean_range&#34;,&#34;type&#34;:&#34;character&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontSize&#34;:&#34;14px&#34;,&#34;verticalAlign&#34;:&#34;center&#34;,&#34;align&#34;:&#34;left&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;covid_deaths&#34;,&#34;name&#34;:&#34;covid_deaths&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontSize&#34;:&#34;14px&#34;,&#34;verticalAlign&#34;:&#34;center&#34;,&#34;align&#34;:&#34;left&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;excess_deaths&#34;,&#34;name&#34;:&#34;excess_deaths&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontSize&#34;:&#34;14px&#34;,&#34;verticalAlign&#34;:&#34;center&#34;,&#34;align&#34;:&#34;left&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;perc&#34;,&#34;name&#34;:&#34;perc&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontSize&#34;:&#34;14px&#34;,&#34;verticalAlign&#34;:&#34;center&#34;,&#34;align&#34;:&#34;left&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}}],&#34;defaultSortDesc&#34;:true,&#34;defaultSorted&#34;:[{&#34;id&#34;:&#34;excess_deaths&#34;,&#34;desc&#34;:true}],&#34;defaultPageSize&#34;:11,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:1,&#34;compact&#34;:true,&#34;showSortIcon&#34;:false,&#34;dataKey&#34;:&#34;cf230e9f346904fd937bc812f4f89bea&#34;,&#34;key&#34;:&#34;cf230e9f346904fd937bc812f4f89bea&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;format-columns&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Format columns&lt;/h3&gt;
&lt;p&gt;Now, we can start to format the specific columns appropriately. The three easiest columns are &lt;strong&gt;Region/Country&lt;/strong&gt;, &lt;strong&gt;Time Period&lt;/strong&gt;, &lt;strong&gt;COVID-19 as % of Total&lt;/strong&gt;. In each of these columns, we create a &lt;code&gt;colDef&lt;/code&gt; which defines the column name, as well as some styling.&lt;/p&gt;
&lt;p&gt;You’ll notice the addition of &lt;code&gt;JS&lt;/code&gt; in our percent column. This allows us to include JavaScript in our columns and column headers. I use it to do something simple, like a line break. You can use JS for plenty of more complex purposes, &lt;a href=&#34;https://glin.github.io/reactable/articles/examples.html&#34;&gt;some of which are documented here&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reactable(
  data_for_table,
  defaultSortOrder = &amp;#39;desc&amp;#39;,
  defaultSorted = &amp;#39;excess_deaths&amp;#39;,
  showSortIcon = FALSE,
  compact = TRUE,
  pagination = FALSE,
  defaultColDef = colDef(
    headerStyle = list(
      textAlign = &amp;quot;left&amp;quot;,
      fontSize = &amp;quot;11px&amp;quot;,
      lineHeight = &amp;quot;14px&amp;quot;,
      textTransform = &amp;quot;uppercase&amp;quot;,
      color = &amp;quot;#0c0c0c&amp;quot;,
      fontWeight = &amp;quot;500&amp;quot;,
      borderBottom = &amp;quot;2px solid #e9edf0&amp;quot;,
      paddingBottom = &amp;quot;3px&amp;quot;,
      verticalAlign = &amp;quot;bottom&amp;quot;,
      fontFamily = font_es
    ),
    style = list(
      fontFamily = font_es,
      fontSize = &amp;quot;14px&amp;quot;,
      verticalAlign = &amp;quot;center&amp;quot;,
      align = &amp;quot;left&amp;quot;
    )
  ),
  ####### NEW #######
  columns = list(
    country = colDef(
      name = &amp;quot;Region / Country&amp;quot;,
      style = list(fontFamily = font_es,
                   fontWeight = &amp;quot;400&amp;quot;)
    ),
    perc = colDef(
      html = TRUE,
      header = JS(&amp;quot;
      function(colInfo) {
        return &amp;#39;COVID-19 as&amp;lt;br&amp;gt;% of total&amp;#39;
      }&amp;quot;),
      name = &amp;quot;COVID-19 as % of Total&amp;quot;,
      align = &amp;quot;right&amp;quot;,
      maxWidth = 100,
      format = colFormat(percent = TRUE, digits = 0),
      style = list(fontFamily =  font_es_bold),
      headerStyle = list(
        fontSize = &amp;quot;11px&amp;quot;,
        lineHeight = &amp;quot;14px&amp;quot;,
        textTransform = &amp;quot;uppercase&amp;quot;,
        color = &amp;quot;#0c0c0c&amp;quot;,
        fontWeight = &amp;quot;500&amp;quot;,
        borderBottom = &amp;quot;2px solid #e9edf0&amp;quot;,
        paddingBottom = &amp;quot;3px&amp;quot;,
        verticalAlign = &amp;quot;bottom&amp;quot;,
        fontFamily = font_es,
        textAlign = &amp;quot;right&amp;quot;
      )
    ),
    clean_range = colDef(
      name = &amp;quot;Time Period&amp;quot;,
      style = list(
        color = &amp;#39;#3f5661&amp;#39;,
        fontSize = &amp;#39;12px&amp;#39;,
        fontFamily = font_es
      )
    )
  )
)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-7&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-7&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;country&#34;:[&#34;Austria&#34;,&#34;Belgium&#34;,&#34;Britain&#34;,&#34;France&#34;,&#34;Istanbul&#34;,&#34;Italy&#34;,&#34;Jakarta&#34;,&#34;Netherlands&#34;,&#34;New York City&#34;,&#34;Spain&#34;,&#34;Sweden&#34;],&#34;clean_range&#34;:[&#34;Mar 23rd-Jan 3rd&#34;,&#34;Mar 16th-Dec 27th&#34;,&#34;Mar 14th-Jan 8th&#34;,&#34;Mar 11th-Dec 1st&#34;,&#34;Mar 25th-Nov 18th&#34;,&#34;Feb 26th-Oct 27th&#34;,&#34;Mar 1st-May 31st&#34;,&#34;Mar 16th-Jan 10th&#34;,&#34;Mar 15th-Jan 2nd&#34;,&#34;Mar 4th-Jan 14th&#34;,&#34;Mar 16th-Dec 27th&#34;],&#34;covid_deaths&#34;:[6273,18934,93354,52775,5654,35181,520,11790,24814,53139,8106],&#34;excess_deaths&#34;:[9058,20030,99136,56825,9255,65960,4645,18927,28245,74150,9393],&#34;perc&#34;:[0.692536983881652,0.945282076884673,0.941676081342802,0.928728552573691,0.610913019989195,0.533368708308065,0.11194833153929,0.622919638611507,0.878527172950965,0.71664194200944,0.862983072500798]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;country&#34;,&#34;name&#34;:&#34;Region / Country&#34;,&#34;type&#34;:&#34;character&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontWeight&#34;:&#34;400&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;clean_range&#34;,&#34;name&#34;:&#34;Time Period&#34;,&#34;type&#34;:&#34;character&#34;,&#34;style&#34;:{&#34;color&#34;:&#34;#3f5661&#34;,&#34;fontSize&#34;:&#34;12px&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;covid_deaths&#34;,&#34;name&#34;:&#34;covid_deaths&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontSize&#34;:&#34;14px&#34;,&#34;verticalAlign&#34;:&#34;center&#34;,&#34;align&#34;:&#34;left&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;excess_deaths&#34;,&#34;name&#34;:&#34;excess_deaths&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontSize&#34;:&#34;14px&#34;,&#34;verticalAlign&#34;:&#34;center&#34;,&#34;align&#34;:&#34;left&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;perc&#34;,&#34;name&#34;:&#34;COVID-19 as % of Total&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndBol&#34;},&#34;headerStyle&#34;:{&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;textAlign&#34;:&#34;right&#34;},&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:0,&#34;percent&#34;:true},&#34;aggregated&#34;:{&#34;digits&#34;:0,&#34;percent&#34;:true}},&#34;header&#34;:&#34;\n      function(colInfo) {\n        return &#39;COVID-19 as&lt;br&gt;% of total&#39;\n      }&#34;,&#34;html&#34;:true,&#34;maxWidth&#34;:100,&#34;align&#34;:&#34;right&#34;}],&#34;defaultSortDesc&#34;:true,&#34;defaultSorted&#34;:[{&#34;id&#34;:&#34;excess_deaths&#34;,&#34;desc&#34;:true}],&#34;defaultPageSize&#34;:11,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:1,&#34;compact&#34;:true,&#34;showSortIcon&#34;:false,&#34;dataKey&#34;:&#34;a9f27f217d5b771773efca2eb8912d22&#34;,&#34;key&#34;:&#34;a9f27f217d5b771773efca2eb8912d22&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[&#34;tag.attribs.columns.4.header&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;add-the-barcharts&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Add the barcharts&lt;/h3&gt;
&lt;p&gt;We can now create the ‘deaths’ columns, which include barcharts.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;reactable&lt;/code&gt; makes the addition of barcharts to tables quite easy, thanks to its integration of JavaScript. Here, I pull from one &lt;a href=&#34;https://glin.github.io/reactable/articles/twitter-followers/twitter-followers.html&#34;&gt;example&lt;/a&gt; on &lt;code&gt;reactable&lt;/code&gt;’s website, and use the following code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reactable(
  data_for_table,
  defaultSortOrder = &amp;#39;desc&amp;#39;,
  defaultSorted = &amp;#39;excess_deaths&amp;#39;,
  showSortIcon = FALSE,
  compact = TRUE,
  pagination = FALSE,
  defaultColDef = colDef(
    headerStyle = list(
      textAlign = &amp;quot;left&amp;quot;,
      fontSize = &amp;quot;11px&amp;quot;,
      lineHeight = &amp;quot;14px&amp;quot;,
      textTransform = &amp;quot;uppercase&amp;quot;,
      color = &amp;quot;#0c0c0c&amp;quot;,
      fontWeight = &amp;quot;500&amp;quot;,
      borderBottom = &amp;quot;2px solid #e9edf0&amp;quot;,
      paddingBottom = &amp;quot;3px&amp;quot;,
      verticalAlign = &amp;quot;bottom&amp;quot;,
      fontFamily = font_es
    ),
    style = list(
      fontFamily = font_es,
      fontSize = &amp;quot;14px&amp;quot;,
      verticalAlign = &amp;quot;center&amp;quot;,
      align = &amp;quot;left&amp;quot;
    )
  ),
  columns = list(
    country = colDef(
      name = &amp;quot;Region / Country&amp;quot;,
      style = list(fontFamily = font_es,
                   fontWeight = &amp;quot;400&amp;quot;)
    ),
    perc = colDef(
      html = TRUE,
      header = JS(&amp;quot;
      function(colInfo) {
        return &amp;#39;COVID-19 as&amp;lt;br&amp;gt;% of total&amp;#39;
      }&amp;quot;),
      name = &amp;quot;COVID-19 as % of Total&amp;quot;,
      align = &amp;quot;right&amp;quot;,
      maxWidth = 100,
      format = colFormat(percent = TRUE, digits = 0),
      style = list(fontFamily =  font_es_bold),
      headerStyle = list(
        fontSize = &amp;quot;11px&amp;quot;,
        lineHeight = &amp;quot;14px&amp;quot;,
        textTransform = &amp;quot;uppercase&amp;quot;,
        color = &amp;quot;#0c0c0c&amp;quot;,
        fontWeight = &amp;quot;500&amp;quot;,
        borderBottom = &amp;quot;2px solid #e9edf0&amp;quot;,
        paddingBottom = &amp;quot;3px&amp;quot;,
        verticalAlign = &amp;quot;bottom&amp;quot;,
        fontFamily = font_es,
        textAlign = &amp;quot;right&amp;quot;
      )
    ),
    clean_range = colDef(
      name = &amp;quot;Time Period&amp;quot;,
      style = list(
        color = &amp;#39;#3f5661&amp;#39;,
        fontSize = &amp;#39;12px&amp;#39;,
        fontFamily = font_es
      )
    ),
    ###### NEW ######
    covid_deaths = colDef(
      name = &amp;quot;COVID-19 Deaths&amp;quot;,
      cell = function(value) {
        width &amp;lt;- paste0(value * 100 / max(data_for_table$covid_deaths), &amp;quot;%&amp;quot;)
        value &amp;lt;- format(value, big.mark = &amp;quot;,&amp;quot;)
        value &amp;lt;- format(value, width = 10, justify = &amp;quot;right&amp;quot;)
        bar &amp;lt;- div(
          class = &amp;quot;bar-chart&amp;quot;,
          style = list(marginRight = &amp;quot;6px&amp;quot;),
          div(
            class = &amp;quot;bar&amp;quot;,
            style = list(width = width, backgroundColor = &amp;quot;#F15A3F&amp;quot;)
          )
        )
        div(class = &amp;quot;bar-cell&amp;quot;, span(class = &amp;quot;number&amp;quot;, value), bar)
      }
    ),
    excess_deaths = colDef(
      name = &amp;quot;Total Excess Deaths&amp;quot;,
      cell = function(value) {
        width &amp;lt;-
          paste0(value * 100 / max(data_for_table$excess_deaths), &amp;quot;%&amp;quot;)
        value &amp;lt;- format(value, big.mark = &amp;quot;,&amp;quot;)
        value &amp;lt;- format(value, width = 10, justify = &amp;quot;right&amp;quot;)
        bar &amp;lt;- div(
          class = &amp;quot;bar-chart&amp;quot;,
          style = list(marginRight = &amp;quot;6px&amp;quot;),
          div(
            class = &amp;quot;bar&amp;quot;,
            style = list(width = width, backgroundColor = &amp;quot;#3F5661&amp;quot;)
          )
        )
        div(class = &amp;quot;bar-cell&amp;quot;, span(class = &amp;quot;number&amp;quot;, value), bar)
      }
    )
  )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s break that down step-by-step, with a focus on &lt;code&gt;covid_deaths&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First, we need to define some CSS. &lt;code&gt;reactable&lt;/code&gt; allows you to easily include CSS is RMarkdown documents, in chunks defined as &lt;code&gt;css&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;css&#34;&gt;&lt;code&gt;.bar-cell {
  display: flex;
  align-items: center;
}

.number {
  font-size: 13.5px;
  white-space: pre;
}

.bar-chart {
  flex-grow: 1;
  margin-left: 6px;
  height: 22px;
}

.bar {
  height: 100%;
}&lt;/code&gt;&lt;/pre&gt;
&lt;style type=&#34;text/css&#34;&gt;
.bar-cell {
  display: flex;
  align-items: center;
}

.number {
  font-size: 13.5px;
  white-space: pre;
}

.bar-chart {
  flex-grow: 1;
  margin-left: 6px;
  height: 22px;
}

.bar {
  height: 100%;
}
&lt;/style&gt;
&lt;p&gt;Now, let’s look at how we define &lt;code&gt;covid_deaths&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  covid_deaths = colDef(
    ### define the name
    name = &amp;quot;COVID-19 Deaths&amp;quot;,
    ### create a &amp;#39;cell&amp;#39; function
    cell = function(value) {
      ### define the bar width according to the specified value
      width &amp;lt;- paste0(value * 100 / max(data_for_table$covid_deaths), &amp;quot;%&amp;quot;)
      ### add a comma to the label
      value &amp;lt;- format(value, big.mark = &amp;quot;,&amp;quot;)
      ### justify and provide padding with width
      value &amp;lt;- format(value, width = 10, justify = &amp;quot;right&amp;quot;)
      ### create the barchart div
      bar &amp;lt;- div(
        ### with a class of &amp;#39;bar-chart&amp;#39;
        class = &amp;quot;bar-chart&amp;quot;,
        ### give the bar a margin
        style = list(marginRight = &amp;quot;6px&amp;quot;),
        ### create the *actual* bar, with the red economist color
        div(
          class = &amp;quot;bar&amp;quot;,
          style = list(width = width, backgroundColor = &amp;quot;#F15A3F&amp;quot;)
        )
      )
      ### bring it all together, with the &amp;#39;value&amp;#39; (number) preceding the bar itself
      div(class = &amp;quot;bar-cell&amp;quot;, span(class = &amp;quot;number&amp;quot;, value), bar)
    }
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates a table that looks like this:&lt;/p&gt;
&lt;div id=&#34;htmlwidget-8&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-8&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;country&#34;:[&#34;Austria&#34;,&#34;Belgium&#34;,&#34;Britain&#34;,&#34;France&#34;,&#34;Istanbul&#34;,&#34;Italy&#34;,&#34;Jakarta&#34;,&#34;Netherlands&#34;,&#34;New York City&#34;,&#34;Spain&#34;,&#34;Sweden&#34;],&#34;clean_range&#34;:[&#34;Mar 23rd-Jan 3rd&#34;,&#34;Mar 16th-Dec 27th&#34;,&#34;Mar 14th-Jan 8th&#34;,&#34;Mar 11th-Dec 1st&#34;,&#34;Mar 25th-Nov 18th&#34;,&#34;Feb 26th-Oct 27th&#34;,&#34;Mar 1st-May 31st&#34;,&#34;Mar 16th-Jan 10th&#34;,&#34;Mar 15th-Jan 2nd&#34;,&#34;Mar 4th-Jan 14th&#34;,&#34;Mar 16th-Dec 27th&#34;],&#34;covid_deaths&#34;:[6273,18934,93354,52775,5654,35181,520,11790,24814,53139,8106],&#34;excess_deaths&#34;:[9058,20030,99136,56825,9255,65960,4645,18927,28245,74150,9393],&#34;perc&#34;:[0.692536983881652,0.945282076884673,0.941676081342802,0.928728552573691,0.610913019989195,0.533368708308065,0.11194833153929,0.622919638611507,0.878527172950965,0.71664194200944,0.862983072500798]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;country&#34;,&#34;name&#34;:&#34;Region / Country&#34;,&#34;type&#34;:&#34;character&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontWeight&#34;:&#34;400&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;clean_range&#34;,&#34;name&#34;:&#34;Time Period&#34;,&#34;type&#34;:&#34;character&#34;,&#34;style&#34;:{&#34;color&#34;:&#34;#3f5661&#34;,&#34;fontSize&#34;:&#34;12px&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;covid_deaths&#34;,&#34;name&#34;:&#34;COVID-19 Deaths&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontSize&#34;:&#34;14px&#34;,&#34;verticalAlign&#34;:&#34;center&#34;,&#34;align&#34;:&#34;left&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;},&#34;cell&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     6,273&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;6.71958352079182%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    18,934&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;20.2819375709664%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    93,354&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;100%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    52,775&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;56.5321250294578%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     5,654&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;6.05651605715877%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    35,181&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;37.6855839064207%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;       520&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;0.557019517106926%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    11,790&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;12.6293463590205%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    24,814&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;26.5805428797909%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    53,139&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;56.9220386914326%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     8,106&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;8.68307731859374%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]}]},{&#34;accessor&#34;:&#34;excess_deaths&#34;,&#34;name&#34;:&#34;Total Excess Deaths&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontSize&#34;:&#34;14px&#34;,&#34;verticalAlign&#34;:&#34;center&#34;,&#34;align&#34;:&#34;left&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;},&#34;cell&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     9,058&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;9.13694318915429%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    20,030&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;20.2045674628793%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    99,136&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;100%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    56,825&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;57.3202469335055%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     9,255&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;9.33566010329245%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    65,960&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;66.5348612007747%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     4,645&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;4.68548256939961%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    18,927&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;19.0919544867657%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    28,245&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;28.4911636539703%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    74,150&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;74.7962395093609%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     9,393&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;9.47486281471917%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]}]},{&#34;accessor&#34;:&#34;perc&#34;,&#34;name&#34;:&#34;COVID-19 as % of Total&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndBol&#34;},&#34;headerStyle&#34;:{&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;textAlign&#34;:&#34;right&#34;},&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:0,&#34;percent&#34;:true},&#34;aggregated&#34;:{&#34;digits&#34;:0,&#34;percent&#34;:true}},&#34;header&#34;:&#34;\n      function(colInfo) {\n        return &#39;COVID-19 as&lt;br&gt;% of total&#39;\n      }&#34;,&#34;html&#34;:true,&#34;maxWidth&#34;:100,&#34;align&#34;:&#34;right&#34;}],&#34;defaultSortDesc&#34;:true,&#34;defaultSorted&#34;:[{&#34;id&#34;:&#34;excess_deaths&#34;,&#34;desc&#34;:true}],&#34;defaultPageSize&#34;:11,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:1,&#34;compact&#34;:true,&#34;showSortIcon&#34;:false,&#34;dataKey&#34;:&#34;041148d21e086b68157f578f86be38ff&#34;,&#34;key&#34;:&#34;041148d21e086b68157f578f86be38ff&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[&#34;tag.attribs.columns.4.header&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;add-a-title&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Add a title&lt;/h3&gt;
&lt;p&gt;Finally, we can add the table title and subtitle. We do so by storing the above table in our environment. (This is the final table code!)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table &amp;lt;- reactable(
  data_for_table,
  defaultSortOrder = &amp;#39;desc&amp;#39;,
  defaultSorted = &amp;#39;excess_deaths&amp;#39;,
  showSortIcon = FALSE,
  compact = TRUE,
  pagination = FALSE,
  defaultColDef = colDef(
    headerStyle = list(
      textAlign = &amp;quot;left&amp;quot;,
      fontSize = &amp;quot;11px&amp;quot;,
      lineHeight = &amp;quot;14px&amp;quot;,
      textTransform = &amp;quot;uppercase&amp;quot;,
      color = &amp;quot;#0c0c0c&amp;quot;,
      fontWeight = &amp;quot;500&amp;quot;,
      borderBottom = &amp;quot;2px solid #e9edf0&amp;quot;,
      paddingBottom = &amp;quot;3px&amp;quot;,
      verticalAlign = &amp;quot;bottom&amp;quot;,
      fontFamily = font_es
    ),
    style = list(
      fontFamily = font_es,
      fontSize = &amp;quot;14px&amp;quot;,
      verticalAlign = &amp;quot;center&amp;quot;,
      align = &amp;quot;left&amp;quot;
    )
  ),
  
  columns = list(
    country = colDef(
      name = &amp;quot;Region / Country&amp;quot;,
      style = list(fontFamily = font_es,
                   fontWeight = &amp;quot;400&amp;quot;)
    ),
    covid_deaths = colDef(
      name = &amp;quot;COVID-19 Deaths&amp;quot;,
      # align = &amp;quot;left&amp;quot;,
      cell = function(value) {
        width &amp;lt;- paste0(value * 100 / max(data_for_table$covid_deaths), &amp;quot;%&amp;quot;)
        value &amp;lt;- format(value, big.mark = &amp;quot;,&amp;quot;)
        # value &amp;lt;- str_pad(value, 6, pad = &amp;quot;&amp;quot;)
        value &amp;lt;- format(value, width = 10, justify = &amp;quot;right&amp;quot;)
        bar &amp;lt;- div(
          class = &amp;quot;bar-chart&amp;quot;,
          style = list(marginRight = &amp;quot;6px&amp;quot;),
          div(
            class = &amp;quot;bar&amp;quot;,
            style = list(width = width, backgroundColor = &amp;quot;#F15A3F&amp;quot;)
          )
        )
        div(class = &amp;quot;bar-cell&amp;quot;, span(class = &amp;quot;number&amp;quot;, value), bar)
      }
    ),
    excess_deaths = colDef(
      name = &amp;quot;Total Excess Deaths&amp;quot;,
      # align = &amp;quot;left&amp;quot;,
      cell = function(value) {
        width &amp;lt;-
          paste0(value * 100 / max(data_for_table$excess_deaths), &amp;quot;%&amp;quot;)
        value &amp;lt;- format(value, big.mark = &amp;quot;,&amp;quot;)
        value &amp;lt;- format(value, width = 10, justify = &amp;quot;right&amp;quot;)
        bar &amp;lt;- div(
          class = &amp;quot;bar-chart&amp;quot;,
          style = list(marginRight = &amp;quot;6px&amp;quot;),
          div(
            class = &amp;quot;bar&amp;quot;,
            style = list(width = width, backgroundColor = &amp;quot;#3F5661&amp;quot;)
          )
        )
        div(class = &amp;quot;bar-cell&amp;quot;, span(class = &amp;quot;number&amp;quot;, value), bar)
      }
    ),
    perc = colDef(
      html = TRUE,
      header = JS(&amp;quot;
      function(colInfo) {
        return &amp;#39;COVID-19 as&amp;lt;br&amp;gt;% of total&amp;#39;
      }&amp;quot;),
      name = &amp;quot;COVID-19 as % of Total&amp;quot;,
      align = &amp;quot;right&amp;quot;,
      maxWidth = 100,
      format = colFormat(percent = TRUE, digits = 0),
      style = list(fontFamily =  font_es_bold),
      headerStyle = list(
        fontSize = &amp;quot;11px&amp;quot;,
        lineHeight = &amp;quot;14px&amp;quot;,
        textTransform = &amp;quot;uppercase&amp;quot;,
        color = &amp;quot;#0c0c0c&amp;quot;,
        fontWeight = &amp;quot;500&amp;quot;,
        borderBottom = &amp;quot;2px solid #e9edf0&amp;quot;,
        paddingBottom = &amp;quot;3px&amp;quot;,
        verticalAlign = &amp;quot;bottom&amp;quot;,
        fontFamily = font_es,
        textAlign = &amp;quot;right&amp;quot;
      )
    ),
    clean_range = colDef(
      name = &amp;quot;Time Period&amp;quot;,
      style = list(
        color = &amp;#39;#3f5661&amp;#39;,
        fontSize = &amp;#39;12px&amp;#39;,
        fontFamily = font_es
      )
    )
  ),
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we can include a title and subtitle above the table. We use some &lt;code&gt;htmltools&lt;/code&gt; functions to create divs, headers, and paragraphs.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;div(
    div(
      h2(&amp;quot;Excess mortality since region/country’s first 50 covid deaths&amp;quot;),
      p(
        ### create the &amp;#39;Updated on ...&amp;#39; and make it dynamic
        paste0(
          &amp;quot;Updated on &amp;quot;, format(Sys.Date(), &amp;quot;%B &amp;quot;),
          append_date_suffix(as.numeric(format(Sys.Date(), &amp;quot;%d&amp;quot;))), &amp;quot; &amp;quot;,
          strftime(Sys.time(), format = &amp;quot;%H:%M&amp;quot;), &amp;quot; UCT&amp;quot;
        )
      ),
    ),
    table)&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;div&gt;
&lt;h2&gt;Excess mortality since region/country’s first 50 covid deaths&lt;/h2&gt;
&lt;p&gt;Updated on January 25th 00:28 UCT&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;htmlwidget-9&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-9&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;country&#34;:[&#34;Austria&#34;,&#34;Belgium&#34;,&#34;Britain&#34;,&#34;France&#34;,&#34;Istanbul&#34;,&#34;Italy&#34;,&#34;Jakarta&#34;,&#34;Netherlands&#34;,&#34;New York City&#34;,&#34;Spain&#34;,&#34;Sweden&#34;],&#34;clean_range&#34;:[&#34;Mar 23rd-Jan 3rd&#34;,&#34;Mar 16th-Dec 27th&#34;,&#34;Mar 14th-Jan 8th&#34;,&#34;Mar 11th-Dec 1st&#34;,&#34;Mar 25th-Nov 18th&#34;,&#34;Feb 26th-Oct 27th&#34;,&#34;Mar 1st-May 31st&#34;,&#34;Mar 16th-Jan 10th&#34;,&#34;Mar 15th-Jan 2nd&#34;,&#34;Mar 4th-Jan 14th&#34;,&#34;Mar 16th-Dec 27th&#34;],&#34;covid_deaths&#34;:[6273,18934,93354,52775,5654,35181,520,11790,24814,53139,8106],&#34;excess_deaths&#34;:[9058,20030,99136,56825,9255,65960,4645,18927,28245,74150,9393],&#34;perc&#34;:[0.692536983881652,0.945282076884673,0.941676081342802,0.928728552573691,0.610913019989195,0.533368708308065,0.11194833153929,0.622919638611507,0.878527172950965,0.71664194200944,0.862983072500798]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;country&#34;,&#34;name&#34;:&#34;Region / Country&#34;,&#34;type&#34;:&#34;character&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontWeight&#34;:&#34;400&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;clean_range&#34;,&#34;name&#34;:&#34;Time Period&#34;,&#34;type&#34;:&#34;character&#34;,&#34;style&#34;:{&#34;color&#34;:&#34;#3f5661&#34;,&#34;fontSize&#34;:&#34;12px&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;covid_deaths&#34;,&#34;name&#34;:&#34;COVID-19 Deaths&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontSize&#34;:&#34;14px&#34;,&#34;verticalAlign&#34;:&#34;center&#34;,&#34;align&#34;:&#34;left&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;},&#34;cell&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     6,273&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;6.71958352079182%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    18,934&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;20.2819375709664%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    93,354&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;100%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    52,775&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;56.5321250294578%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     5,654&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;6.05651605715877%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    35,181&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;37.6855839064207%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;       520&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;0.557019517106926%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    11,790&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;12.6293463590205%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    24,814&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;26.5805428797909%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    53,139&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;56.9220386914326%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     8,106&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;8.68307731859374%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]}]},{&#34;accessor&#34;:&#34;excess_deaths&#34;,&#34;name&#34;:&#34;Total Excess Deaths&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontSize&#34;:&#34;14px&#34;,&#34;verticalAlign&#34;:&#34;center&#34;,&#34;align&#34;:&#34;left&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;},&#34;cell&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     9,058&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;9.13694318915429%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    20,030&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;20.2045674628793%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    99,136&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;100%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    56,825&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;57.3202469335055%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     9,255&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;9.33566010329245%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    65,960&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;66.5348612007747%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     4,645&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;4.68548256939961%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    18,927&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;19.0919544867657%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    28,245&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;28.4911636539703%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    74,150&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;74.7962395093609%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     9,393&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;9.47486281471917%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]}]},{&#34;accessor&#34;:&#34;perc&#34;,&#34;name&#34;:&#34;COVID-19 as % of Total&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndBol&#34;},&#34;headerStyle&#34;:{&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;textAlign&#34;:&#34;right&#34;},&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:0,&#34;percent&#34;:true},&#34;aggregated&#34;:{&#34;digits&#34;:0,&#34;percent&#34;:true}},&#34;header&#34;:&#34;\n      function(colInfo) {\n        return &#39;COVID-19 as&lt;br&gt;% of total&#39;\n      }&#34;,&#34;html&#34;:true,&#34;maxWidth&#34;:100,&#34;align&#34;:&#34;right&#34;}],&#34;defaultSortDesc&#34;:true,&#34;defaultSorted&#34;:[{&#34;id&#34;:&#34;excess_deaths&#34;,&#34;desc&#34;:true}],&#34;defaultPageSize&#34;:11,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:1,&#34;compact&#34;:true,&#34;showSortIcon&#34;:false,&#34;dataKey&#34;:&#34;041148d21e086b68157f578f86be38ff&#34;,&#34;key&#34;:&#34;041148d21e086b68157f578f86be38ff&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[&#34;tag.attribs.columns.4.header&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;Yikes! Those font sizes don’t quite line up with &lt;em&gt;The Economist&lt;/em&gt;’s. Let’s add classes to our divs to match their style.&lt;/p&gt;
&lt;pre class=&#34;css&#34;&gt;&lt;code&gt;.table {
  margin: 0 auto;
  width: 675px;
}

.tableTitle {
  margin: 6px 0;
  font-size: 16px;
  font-family: &amp;#39;Econ Sans Cnd&amp;#39;
}

.tableTitle h2 {
  font-size: 16px;
  font-weight: bold;
  font-family: &amp;#39;Econ Sans Cnd&amp;#39;
}

.tableTitle p {
  font-size: 14px;
  font-weight: 500;
}&lt;/code&gt;&lt;/pre&gt;
&lt;style type=&#34;text/css&#34;&gt;
.table {
  margin: 0 auto;
  width: 675px;
}

.tableTitle {
  margin: 6px 0;
  font-size: 16px;
  font-family: &#39;Econ Sans Cnd&#39;
}

.tableTitle h2 {
  font-size: 16px;
  font-weight: bold;
  font-family: &#39;Econ Sans Cnd&#39;
}

.tableTitle p {
  font-size: 14px;
  font-weight: 500;
}
&lt;/style&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;div(class = &amp;quot;tableTitle&amp;quot;,
    div(
      class = &amp;quot;title&amp;quot;,
      h2(&amp;quot;Excess mortality since region/country’s first 50 covid deaths&amp;quot;),
      p(
        paste0(&amp;quot;Updated on &amp;quot;, format(Sys.Date(),&amp;quot;%B &amp;quot;),
          append_date_suffix(as.numeric(format(Sys.Date(), &amp;quot;%d&amp;quot;))), &amp;quot; &amp;quot;,
          strftime(Sys.time(), format = &amp;quot;%H:%M&amp;quot;), &amp;quot; UCT&amp;quot;
        )
      ),
    ),
    table)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;tableTitle&#34;&gt;
&lt;div class=&#34;title&#34;&gt;
&lt;h2&gt;Excess mortality since region/country’s first 50 covid deaths&lt;/h2&gt;
&lt;p&gt;Updated on January 25th 00:28 UCT&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;htmlwidget-10&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-10&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;country&#34;:[&#34;Austria&#34;,&#34;Belgium&#34;,&#34;Britain&#34;,&#34;France&#34;,&#34;Istanbul&#34;,&#34;Italy&#34;,&#34;Jakarta&#34;,&#34;Netherlands&#34;,&#34;New York City&#34;,&#34;Spain&#34;,&#34;Sweden&#34;],&#34;clean_range&#34;:[&#34;Mar 23rd-Jan 3rd&#34;,&#34;Mar 16th-Dec 27th&#34;,&#34;Mar 14th-Jan 8th&#34;,&#34;Mar 11th-Dec 1st&#34;,&#34;Mar 25th-Nov 18th&#34;,&#34;Feb 26th-Oct 27th&#34;,&#34;Mar 1st-May 31st&#34;,&#34;Mar 16th-Jan 10th&#34;,&#34;Mar 15th-Jan 2nd&#34;,&#34;Mar 4th-Jan 14th&#34;,&#34;Mar 16th-Dec 27th&#34;],&#34;covid_deaths&#34;:[6273,18934,93354,52775,5654,35181,520,11790,24814,53139,8106],&#34;excess_deaths&#34;:[9058,20030,99136,56825,9255,65960,4645,18927,28245,74150,9393],&#34;perc&#34;:[0.692536983881652,0.945282076884673,0.941676081342802,0.928728552573691,0.610913019989195,0.533368708308065,0.11194833153929,0.622919638611507,0.878527172950965,0.71664194200944,0.862983072500798]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;country&#34;,&#34;name&#34;:&#34;Region / Country&#34;,&#34;type&#34;:&#34;character&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontWeight&#34;:&#34;400&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;clean_range&#34;,&#34;name&#34;:&#34;Time Period&#34;,&#34;type&#34;:&#34;character&#34;,&#34;style&#34;:{&#34;color&#34;:&#34;#3f5661&#34;,&#34;fontSize&#34;:&#34;12px&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;}},{&#34;accessor&#34;:&#34;covid_deaths&#34;,&#34;name&#34;:&#34;COVID-19 Deaths&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontSize&#34;:&#34;14px&#34;,&#34;verticalAlign&#34;:&#34;center&#34;,&#34;align&#34;:&#34;left&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;},&#34;cell&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     6,273&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;6.71958352079182%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    18,934&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;20.2819375709664%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    93,354&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;100%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    52,775&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;56.5321250294578%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     5,654&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;6.05651605715877%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    35,181&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;37.6855839064207%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;       520&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;0.557019517106926%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    11,790&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;12.6293463590205%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    24,814&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;26.5805428797909%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    53,139&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;56.9220386914326%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     8,106&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;8.68307731859374%&#34;,&#34;backgroundColor&#34;:&#34;#F15A3F&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]}]},{&#34;accessor&#34;:&#34;excess_deaths&#34;,&#34;name&#34;:&#34;Total Excess Deaths&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;fontSize&#34;:&#34;14px&#34;,&#34;verticalAlign&#34;:&#34;center&#34;,&#34;align&#34;:&#34;left&#34;},&#34;headerStyle&#34;:{&#34;textAlign&#34;:&#34;left&#34;,&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;},&#34;cell&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     9,058&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;9.13694318915429%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    20,030&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;20.2045674628793%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    99,136&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;100%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    56,825&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;57.3202469335055%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     9,255&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;9.33566010329245%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    65,960&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;66.5348612007747%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     4,645&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;4.68548256939961%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    18,927&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;19.0919544867657%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    28,245&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;28.4911636539703%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;    74,150&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;74.7962395093609%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;bar-cell&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;span&#34;,&#34;attribs&#34;:{&#34;className&#34;:&#34;number&#34;},&#34;children&#34;:[&#34;     9,393&#34;]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;marginRight&#34;:&#34;6px&#34;},&#34;className&#34;:&#34;bar-chart&#34;},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;width&#34;:&#34;9.47486281471917%&#34;,&#34;backgroundColor&#34;:&#34;#3F5661&#34;},&#34;className&#34;:&#34;bar&#34;},&#34;children&#34;:[]}]}]}]},{&#34;accessor&#34;:&#34;perc&#34;,&#34;name&#34;:&#34;COVID-19 as % of Total&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;EconSansCndBol&#34;},&#34;headerStyle&#34;:{&#34;fontSize&#34;:&#34;11px&#34;,&#34;lineHeight&#34;:&#34;14px&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;color&#34;:&#34;#0c0c0c&#34;,&#34;fontWeight&#34;:&#34;500&#34;,&#34;borderBottom&#34;:&#34;2px solid #e9edf0&#34;,&#34;paddingBottom&#34;:&#34;3px&#34;,&#34;verticalAlign&#34;:&#34;bottom&#34;,&#34;fontFamily&#34;:&#34;EconSansCndReg&#34;,&#34;textAlign&#34;:&#34;right&#34;},&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:0,&#34;percent&#34;:true},&#34;aggregated&#34;:{&#34;digits&#34;:0,&#34;percent&#34;:true}},&#34;header&#34;:&#34;\n      function(colInfo) {\n        return &#39;COVID-19 as&lt;br&gt;% of total&#39;\n      }&#34;,&#34;html&#34;:true,&#34;maxWidth&#34;:100,&#34;align&#34;:&#34;right&#34;}],&#34;defaultSortDesc&#34;:true,&#34;defaultSorted&#34;:[{&#34;id&#34;:&#34;excess_deaths&#34;,&#34;desc&#34;:true}],&#34;defaultPageSize&#34;:11,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:1,&#34;compact&#34;:true,&#34;showSortIcon&#34;:false,&#34;dataKey&#34;:&#34;041148d21e086b68157f578f86be38ff&#34;,&#34;key&#34;:&#34;041148d21e086b68157f578f86be38ff&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[&#34;tag.attribs.columns.4.header&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;Let’s compare that to the table we’re attempting to replicate. Note that some of the data has changed in the time between &lt;em&gt;The Economist&lt;/em&gt; published their table and I created mine.&lt;/p&gt;
&lt;div style=&#34;text-align: center&#34;&gt;
&lt;p&gt;&lt;img width = 100% src = img/econ-table.png&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Tidy Tuesday: Replication</title>
      <link>https://connorrothschild.github.io/v2/post/tidy-tuesday-replication/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://connorrothschild.github.io/v2/post/tidy-tuesday-replication/</guid>
      <description>
&lt;link href=&#34;https://connorrothschild.github.io/v2/rmarkdown-libs/anchor-sections/anchor-sections.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://connorrothschild.github.io/v2/rmarkdown-libs/anchor-sections/anchor-sections.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This weeks’s installment of &lt;a href=&#34;https://t.co/sElb4fcv3u?amp=1&#34;&gt;Tidy Tuesday&lt;/a&gt; is all about replicating professional plots in R.
Inspired by Rafael Irizarry’s post &lt;a href=&#34;https://simplystatistics.org/2019/08/28/you-can-replicate-almost-any-plot-with-ggplot2/&#34;&gt;“You can replicate almost any plot with R”&lt;/a&gt;, the goal is to take otherwise professional publication-ready plots and make them in R (usually ggplot2).&lt;/p&gt;
&lt;p&gt;I was interested in this Tidy Tuesday because some of my &lt;a href=&#34;https://connorrothschild.github.io/r/introducing-tpltheme/&#34;&gt;past work&lt;/a&gt; has been dedicated to creating publication-ready plots. Because &lt;a href=&#34;https://connorrothschild.github.io/r/automation/&#34;&gt;the first visualization I ever created&lt;/a&gt; was inspired by (a replication of?) &lt;a href=&#34;https://www.bloomberg.com/graphics/2017-job-risk/&#34;&gt;this visualization&lt;/a&gt; from Bloomberg graphics, I decided to set out on a journey to make that plot as close as possible to the real thing.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figs/bloomberg.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The real goal of this week’s Tidy Tuesday is using &lt;strong&gt;the data that Rafael posted&lt;/strong&gt; to create other cool visualizations; I took a slightly different approach to try to recreate another visualization entirely. What follows is an interactive recreation of the visualization above, using &lt;a href=&#34;https://shiny.rstudio.com/&#34;&gt;Shiny&lt;/a&gt; and &lt;a href=&#34;https://plot.ly/r/&#34;&gt;plotly&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
library(ggthemes)
library(dplyr)
library(ggrepel)
library(tools)
library(readxl)
library(tidyverse)
library(knitr)
library(shiny)
library(plotly)

theme_set(theme_minimal())&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;load-and-clean-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Load and Clean Data&lt;/h1&gt;
&lt;p&gt;First, we read in the data. This process was a bit complicated as I kind of had to guess where Bloomberg pulled their data from.&lt;/p&gt;
&lt;p&gt;I relied on three datasets:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Educational attainment broke down by occupation, provided by BLS &lt;a href=&#34;https://www.bls.gov/emp/ep_education_training_system.htm&#34;&gt;here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Salaries, median hourly/annual wages broke down by occupation, provided by BLS &lt;a href=&#34;https://www.bls.gov/oes/current/oes_nat.htm#11-0000&#34;&gt;here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Risk of automation broken down by occupation, provided by Carl Benedikt Frey and Michael A. Osborne (but compiled &lt;a href=&#34;https://data.world/wnedds/occupations-by-state-and-likelihood-of-automation&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;education &amp;lt;- read_excel(&amp;quot;data/education.xlsx&amp;quot;, skip=1)
salary &amp;lt;- read_excel(&amp;quot;data/national_M2017_dl.xlsx&amp;quot;)
automation &amp;lt;- read_excel(&amp;quot;data/raw_state_automation_data.xlsx&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;a href=&#34;https://connorrothschild.github.io/r/automation/&#34;&gt;another post&lt;/a&gt;, I detail the data cleaning process. I’ll spare you the details here.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;create-the-ui&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Create the UI&lt;/h1&gt;
&lt;p&gt;Now we create the UI, as is the case for any Shiny app. This is pretty simple: first, we add the title panel and beautify it with some CSS.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ui &amp;lt;- fluidPage(
  
    titlePanel(
      h1(&amp;quot;A College Degree Lowers Job Automation Risk&amp;quot;,
        style = &amp;quot;font-family: &amp;#39;Helvetica Neue&amp;#39;;
        font-size: 20px; font-weight: 400; line-height: 1.1;&amp;quot;),
      windowTitle = &amp;quot;Find Out If Your Job Will Be Automated&amp;quot;
      ),&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we add the main panel, which includes a) the plot object, b) the footnote, and c) some CSS.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mainPanel(
      fluidRow(
        div(
           plotlyOutput(&amp;quot;plot&amp;quot;, height = &amp;#39;600px&amp;#39;, width = &amp;#39;850px&amp;#39;)
           ),align=&amp;quot;left&amp;quot;),
           p(&amp;quot;DATA: FREY &amp;amp; OSBORNE, BUREAU OF LABOR STATISTICS&amp;quot;,
           style = &amp;quot;font-family: &amp;#39;Helvetica Neue&amp;#39;;
        font-size: 8px; font-weight: 500; line-height: 1.1;&amp;quot;)
           )  

)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;server&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Server&lt;/h1&gt;
&lt;p&gt;Now we can define the &lt;code&gt;server()&lt;/code&gt; function, where the real magic of this visualization happens.&lt;/p&gt;
&lt;p&gt;All of the following takes place in the &lt;code&gt;server &amp;lt;- function(input, output, session) {}&lt;/code&gt; function.&lt;/p&gt;
&lt;div id=&#34;create-a-ggplot-object&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Create a ggplot Object&lt;/h2&gt;
&lt;p&gt;We know we’re going to need a ggplot object. In my case, we’ll need a plot object which relies on &lt;em&gt;probability, median income,&lt;/em&gt; and &lt;em&gt;risk of automation&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(aes(x=probability, y=A_MEDIAN, size=TOT_EMP, fill=typicaled, text = text)) +
    geom_point(color = &amp;quot;black&amp;quot;, alpha = .97, stroke = .1) +
    scale_size(range = c(1, 10), guide = &amp;#39;legend&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates the base of the object.&lt;/p&gt;
&lt;div id=&#34;add-a-tooltip&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Add a Tooltip&lt;/h3&gt;
&lt;p&gt;We also know that, like the Bloomberg visualization we’re replicating, we’re going to want a tooltip.&lt;/p&gt;
&lt;p&gt;That’s why we included &lt;code&gt;text&lt;/code&gt; in the above code, which we define here:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data %&amp;gt;% 
    mutate(text = glue::glue(&amp;#39;&amp;lt;span style=&amp;quot;font-size:16px;font-weight:bold&amp;quot;&amp;gt;{data$occupation}&amp;lt;/span&amp;gt;&amp;#39;,
                             &amp;#39;\n&amp;lt;b&amp;gt;Number employed:&amp;lt;/b&amp;gt; {scales::comma(data$TOT_EMP)}&amp;#39;,
                             &amp;#39;\n&amp;lt;b&amp;gt;Computerization prob:&amp;lt;/b&amp;gt; {data$probability}%&amp;#39;,
                             &amp;#39;\n&amp;lt;b&amp;gt;Education:&amp;lt;/b&amp;gt; {data$typicaled}&amp;#39;,
                             sep = &amp;quot;\n&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This tooltip takes in some CSS, some HTML, and creates a pretty tooltip! The &lt;code&gt;glue&lt;/code&gt; function is lovely.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;axes-and-labels&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Axes and Labels&lt;/h3&gt;
&lt;p&gt;The Bloomberg visualization is unique in that it has no axis lines. We can replicate that in &lt;code&gt;ggplot2&lt;/code&gt; via the following code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;theme(axis.line.x = ggplot2::element_blank(), 
      axis.line.y = ggplot2::element_blank(),
      axis.text = element_text(colour = &amp;quot;black&amp;quot;, size = 8))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But that’s not all!&lt;/p&gt;
&lt;p&gt;The Bloomberg visualization is also unique in that it doesn’t have axis titles. Moreover, the axis labels are a bit unique; the x axis increases sequentially by 10 until 90 where it transitions into ‘90%’ (the % is not present in the earlier numbers).&lt;/p&gt;
&lt;p&gt;We can mimic that kind of styling with this code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;xlab(&amp;quot;&amp;quot;) +
ylab(&amp;quot;&amp;quot;) +
labs(size= &amp;quot;&amp;quot;, alpha = &amp;quot;&amp;quot;, fill = &amp;quot;&amp;quot;) + 
scale_y_continuous(limits = c(-1000,240000), 
                   breaks = c(20000, 40000, 60000, 80000, 100000, 120000, 140000, 160000, 180000, 200000, 220000),
                   labels = c(&amp;quot;20K&amp;quot;, &amp;quot;40K&amp;quot;, &amp;quot;60K&amp;quot;, &amp;quot;80K&amp;quot;, &amp;quot;100K&amp;quot;, &amp;quot;120K&amp;quot;, &amp;quot;140K&amp;quot;, &amp;quot;160K&amp;quot;, &amp;quot;180K&amp;quot;, &amp;quot;200K&amp;quot;, &amp;quot;220K&amp;quot;)) +
scale_x_continuous(limits = c(0,100), 
                   breaks = c(10,20,30,40,50,60,70,80,90),
                   labels = c(10,20,30,40,50,60,70,80,&amp;quot;90%&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We create a bit of a buffer on the &lt;code&gt;limits&lt;/code&gt; argument so that we can add annotations. We’ll get to that later!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;colors&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Colors&lt;/h3&gt;
&lt;p&gt;To get as close as possible to Bloomberg’s plot, I’d also like to mimic their color scheme. I pulled the colors from their dotplot with this awesome &lt;a href=&#34;https://chrome.google.com/webstore/detail/color-picker/ohcpnigalekghcmgcdcenkpelffpdolg&#34;&gt;Chrome plugin&lt;/a&gt;; then, I added them to R with the following:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cols &amp;lt;- c(&amp;#39;No formal educational credential&amp;#39; = &amp;#39;#FA1A48&amp;#39;,&amp;#39;High school diploma or equivalent&amp;#39; = &amp;#39;#F79734&amp;#39;,
          &amp;quot;Postsecondary nondegree award&amp;quot; = &amp;#39;#FDFF1C&amp;#39;, &amp;quot;Associate&amp;#39;s degree&amp;quot; = &amp;#39;#1DDF50&amp;#39;, 
          &amp;quot;Bachelor&amp;#39;s degree&amp;quot; = &amp;#39;#34D19D&amp;#39;, &amp;quot;Master&amp;#39;s degree&amp;quot; = &amp;#39;#1BC0E9&amp;#39;,
          &amp;quot;Doctoral or professional degree&amp;quot; = &amp;#39;#1B91FF&amp;#39;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the plot object, we reference this with the following:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scale_fill_manual(values = cols, labels = c(&amp;#39;No formal educational credential&amp;#39;, &amp;#39;High school diploma or equivalent&amp;#39;, &amp;quot;Some college, no degree&amp;quot;,
                                             &amp;quot;Associate&amp;#39;s degree&amp;quot;, &amp;quot;Postsecondary nondegree award&amp;quot;,
                                             &amp;quot;Bachelor&amp;#39;s degree&amp;quot;, &amp;quot;Master&amp;#39;s degree&amp;quot;,
                                             &amp;quot;Doctoral or professional degree&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This essentially creates a fill scale (manually) with specified hex codes for colors. I also tried to manipulate the order of the legend but that didn’t translate to plotly (a documented problem, I believe).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;final-touches-for-the-ggplot&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Final Touches for the ggplot&lt;/h3&gt;
&lt;p&gt;Finally, we do something really hacky: add a regression line with &lt;code&gt;geom_segment&lt;/code&gt;. (I’m so sorry, R gods.)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;geom_segment(aes(x = 0, y = 54000, xend = 100, yend = 58000), size = .1) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have the ggplot object created; let’s convert it to a plotly object.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;create-a-plotly-object&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Create a plotly Object&lt;/h2&gt;
&lt;p&gt;This process relies on the &lt;code&gt;ggplotly&lt;/code&gt; function, which reads in a previously defined &lt;code&gt;ggplot&lt;/code&gt; object and converts into an interactive plotly one.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;introPlot &amp;lt;- ggplotly(introggPlot, tooltip = &amp;#39;text&amp;#39;, sort = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After creating the base plotly object, we move to some more complicated steps:&lt;/p&gt;
&lt;div id=&#34;legend-orientation&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Legend Orientation&lt;/h3&gt;
&lt;p&gt;We’d like the legend to orient horizontally, right above the plot. We do that with the following (inside the &lt;code&gt;layout&lt;/code&gt; function):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;legend = list(orientation = &amp;quot;h&amp;quot;,   
                     xanchor = &amp;quot;left&amp;quot;,
                     x = 0, y = 100,
                     traceorder = &amp;quot;normal&amp;quot;,
                     itemsizing = &amp;quot;constant&amp;quot;,
                     tracegroupgap = 0,
                     font = list(size = 13))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This does a few things. First, it orients the legend horizontally. Second, it anchors the legend to the left. Third, it defines the location (using x-y pairs) of the legend. &lt;code&gt;traceorder&lt;/code&gt; is meant to maintain the previous order from &lt;code&gt;ggplot&lt;/code&gt;, but that didn’t work in my version. &lt;code&gt;itemsizing&lt;/code&gt; is meant to keep the legend items with a constant size, as opposed to dynamic relative to the plot objects themselves. This also didn’t work. The last two arguments define the spacing between points and the font size of the legend text!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;axes-revisited&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Axes Revisited&lt;/h3&gt;
&lt;p&gt;We also see the Bloomberg viz has a right-aligned Y-axis. We can add that to plotly via the following code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;yaxis = list(
        tickfont = element_blank(),
        overlaying = &amp;quot;y&amp;quot;,
        side = &amp;quot;right&amp;quot;,
        title = &amp;quot;&amp;quot;
      )&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;some-aesthetic-changes&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Some Aesthetic Changes&lt;/h3&gt;
&lt;p&gt;Finally, we add three commands to the &lt;code&gt;layout&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;font = list(family = &amp;#39;Helvetica Neue&amp;#39;,
            color = &amp;quot;black&amp;quot;),
margin = list(r=1, l=1,t=1,b=1,pad = 0),
hoverlabel = list(bgcolor = &amp;#39;white&amp;#39;, color = &amp;#39;black&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This a) changes the font of the plot, b) adds a small margin, and c) stylizes the tooltip on hover.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;annotations&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Annotations&lt;/h3&gt;
&lt;p&gt;The last step is to mimic Bloomberg’s annotations. This is a little tough, specifically because it requires pretty specific x- and y-values.&lt;/p&gt;
&lt;p&gt;First, we’ll add their guiding annotations (that replace axis labels) that you can find in each corner:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;add_annotations(
      x = 1, y = 7500,
      xref = &amp;quot;x&amp;quot;,
      yref = &amp;quot;y&amp;quot;,
      text = &amp;quot;&amp;lt;b&amp;gt;Low paid,\nleast vulnerable&amp;lt;/b&amp;gt;&amp;quot;,
      xanchor = &amp;#39;center&amp;#39;,
      align = &amp;#39;left&amp;#39;,
      font = list(size = 10), 
      showarrow = F
    ) %&amp;gt;%
    add_annotations(
      x = 100, y = 7500,
      xref = &amp;quot;x&amp;quot;,
      yref = &amp;quot;y&amp;quot;,
      text = &amp;quot;&amp;lt;b&amp;gt;Low paid,\nmost vulnerable&amp;lt;/b&amp;gt;&amp;quot;,
      xanchor = &amp;#39;center&amp;#39;,
      align = &amp;#39;right&amp;#39;,
      font = list(size = 10), 
      showarrow = F
    ) %&amp;gt;%
    add_annotations(
      x = 1, y = 230000,
      xref = &amp;quot;x&amp;quot;,
      yref = &amp;quot;y&amp;quot;,
      text = &amp;quot;&amp;lt;b&amp;gt;Best paid,\nleast vulnerable&amp;lt;/b&amp;gt;&amp;quot;,
      xanchor = &amp;#39;center&amp;#39;,
      align = &amp;#39;left&amp;#39;,
      font = list(size = 10), 
      showarrow = F
    ) %&amp;gt;%
    add_annotations(
      x = 100, y = 230000,
      xref = &amp;quot;x&amp;quot;,
      yref = &amp;quot;y&amp;quot;,
      text = &amp;quot;&amp;lt;b&amp;gt;Best paid,\nmost vulnerable&amp;lt;/b&amp;gt;&amp;quot;,
      xanchor = &amp;#39;center&amp;#39;,
      align = &amp;#39;right&amp;#39;,
      font = list(size = 10), 
      showarrow = F
    )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we add annotations for ‘most and least likely to be automated’, as well as the y axis label.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;add_annotations(
      x = -5, y = -5000,
      xref = &amp;quot;x&amp;quot;,
      yref = &amp;quot;y&amp;quot;,
      text = glue::glue(sprintf(&amp;#39;\u2190&amp;#39;), &amp;quot;Least likely to be automated&amp;quot;),
      xanchor = &amp;#39;left&amp;#39;,
      align = &amp;#39;left&amp;#39;,
      font = list(size = 10), 
      showarrow = F
    ) %&amp;gt;%
    add_annotations(
      x = 105, y = -5000,
      xref = &amp;quot;x&amp;quot;,
      yref = &amp;quot;y&amp;quot;,
      text = glue::glue(&amp;quot;Most likely to be automated&amp;quot;, sprintf(&amp;#39;\u2192&amp;#39;)),
      xanchor = &amp;#39;right&amp;#39;,
      align = &amp;#39;right&amp;#39;,
      font = list(size = 10), 
      showarrow = F
    ) %&amp;gt;%
    add_annotations(
      x = 99, y = 243000,
      xref = &amp;quot;x&amp;quot;,
      yref = &amp;quot;y&amp;quot;,
      text = &amp;quot;Average annual wage&amp;quot;,
      xanchor = &amp;#39;center&amp;#39;,
      align = &amp;#39;right&amp;#39;,
      font = list(size = 10), 
      showarrow = F
    )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And finally, add a couple of plot annotations which label specific points. (We are not labelling a hundred occupations like Bloomberg did.)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;add_annotations(
      x = subset(data$probability, data$occupation == &amp;quot;Chief Executives&amp;quot;),
      y = subset(data$A_MEDIAN, data$occupation == &amp;quot;Chief Executives&amp;quot;),
      text = &amp;quot;Chief Executives&amp;quot;,
      xref = &amp;quot;x&amp;quot;,
      yref = &amp;quot;y&amp;quot;,
      xanchor = &amp;#39;center&amp;#39;,
      align = &amp;#39;right&amp;#39;,
      font = list(size = 10), 
      showarrow = TRUE,
      arrowhead = 0,
      ax = 50,
      ay = 25
    ) %&amp;gt;% 
    add_annotations(
      x = subset(data$probability, data$occupation == &amp;quot;Cashiers&amp;quot;),
      y = subset(data$A_MEDIAN, data$occupation == &amp;quot;Cashiers&amp;quot;),
      text = &amp;quot;Cashiers&amp;quot;,
      xref = &amp;quot;x&amp;quot;,
      yref = &amp;quot;y&amp;quot;,
      xanchor = &amp;#39;center&amp;#39;,
      align = &amp;#39;right&amp;#39;,
      font = list(size = 10), 
      showarrow = TRUE,
      arrowhead = 0,
      ax = 40,
      ay = -50
    )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finalize the plotly object with&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;config(displaylogo = F, showSendToCloud = F, displayModeBar = F)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re done! Run the application with the following code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;shinyApp(ui = ui, server = server)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we’re done! Find my interactive visualization &lt;a href=&#34;https://connorrothschild.shinyapps.io/2019-12-10/&#34;&gt;here&lt;/a&gt;. Find the code, uninterrupted and (hopefully) reproducible, &lt;em&gt;&lt;a href=&#34;https://github.com/connorrothschild/tidytuesday/blob/master/2019-12-10/app.R&#34;&gt;here&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Here’s the Bloomberg visualization:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figs/bloomberg.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And here’s mine:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figs/replication.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
